"use strict";(self.webpackChunkuxp_xd=self.webpackChunkuxp_xd||[]).push([[3546],{21619:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return l},default:function(){return m}});var n=a(87462),i=a(63366),o=(a(15007),a(64983)),r=a(91515),d=["components"],l={},s={_frontmatter:l},p=r.Z;function m(e){var t=e.components,a=(0,i.Z)(e,d);return(0,o.mdx)(p,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"how-to-create-paths"},"How to create paths"),(0,o.mdx)("p",null,"This sample demonstrates how to create path objects in XD. The path objects are used to construct a pie chart."),(0,o.mdx)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Basic knowledge of HTML, CSS, and JavaScript"),(0,o.mdx)("li",{parentName:"ul"},"Basic knowledge of ",(0,o.mdx)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths"},"Paths")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"/uxp-xd/develop/tutorials/quick-start/"},"Quick Start Tutorial")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"/uxp-xd/develop/tutorials/debugging/"},"Debugging Tutorial"))),(0,o.mdx)("h2",{id:"development-steps"},"Development Steps"),(0,o.mdx)("blockquote",null,(0,o.mdx)("p",{parentName:"blockquote"},(0,o.mdx)("strong",{parentName:"p"},"Info"),"\nComplete code for this plugin can be found ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/AdobeXD/Plugin-Samples/tree/master/how-to-create-path-objects"},"on GitHub"),".")),(0,o.mdx)("h3",{id:"1-create-plugin-scaffold"},"1. Create plugin scaffold"),(0,o.mdx)("p",null,"First, edit the manifest file for the plugin you created in our ",(0,o.mdx)("a",{parentName:"p",href:"/uxp-xd/develop/tutorials/quick-start/"},"Quick Start Tutorial"),"."),(0,o.mdx)("p",null,"Replace the ",(0,o.mdx)("inlineCode",{parentName:"p"},"uiEntryPoints")," field of the manifest with the following:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-json"},'"uiEntryPoints": [\n    {\n        "type": "menu",\n        "label": "Create Pie Chart",\n        "commandId": "createPieChartCommand"\n    }\n]\n')),(0,o.mdx)("p",null,"If you're curious about what each entry means, ",(0,o.mdx)("a",{parentName:"p",href:"/uxp-xd/develop/plugin-development/plugin-structure/manifest/"},"see the manifest documentation"),", where you can also learn about all manifest requirements for a plugin to be published in the XD Plugin Manager."),(0,o.mdx)("p",null,"Then, update your ",(0,o.mdx)("inlineCode",{parentName:"p"},"main.js")," file, mapping the manifest's ",(0,o.mdx)("inlineCode",{parentName:"p"},"commandId")," to a handler function."),(0,o.mdx)("p",null,"Replace the content of your ",(0,o.mdx)("inlineCode",{parentName:"p"},"main.js")," file with the following code:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"function createPieChartCommand(selection) {\n  // The body of this function is added later\n}\n\nmodule.exports = {\n  commands: {\n    createPieChartCommand,\n  },\n};\n")),(0,o.mdx)("p",null,"The remaining steps in this tutorial describe additional edits to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"main.js")," file."),(0,o.mdx)("h3",{id:"2-require-in-xd-api-dependencies"},"2. Require in XD API dependencies"),(0,o.mdx)("p",null,"For this tutorial, we just need access to two XD scenegraph classes."),(0,o.mdx)("p",null,"Add the following lines to the top of your ",(0,o.mdx)("inlineCode",{parentName:"p"},"main.js")," file:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},'// Add this to the top of your main.js file\nconst { Path, Color } = require("scenegraph");\n')),(0,o.mdx)("p",null,"Now the ",(0,o.mdx)("inlineCode",{parentName:"p"},"Path")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},"Color")," classes are required in and ready to be used."),(0,o.mdx)("h3",{id:"3-create-helper-functions"},"3. Create helper functions"),(0,o.mdx)("h5",{id:"calculate-a-point-on-a-circle"},"Calculate a point on a circle"),(0,o.mdx)("p",null,"Since our plugin will create a pie chart, this helper function will be used to return an x,y coordinates of each wedge in the pie chart. The function accepts ",(0,o.mdx)("inlineCode",{parentName:"p"},"radius")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},"angle")," as parameters and use them to calculate the coordinates of a point on a circle at a given angle on the perimeter of the circle."),(0,o.mdx)("p",null,"Add the lines of code below to your file:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},'function pointOnCircle(radius, angle) {\n  const radians = (angle * 2 * Math.PI) / 360;\n  const xcoord = radius * Math.cos(radians);\n  const ycoord = radius * Math.sin(radians);\n  return xcoord + "," + ycoord;\n}\n')),(0,o.mdx)("p",null,"This is just straight-up JavaScript; there's nothing specific to XD plugin APIs to cover here."),(0,o.mdx)("p",null,"We won't cover the math in depth, here's an overview what this helper function does:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"The angle is expressed in degrees. It must be converted to radians before passing it to the sine and cosine functions. More info: ",(0,o.mdx)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos"},"Math.cos"),", ",(0,o.mdx)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin"},"Math.sin")),(0,o.mdx)("li",{parentName:"ul"},"The function will return the coordinates as a string in the ",(0,o.mdx)("inlineCode",{parentName:"li"},"x,y")," format, which will be used to be inserted to the path data, which also has to be a string")),(0,o.mdx)("h5",{id:"add-a-single-pie-wedge-to-the-scenegraph"},"Add a single pie wedge to the scenegraph"),(0,o.mdx)("p",null,"Our plugin will also need to be able to add a single pie wedge to the scenegraph."),(0,o.mdx)("p",null,"Add the lines of code below to your file. Each of the numbered comments are explained below the code:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"function createWedge(selection, radius, startAngle, endAngle, color) {\n  // [1]\n  const startPt = pointOnCircle(radius, startAngle);\n  const endPt = pointOnCircle(radius, endAngle);\n  const pathData = `M0,0 L${startPt} A${radius},${radius},0,0,1,${endPt} L0,0`; // [2]\n  const wedge = new Path(); // [3]\n  wedge.pathData = pathData; // [4]\n  wedge.fill = new Color(color); // [5]\n  wedge.translation = { x: radius, y: radius }; // [6]\n  selection.insertionParent.addChild(wedge); // [7]\n}\n")),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"This function accepts five arguments:",(0,o.mdx)("ol",{parentName:"li"},(0,o.mdx)("li",{parentName:"ol"},"The current selection in the scene graph (",(0,o.mdx)("inlineCode",{parentName:"li"},"selection"),")"),(0,o.mdx)("li",{parentName:"ol"},"The pie chart radius (",(0,o.mdx)("inlineCode",{parentName:"li"},"chartRadius"),")"),(0,o.mdx)("li",{parentName:"ol"},"The start radian of the wedge (",(0,o.mdx)("inlineCode",{parentName:"li"},"startAngle"),")"),(0,o.mdx)("li",{parentName:"ol"},"The end radian of the wedge (",(0,o.mdx)("inlineCode",{parentName:"li"},"endAngle"),")"),(0,o.mdx)("li",{parentName:"ol"},"The color of the wedge (",(0,o.mdx)("inlineCode",{parentName:"li"},"color"),")"))),(0,o.mdx)("li",{parentName:"ol"},"Based on these arguments, ",(0,o.mdx)("inlineCode",{parentName:"li"},"pathData")," is constructed. The pen is moved to the origin, a line is drawn to the first point on the edge of the circle, an arc is drawn to the second point on the edge of the circle, and then a line is drawn back to the origin. For more information on how to create path data, please refer to ",(0,o.mdx)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths"},"Paths")),(0,o.mdx)("li",{parentName:"ol"},"Create a new instance of ",(0,o.mdx)("inlineCode",{parentName:"li"},"Path")),(0,o.mdx)("li",{parentName:"ol"},"Set ",(0,o.mdx)("inlineCode",{parentName:"li"},"pathData")),(0,o.mdx)("li",{parentName:"ol"},"Set the color of the path object"),(0,o.mdx)("li",{parentName:"ol"},"Move the path object down and to the right by ",(0,o.mdx)("inlineCode",{parentName:"li"},"radius")," units. As a result, the pie chart will appear with its top left corner positioned at ",(0,o.mdx)("inlineCode",{parentName:"li"},"0,0")),(0,o.mdx)("li",{parentName:"ol"},"Insert the path object into the currently-selected artboard")),(0,o.mdx)("h3",{id:"4-create-the-main-function"},"4. Create the main function"),(0,o.mdx)("p",null,"In this step, we'll build out the main function, ",(0,o.mdx)("inlineCode",{parentName:"p"},"createLinesHandlerFunction"),", that we added in the first step."),(0,o.mdx)("p",null,"This function creates four wedges:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},'function createPieChartCommand(selection) {\n  createWedge(selection, 100, 0, 90, "red");\n  createWedge(selection, 100, 90, 135, "blue");\n  createWedge(selection, 100, 135, 225, "yellow");\n  createWedge(selection, 100, 225, 360, "purple");\n}\n')),(0,o.mdx)("p",null,"Note that the end angle of each wedge matches the start angle of the next wedge. As a result, the wedges fit together to create a complete pie chart!"),(0,o.mdx)("h3",{id:"5-run-the-plugin"},"5. Run the plugin"),(0,o.mdx)("p",null,"Ater saving all your changes, reload the plugin in XD and run it. The result should be similar to the following:"),(0,o.mdx)("p",null,(0,o.mdx)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"800px"}},"\n      ",(0,o.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"176.875%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,o.mdx)("picture",{parentName:"span"},"\n          ",(0,o.mdx)("source",{parentName:"picture",srcSet:["/uxp-xd/static/a993cc8ea2a8d97027802b5692d80304/5530d/pie-chart.webp 320w","/uxp-xd/static/a993cc8ea2a8d97027802b5692d80304/0c8fb/pie-chart.webp 640w","/uxp-xd/static/a993cc8ea2a8d97027802b5692d80304/cf465/pie-chart.webp 800w"],sizes:"(max-width: 800px) 100vw, 800px",type:"image/webp"}),"\n          ",(0,o.mdx)("source",{parentName:"picture",srcSet:["/uxp-xd/static/a993cc8ea2a8d97027802b5692d80304/dd4a7/pie-chart.png 320w","/uxp-xd/static/a993cc8ea2a8d97027802b5692d80304/0f09e/pie-chart.png 640w","/uxp-xd/static/a993cc8ea2a8d97027802b5692d80304/78d47/pie-chart.png 800w"],sizes:"(max-width: 800px) 100vw, 800px",type:"image/png"}),"\n          ",(0,o.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/uxp-xd/static/a993cc8ea2a8d97027802b5692d80304/78d47/pie-chart.png",alt:"Created pie chart",title:"Created pie chart",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-develop-tutorials-how-to-create-paths-index-md-c393d315aa1a8dbe75ba.js.map