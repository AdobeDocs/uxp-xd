{"version":3,"file":"component---src-pages-develop-reference-path-md-c2ce93c6de2619fa389c.js","mappings":"iQAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGC,GAAK,YAER,OAAO,SAACJ,GAAS,UAAKD,EAAiBK,EAAK,CAAED,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,QAAM,SAEd,mBAAG,mBAAQC,WAAW,KAAG,QAAkB,aAC7C,mBAAQA,WAAW,KAAG,WAAqB,MAAM,cAAGA,WAAW,IACzD,KAAQ,yCAAuC,iBAEnD,kRAEA,gIACA,eACE,GAAM,YAAU,aAElB,wBAAS,mBAAQA,WAAW,KAAG,YAAsB,MAAM,uBAAYA,WAAW,KAAG,YACrF,gEAAiD,uBAAYA,WAAW,KAAG,UAAwB,+LAEnG,mBAAG,mBAAQA,WAAW,KAAG,QAAkB,2BAA2B,cAAGA,WAAW,IAChF,KAAQ,SAAO,SAIvB,CAEAJ,EAAWK,gBAAiB,C","sources":["webpack://uxp-xd/./src/pages/develop/reference/Path.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"path\"\n    }}>{`Path`}</h1>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: class\n`}<strong parentName=\"p\">{`Extends`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/GraphicNode\"\n      }}>{`GraphicNode`}</a></p>\n    <p>{`Arbitrary vector Path leaf node shape. Paths can be open or closed, and a Path may include multiple disjoint sections (a.k.a. a \"compound\npath\"). Even open Paths may have a fill - the fill is drawn as if the Path were closed with a final \"Z\" segment.`}</p>\n    <p>{`The path may not start at (0,0) in local coordinates, for example if it starts with a move (\"M\") segment.`}</p>\n    <h2 {...{\n      \"id\": \"pathdata\"\n    }}>{`pathData`}</h2>\n    <p>{`â–¸ `}<strong parentName=\"p\">{`pathData`}</strong>{`: `}<inlineCode parentName=\"p\">{`string`}</inlineCode></p>\n    <p>{`Representation of the path outline in SVG `}<inlineCode parentName=\"p\">{`<path>`}</inlineCode>{` syntax. Unlike other node types, pathData is writable here. Syntax is\nautomatically normalized, so the getter may return a slightly different string than what you passed to the setter.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#path\"\n      }}>{`Path`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}