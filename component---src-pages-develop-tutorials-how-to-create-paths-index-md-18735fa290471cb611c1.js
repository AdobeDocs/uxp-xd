(window.webpackJsonp=window.webpackJsonp||[]).push([[180],{SAtY:function(e,t,n){e.exports=n.p+"static/pie-chart-a993cc8ea2a8d97027802b5692d80304.png"},"yp/y":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return l})),n.d(t,"default",(function(){return s}));var a=n("wx14"),i=n("zLVn"),o=(n("q1tI"),n("7ljp")),r=n("ndZU"),l=(n("qKvR"),{}),c={_frontmatter:l},d=r.a;function s(e){var t=e.components,r=Object(i.a)(e,["components"]);return Object(o.mdx)(d,Object(a.a)({},c,r,{components:t,mdxType:"MDXLayout"}),Object(o.mdx)("h1",{id:"how-to-create-paths"},"How to create paths"),Object(o.mdx)("p",null,"This sample demonstrates how to create path objects in XD. The path objects are used to construct a pie chart."),Object(o.mdx)("h2",{id:"prerequisites"},"Prerequisites"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},"Basic knowledge of HTML, CSS, and JavaScript"),Object(o.mdx)("li",{parentName:"ul"},"Basic knowledge of ",Object(o.mdx)("a",Object(a.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths"}),"Paths")),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/tutorials/quick-start/"}),"Quick Start Tutorial")),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/tutorials/debugging/"}),"Debugging Tutorial"))),Object(o.mdx)("h2",{id:"development-steps"},"Development Steps"),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("strong",{parentName:"p"},"Info"),"\nComplete code for this plugin can be found ",Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/AdobeXD/Plugin-Samples/tree/master/how-to-create-path-objects"}),"on GitHub"),".")),Object(o.mdx)("h3",{id:"1-create-plugin-scaffold"},"1. Create plugin scaffold"),Object(o.mdx)("p",null,"First, edit the manifest file for the plugin you created in our ",Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"/uxp-xd/tutorials/quick-start/"}),"Quick Start Tutorial"),"."),Object(o.mdx)("p",null,"Replace the ",Object(o.mdx)("inlineCode",{parentName:"p"},"uiEntryPoints")," field of the manifest with the following:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'"uiEntryPoints": [\n    {\n        "type": "menu",\n        "label": "Create Pie Chart",\n        "commandId": "createPieChartCommand"\n    }\n]\n')),Object(o.mdx)("p",null,"If you're curious about what each entry means, ",Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"/uxp-xd/reference/structure/manifest/"}),"see the manifest documentation"),", where you can also learn about all manifest requirements for a plugin to be published in the XD Plugin Manager."),Object(o.mdx)("p",null,"Then, update your ",Object(o.mdx)("inlineCode",{parentName:"p"},"main.js")," file, mapping the manifest's ",Object(o.mdx)("inlineCode",{parentName:"p"},"commandId")," to a handler function."),Object(o.mdx)("p",null,"Replace the content of your ",Object(o.mdx)("inlineCode",{parentName:"p"},"main.js")," file with the following code:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function createPieChartCommand(selection) {\n  // The body of this function is added later\n}\n\nmodule.exports = {\n  commands: {\n    createPieChartCommand,\n  },\n};\n")),Object(o.mdx)("p",null,"The remaining steps in this tutorial describe additional edits to the ",Object(o.mdx)("inlineCode",{parentName:"p"},"main.js")," file."),Object(o.mdx)("h3",{id:"2-require-in-xd-api-dependencies"},"2. Require in XD API dependencies"),Object(o.mdx)("p",null,"For this tutorial, we just need access to two XD scenegraph classes."),Object(o.mdx)("p",null,"Add the following lines to the top of your ",Object(o.mdx)("inlineCode",{parentName:"p"},"main.js")," file:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// Add this to the top of your main.js file\nconst { Path, Color } = require("scenegraph");\n')),Object(o.mdx)("p",null,"Now the ",Object(o.mdx)("inlineCode",{parentName:"p"},"Path")," and ",Object(o.mdx)("inlineCode",{parentName:"p"},"Color")," classes are required in and ready to be used."),Object(o.mdx)("h3",{id:"3-create-helper-functions"},"3. Create helper functions"),Object(o.mdx)("h5",{id:"calculate-a-point-on-a-circle"},"Calculate a point on a circle"),Object(o.mdx)("p",null,"Since our plugin will create a pie chart, this helper function will be used to return an x,y coordinates of each wedge in the pie chart. The function accepts ",Object(o.mdx)("inlineCode",{parentName:"p"},"radius")," and ",Object(o.mdx)("inlineCode",{parentName:"p"},"angle")," as parameters and use them to calculate the coordinates of a point on a circle at a given angle on the perimeter of the circle."),Object(o.mdx)("p",null,"Add the lines of code below to your file:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'function pointOnCircle(radius, angle) {\n  const radians = (angle * 2 * Math.PI) / 360;\n  const xcoord = radius * Math.cos(radians);\n  const ycoord = radius * Math.sin(radians);\n  return xcoord + "," + ycoord;\n}\n')),Object(o.mdx)("p",null,"This is just straight-up JavaScript; there's nothing specific to XD plugin APIs to cover here."),Object(o.mdx)("p",null,"We won't cover the math in depth, here's an overview what this helper function does:"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},"The angle is expressed in degrees. It must be converted to radians before passing it to the sine and cosine functions. More info: ",Object(o.mdx)("a",Object(a.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos"}),"Math.cos"),", ",Object(o.mdx)("a",Object(a.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin"}),"Math.sin")),Object(o.mdx)("li",{parentName:"ul"},"The function will return the coordinates as a string in the ",Object(o.mdx)("inlineCode",{parentName:"li"},"x,y")," format, which will be used to be inserted to the path data, which also has to be a string")),Object(o.mdx)("h5",{id:"add-a-single-pie-wedge-to-the-scenegraph"},"Add a single pie wedge to the scenegraph"),Object(o.mdx)("p",null,"Our plugin will also need to be able to add a single pie wedge to the scenegraph."),Object(o.mdx)("p",null,"Add the lines of code below to your file. Each of the numbered comments are explained below the code:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function createWedge(selection, radius, startAngle, endAngle, color) {\n  // [1]\n  const startPt = pointOnCircle(radius, startAngle);\n  const endPt = pointOnCircle(radius, endAngle);\n  const pathData = `M0,0 L${startPt} A${radius},${radius},0,0,1,${endPt} L0,0`; // [2]\n  const wedge = new Path(); // [3]\n  wedge.pathData = pathData; // [4]\n  wedge.fill = new Color(color); // [5]\n  wedge.translation = { x: radius, y: radius }; // [6]\n  selection.insertionParent.addChild(wedge); // [7]\n}\n")),Object(o.mdx)("ol",null,Object(o.mdx)("li",{parentName:"ol"},"This function accepts five arguments:",Object(o.mdx)("ol",{parentName:"li"},Object(o.mdx)("li",{parentName:"ol"},"The current selection in the scene graph (",Object(o.mdx)("inlineCode",{parentName:"li"},"selection"),")"),Object(o.mdx)("li",{parentName:"ol"},"The pie chart radius (",Object(o.mdx)("inlineCode",{parentName:"li"},"chartRadius"),")"),Object(o.mdx)("li",{parentName:"ol"},"The start radian of the wedge (",Object(o.mdx)("inlineCode",{parentName:"li"},"startAngle"),")"),Object(o.mdx)("li",{parentName:"ol"},"The end radian of the wedge (",Object(o.mdx)("inlineCode",{parentName:"li"},"endAngle"),")"),Object(o.mdx)("li",{parentName:"ol"},"The color of the wedge (",Object(o.mdx)("inlineCode",{parentName:"li"},"color"),")"))),Object(o.mdx)("li",{parentName:"ol"},"Based on these arguments, ",Object(o.mdx)("inlineCode",{parentName:"li"},"pathData")," is constructed. The pen is moved to the origin, a line is drawn to the first point on the edge of the circle, an arc is drawn to the second point on the edge of the circle, and then a line is drawn back to the origin. For more information on how to create path data, please refer to ",Object(o.mdx)("a",Object(a.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths"}),"Paths")),Object(o.mdx)("li",{parentName:"ol"},"Create a new instance of ",Object(o.mdx)("inlineCode",{parentName:"li"},"Path")),Object(o.mdx)("li",{parentName:"ol"},"Set ",Object(o.mdx)("inlineCode",{parentName:"li"},"pathData")),Object(o.mdx)("li",{parentName:"ol"},"Set the color of the path object"),Object(o.mdx)("li",{parentName:"ol"},"Move the path object down and to the right by ",Object(o.mdx)("inlineCode",{parentName:"li"},"radius")," units. As a result, the pie chart will appear with its top left corner positioned at ",Object(o.mdx)("inlineCode",{parentName:"li"},"0,0")),Object(o.mdx)("li",{parentName:"ol"},"Insert the path object into the currently-selected artboard")),Object(o.mdx)("h3",{id:"4-create-the-main-function"},"4. Create the main function"),Object(o.mdx)("p",null,"In this step, we'll build out the main function, ",Object(o.mdx)("inlineCode",{parentName:"p"},"createLinesHandlerFunction"),", that we added in the first step."),Object(o.mdx)("p",null,"This function creates four wedges:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'function createPieChartCommand(selection) {\n  createWedge(selection, 100, 0, 90, "red");\n  createWedge(selection, 100, 90, 135, "blue");\n  createWedge(selection, 100, 135, 225, "yellow");\n  createWedge(selection, 100, 225, 360, "purple");\n}\n')),Object(o.mdx)("p",null,"Note that the end angle of each wedge matches the start angle of the next wedge. As a result, the wedges fit together to create a complete pie chart!"),Object(o.mdx)("h3",{id:"5-run-the-plugin"},"5. Run the plugin"),Object(o.mdx)("p",null,"Ater saving all your changes, reload the plugin in XD and run it. The result should be similar to the following:"),Object(o.mdx)("p",null,Object(o.mdx)("img",{alt:"Created pie chart",src:n("SAtY")})))}s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-develop-tutorials-how-to-create-paths-index-md-18735fa290471cb611c1.js.map