{"version":3,"sources":["webpack://uxp-xd/./src/pages/develop/reference/scenegraph.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","name","isMDXComponent"],"mappings":"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","file":"153aa687-e7ce5c513a0443793e43.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"scenegraph\"\n    }}>{`scenegraph`}</h1>\n    <p>{`The scenegraph is a node tree which represents the structure of the XD document. It closely matches the hierarchy seen in the Layers panel\ninside XD. Some scenenodes may contain children (e.g., a Group or Artboard), while others are leaf nodes (e.g., a Rectangle or Text node).\nThe root of the scenegraph contains all Artboards that exist in the document, as well as all `}<em parentName=\"p\">{`pasteboard`}</em>{` content (nodes that are not\ncontained by any artboard).`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"896px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"36.5625%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/uxp-xd/static/4c632cd690f96df72a0b904732027279/cb523/scenegraphExample.webp 320w\", \"/uxp-xd/static/4c632cd690f96df72a0b904732027279/797b9/scenegraphExample.webp 640w\", \"/uxp-xd/static/4c632cd690f96df72a0b904732027279/38f06/scenegraphExample.webp 896w\"],\n            \"sizes\": \"(max-width: 896px) 100vw, 896px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/uxp-xd/static/4c632cd690f96df72a0b904732027279/72799/scenegraphExample.png 320w\", \"/uxp-xd/static/4c632cd690f96df72a0b904732027279/6af66/scenegraphExample.png 640w\", \"/uxp-xd/static/4c632cd690f96df72a0b904732027279/4c42d/scenegraphExample.png 896w\"],\n            \"sizes\": \"(max-width: 896px) 100vw, 896px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/uxp-xd/static/4c632cd690f96df72a0b904732027279/4c42d/scenegraphExample.png\",\n            \"alt\": \"example of scenegraph tree\",\n            \"title\": \"example of scenegraph tree\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <p>{`You can modify properties on any scenenodes within the current `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/edit-context/\"\n      }}><em parentName=\"a\">{`edit context`}</em></a>{`, and add leaf nodes to the current\nedit context, but you cannot make structural changes directly to the scenegraph tree. Instead, use `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/commands/\"\n      }}>{`commands`}</a>{`.`}</p>\n    <p>{`Typically, you access scenegraph nodes via the `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/selection/\"\n      }}><inlineCode parentName=\"a\">{`selection`}</inlineCode></a>{` argument that is passed to your plugin command, or by\ntraversing the entire document tree using the `}<a parentName=\"p\" {...{\n        \"href\": \"#rootnode\"\n      }}><inlineCode parentName=\"a\">{`documentRoot`}</inlineCode></a>{` argument that is passed to your plugin command. These\nobjects are also accessible `}<a parentName=\"p\" {...{\n        \"href\": \"#other-module-members\"\n      }}>{`on the scenegraph module`}</a>{` for convenience.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function myCommand(selection) {\n  let node = selection.items[0];\n\n  console.log(\"The selected node is a: \" + node.constructor.name);\n\n  // Print out types of all child nodes (if any)\n  node.children.forEach(function (childNode, i) {\n    console.log(\"Child \" + i + \" is a \" + childNode.constructor.name);\n  });\n}\n`}</code></pre>\n    <p>{`To create new scenenodes, load this `}<inlineCode parentName=\"p\">{`scenegraph`}</inlineCode>{` module directly and use the node constructor functions:`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let scenegraph = require(\"scenegraph\");\nfunction myCommand(selection) {\n  let newShape = new scenegraph.Rectangle();\n  newShape.width = 100;\n  newShape.height = 50;\n  newShape.fill = new Color(\"red\");\n  selection.insertionParent.addChild(newShape);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"class-hierarchy\"\n    }}>{`Class hierarchy`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Tip`}</strong>{`\nAdditional subclasses may be added in the future. Always be sure to have a default case for unknown scenenode classes\nwhen traversing the scenegraph.`}</p>\n    </blockquote>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode\"\n        }}>{`SceneNode`}</a>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#graphicnode\"\n            }}>{`GraphicNode`}</a>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#artboard\"\n                }}>{`Artboard`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#rectangle\"\n                }}>{`Rectangle`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#ellipse\"\n                }}>{`Ellipse`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#polygon\"\n                }}>{`Polygon`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#line\"\n                }}>{`Line`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#path\"\n                }}>{`Path`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#booleangroup\"\n                }}>{`BooleanGroup`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#text\"\n                }}>{`Text`}</a></li>\n            </ul>\n          </li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#group\"\n            }}>{`Group`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#symbolinstance\"\n            }}>{`SymbolInstance`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#repeatgrid\"\n            }}>{`RepeatGrid`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#scrollablegroup\"\n            }}>{`ScrollableGroup`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#linkedgraphic\"\n            }}>{`LinkedGraphic`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#rootnode\"\n            }}>{`RootNode`}</a></li>\n        </ul>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"typedefs\"\n    }}>{`Typedefs`}</h2>\n    <dl>\n      <dt><a name=\"Point\"></a> Point : </dt><dd>!&#123;x:number, y:number}</dd>\n      <dt><a name=\"Bounds\"></a> Bounds : </dt><dd>!&#123;x:number, y:number, width:number, height:number}</dd>\n    </dl>\n    <h2 {...{\n      \"id\": \"related-classes\"\n    }}>{`Related classes`}</h2>\n    <p>{`These classes are not scenenode types, but are used extensively in the scenegraph API:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/reference/Color/\"\n        }}>{`Color`}</a>{` - Value object for `}<inlineCode parentName=\"li\">{`fill`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`stroke`}</inlineCode>{`, and other properties`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/reference/ImageFill/\"\n        }}>{`ImageFill`}</a>{` - Value object for `}<inlineCode parentName=\"li\">{`fill`}</inlineCode>{` property`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/reference/LinearGradientFill/\"\n        }}>{`LinearGradientFill`}</a>{` - Value object for `}<inlineCode parentName=\"li\">{`fill`}</inlineCode>{` property`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/reference/Matrix/\"\n        }}>{`Matrix`}</a>{` - Value object for `}<inlineCode parentName=\"li\">{`transform`}</inlineCode>{` property`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/reference/Matrix3D/\"\n        }}>{`Matrix3D`}</a>{` - Value object for `}<inlineCode parentName=\"li\">{`3D transform`}</inlineCode>{` property`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/reference/Shadow/\"\n        }}>{`Shadow`}</a>{` - Value object for `}<inlineCode parentName=\"li\">{`shadow`}</inlineCode>{` property`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/reference/Blur/\"\n        }}>{`Blur`}</a>{` - Value object for `}<inlineCode parentName=\"li\">{`blur`}</inlineCode>{` property`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/reference/InnerShadow/\"\n        }}>{`InnerShadow`}</a>{` - Value object for `}<inlineCode parentName=\"li\">{`innerShadow`}</inlineCode>{` property`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"other-module-members\"\n    }}>{`Other module members`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#module_scenegraph-selection\"\n        }}>{`selection`}</a>{` : `}{`!`}<a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/reference/selection/\"\n        }}><inlineCode parentName=\"a\">{`Selection`}</inlineCode></a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#module_scenegraph-root\"\n        }}>{`root`}</a>{` : `}{`!`}<a parentName=\"li\" {...{\n          \"href\": \"#rootnode\"\n        }}><inlineCode parentName=\"a\">{`RootNode`}</inlineCode></a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#module_scenegraph-getnodebyguid\"\n        }}>{`getNodeByGUID(guid)`}</a>{` ⇒ `}<inlineCode parentName=\"li\">{`?SceneNode`}</inlineCode></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"scenegraphselection--selection\"\n    }}><em parentName=\"h3\">{`scenegraph.selection : `}{`!`}<a parentName=\"em\" {...{\n          \"href\": \"/uxp-xd/develop/reference/selection/\"\n        }}><inlineCode parentName=\"a\">{`Selection`}</inlineCode></a></em></h3>\n    <p>{`Object representing the current selection state and `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/edit-context/\"\n      }}>{`edit context`}</a>{`. Also available as the first argument passed to your plugin command handler function.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: static property of `}<a parentName=\"p\" {...{\n        \"href\": \"#module_scenegraph\"\n      }}><inlineCode parentName=\"a\">{`scenegraph`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true\n`}<strong parentName=\"p\">{`Since`}</strong>{`: XD 14`}</p>\n    <h3 {...{\n      \"id\": \"scenegraphroot--rootnode\"\n    }}><em parentName=\"h3\">{`scenegraph.root : `}{`!`}<a parentName=\"em\" {...{\n          \"href\": \"#rootnode\"\n        }}><inlineCode parentName=\"a\">{`RootNode`}</inlineCode></a></em></h3>\n    <p>{`Root node of the current document's scenegraph. Also available as the second argument passed to your plugin command handler function.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: static property of `}<a parentName=\"p\" {...{\n        \"href\": \"#module_scenegraph\"\n      }}><inlineCode parentName=\"a\">{`scenegraph`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true\n`}<strong parentName=\"p\">{`Since`}</strong>{`: XD 14`}</p>\n    <h3 {...{\n      \"id\": \"scenegraphgetnodebyguidguid\"\n    }}><em parentName=\"h3\">{`scenegraph.getNodeByGUID(guid)`}</em></h3>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 28`}</p>\n    <p>{`Returns the scenenode in this document that has the given `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-guid\"\n      }}>{`node GUID`}</a>{`. Returns undefined if no such node exists connected\nto the scenegraph tree (detached/orphan nodes will not be found). This provides a fast way of persistently remembering a node across plugin\noperations and even across document open/closes.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: static method of `}<a parentName=\"p\" {...{\n        \"href\": \"#module_scenegraph\"\n      }}><inlineCode parentName=\"a\">{`scenegraph`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Returns`}</strong>{`: `}<inlineCode parentName=\"p\">{`?SceneNode`}</inlineCode></p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`guid`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`SceneNode GUID -- must be all lowercase, as returned by the `}<a parentName=\"td\" {...{\n              \"href\": \"#scenenode-guid\"\n            }}><inlineCode parentName=\"a\">{`guid`}</inlineCode>{` getter`}</a>{`.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let node = scenegraph.selection.items[0];\nlet guid = node.guid;\n\n// ...later on:\nlet sameNode = scenegraph.getNodeByGUID(guid);\nif (sameNode) {\n  // ^ Always check if node still exists - user may have deleted it\n  console.log(\"Found node again!\", sameNode);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"scenenode\"\n    }}><em parentName=\"h2\">{`SceneNode`}</em></h2>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: abstract class`}</p>\n    <p>{`Base class of all scenegraph nodes. Nodes will always be an instance of some `}<em parentName=\"p\">{`subclass`}</em>{` of SceneNode.`}</p>\n    <h3 {...{\n      \"id\": \"scenenodeguid--string\"\n    }}><em parentName=\"h3\">{`sceneNode.guid : `}<inlineCode parentName=\"em\">{`string`}</inlineCode></em></h3>\n    <p>{`Returns a unique identifier for this node that stays the same when the file is closed & reopened, or if the node is moved to a different part of the document. Cut-Paste will result in a new GUID, however.`}</p>\n    <p>{`The GUID is guaranteed unique `}<em parentName=\"p\">{`within`}</em>{` the current document, but `}<em parentName=\"p\">{`other`}</em>{` documents may contain the same GUID value. For example, if the user makes a copy of an XD file, both files will use the same GUIDs.`}</p>\n    <p>{`The GUID of the `}<a parentName=\"p\" {...{\n        \"href\": \"#module_scenegraph-root\"\n      }}>{`root node`}</a>{` changes if the document is duplicated via Save As. See `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/application/#module_application-activeDocument\"\n      }}><inlineCode parentName=\"a\">{`application.activeDocument.guid`}</inlineCode></a>{` for details.`}</p>\n    <p>{`Node objects can be destroyed and recreated during operations such as Undo/Redo, so if you need to store a reference to a node even between operations in the `}<em parentName=\"p\">{`same`}</em>{` session, it's best to store the GUID and then retrieve the node later via `}<a parentName=\"p\" {...{\n        \"href\": \"#module_scenegraph-getnodebyguid\"\n      }}><inlineCode parentName=\"a\">{`getNodeByGuid()`}</inlineCode></a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h3 {...{\n      \"id\": \"scenenodeparent--scenenode\"\n    }}><em parentName=\"h3\">{`sceneNode.parent : `}<a parentName=\"em\" {...{\n          \"href\": \"#scenenode\"\n        }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></em></h3>\n    <p>{`Returns the parent node. Null if this is the root node, or a freshly constructed node which has not been added to a parent yet.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h3 {...{\n      \"id\": \"scenenodechildren--scenenodelistscenenodelist\"\n    }}><em parentName=\"h3\">{`sceneNode.children : `}<inlineCode parentName=\"em\">{`\\\\![SceneNodeList](SceneNodeList/)`}</inlineCode></em></h3>\n    <p>{`Returns a list of this node's children. List is length 0 if the node has no children. The first child is lowest in the z order.`}</p>\n    <p>{`This list is `}<em parentName=\"p\"><strong parentName=\"em\">{`not an Array`}</strong></em>{`, so you must use `}<inlineCode parentName=\"p\">{`at(i)`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`[i]`}</inlineCode>{` to access children by index. It has a number of Array-like\nmethods such as `}<inlineCode parentName=\"p\">{`forEach()`}</inlineCode>{` for convenience and improved performance, however.`}</p>\n    <p>{`The list is immutable. Use `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-removefromparent\"\n      }}>{`removeFromParent`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#group-addchild\"\n      }}>{`addChild`}</a>{` to add/remove child nodes.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true\n`}<strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let node = ...;\nconsole.log(\"Node has \" + node.children.length + \" children\");\nconsole.log(\"First child: \" + node.children.at(0));  // do not use \\`[0]\\` - it will not work!\n\nnode.children.forEach(function (childNode, i) {\n    console.log(\"Child \" + i + \" is a \" + childNode.constructor.name);\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"scenenodeisinartworktree--boolean\"\n    }}><em parentName=\"h3\">{`sceneNode.isInArtworkTree : `}<inlineCode parentName=\"em\">{`boolean`}</inlineCode></em></h3>\n    <p>{`True if the node's parent chain connects back to the document root node.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h3 {...{\n      \"id\": \"scenenodeiscontainer--boolean\"\n    }}><em parentName=\"h3\">{`sceneNode.isContainer : `}<inlineCode parentName=\"em\">{`boolean`}</inlineCode></em></h3>\n    <p>{`True if this node is a type that could have children (e.g. an Artboard, Group, Boolean Group, etc.).`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h3 {...{\n      \"id\": \"scenenodeselected--boolean\"\n    }}><em parentName=\"h3\">{`sceneNode.selected : `}<inlineCode parentName=\"em\">{`boolean`}</inlineCode></em></h3>\n    <p>{`True if this node is part of the current selection. To get a list of `}<em parentName=\"p\">{`all`}</em>{` selected nodes or change which nodes are selected, use `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/selection/\"\n      }}>{`selection`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true\n`}<strong parentName=\"p\">{`See`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/selection/\"\n      }}>{`selection`}</a></p>\n    <h3 {...{\n      \"id\": \"scenenodevisible--boolean\"\n    }}><em parentName=\"h3\">{`sceneNode.visible : `}<inlineCode parentName=\"em\">{`boolean`}</inlineCode></em></h3>\n    <p>{`False if this node has been hidden by the user (eyeball toggle in Layers panel). If true, the node may still be invisible for other reasons: a parent or grandparent has visible=false, the node has opacity=0%, the node is clipped by a mask, etc.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"scenenodeopacity--number-00---10\"\n    }}><em parentName=\"h3\">{`sceneNode.opacity : `}<inlineCode parentName=\"em\">{`number`}</inlineCode></em>{` (0.0 - 1.0)`}</h3>\n    <p>{`Node's opacity setting. The overall visual opacity seen in the document is determined by combining this value with the opacities of the node's entire parent chain, as well as the opacity settings of its fill/stroke properties if this is a leaf node.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"scenenodeblendmode--string\"\n    }}><em parentName=\"h3\">{`sceneNode.blendMode : `}<inlineCode parentName=\"em\">{`string`}</inlineCode></em></h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`BLEND_MODE_PASSTHROUGH`}</inlineCode>{`\n`}<strong parentName=\"p\">{`Since`}</strong>{`: XD 27`}</p>\n    <p>{`Blend mode determines how a node is composited onto the content below it.`}</p>\n    <p>{`One of: `}<inlineCode parentName=\"p\">{`SceneNode.BLEND_MODE_PASSTHROUGH`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`BLEND_MODE_NORMAL`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`BLEND_MODE_MULTIPLY`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`BLEND_MODE_DARKEN`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`BLEND_MODE_COLOR_BURN`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`BLEND_MODE_LIGHTEN`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`BLEND_MODE_SCREEN`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`BLEND_MODE_COLOR_DODGE`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`BLEND_MODE_OVERLAY`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`BLEND_MODE_SOFT_LIGHT`}</inlineCode>{`,\n`}<inlineCode parentName=\"p\">{`BLEND_MODE_HARD_LIGHT`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`BLEND_MODE_DIFFERENCE`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`BLEND_MODE_EXCLUSION`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`BLEND_MODE_HUE`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`BLEND_MODE_SATURATION`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`BLEND_MODE_COLOR`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`BLEND_MODE_LUMINOSITY`}</inlineCode>{`.`}</p>\n    <p><em parentName=\"p\">{`Note:`}</em>{` for leaf nodes (GraphicNode), the XD UI may show leaf nodes as blend mode \"Normal\" even when the underlying value is `}<inlineCode parentName=\"p\">{`BLEND_MODE_PASSTHROUGH`}</inlineCode>{`. This is because \"Pass Through\" and \"Normal\" are essentially equivalent for leaf nodes -- they only differ\nin appearance when a node has children.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`node.blendMode = scenegraph.SceneNode.BLEND_MODE_LUMINOSITY;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"scenenodetransform--matrixmatrix3d\"\n    }}><em parentName=\"h3\">{`sceneNode.transform : `}<a parentName=\"em\" {...{\n          \"href\": \"/uxp-xd/develop/reference/Matrix/\"\n        }}><inlineCode parentName=\"a\">{`Matrix`}</inlineCode></a>{`|`}<a parentName=\"em\" {...{\n          \"href\": \"/uxp-xd/develop/reference/Matrix3D/\"\n        }}><inlineCode parentName=\"a\">{`Matrix3D`}</inlineCode></a></em></h3>\n    <p>{`Affine transform matrix that converts from the node's `}<em parentName=\"p\">{`local coordinate space`}</em>{` to its parent's coordinate space. The matrix never has\nskew or scale components, and if this node is an Artboard the matrix never has rotation either. Rather than reading the raw matrix values\ndirectly, it may be easier to use the `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-translation\"\n      }}>{`translation`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-rotation\"\n      }}>{`rotation`}</a>{` properties.`}</p>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 40 transform will return a `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/Matrix3D/\"\n      }}>{`Matrix3D`}</a>{` objects for 3D transformed nodes. Again, rather than reading the raw matrix values directly, it may be easier to use the `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-zDepth\"\n      }}>{`zDepth`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-rotationX\"\n      }}>{`rotationX`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-rotationY\"\n      }}>{`rotationY`}</a>{` for 3D specific properties.`}</p>\n    <p>{`To move or resize a node, use the `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-translation\"\n      }}>{`translation`}</a>{` property or APIs like `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-placeinparentcoordinates\"\n      }}>{`placeInParentCoordinates()`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-rotatearound\"\n      }}>{`rotateAround()`}</a>{`.\nSetting the entire transform matrix directly is not allowed. To resize a node, use `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-resize\"\n      }}>{`resize()`}</a>{`.`}</p>\n    <p>{`For an overview of node transforms & coordinate systems, see `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/coordinate-spaces-and-units/\"\n      }}>{`Coordinate spaces`}</a>{`.`}</p>\n    <p>{`This getter returns a fresh Matrix each time, so its fields can be mutated by the caller without interfering with the node's state.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true\n`}<strong parentName=\"p\">{`See`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-translation\"\n        }}>{`translation`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-rotation\"\n        }}>{`rotation`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-moveinparentcoordinates\"\n        }}>{`moveInParentCoordinates`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-placeinparentcoordinates\"\n        }}>{`placeInParentCoordinates`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-rotatearound\"\n        }}>{`rotateAround`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-globalbounds\"\n        }}>{`globalBounds`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-localbounds\"\n        }}>{`localBounds`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-boundsinparent\"\n        }}>{`boundsInParent`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-topleftinparent\"\n        }}>{`topLeftInParent`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-zDepth\"\n        }}>{`zDepth`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-rotationX\"\n        }}>{`rotationX`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-rotationY\"\n        }}>{`rotationY`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-placeinparentcoordinates3D\"\n        }}>{`placeInParentCoordinates3D`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-moveZDepth\"\n        }}>{`moveZDepth`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-rotateXAround\"\n        }}>{`rotateXAround`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-rotateYAround\"\n        }}>{`rotateYAround`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-perspectiveCenterInParentCoordinates\"\n        }}>{`perspectiveCenterInParentCoordinates`}</a></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"scenenodetranslation--xnumber-ynumber\"\n    }}><em parentName=\"h3\">{`sceneNode.translation : `}<inlineCode parentName=\"em\">{`!{x:number, y:number}`}</inlineCode></em></h3>\n    <p>{`The translate component of this node's `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-transform\"\n      }}>{`transform`}</a>{`. Since translation is applied after any rotation in\nthe transform Matrix, translation occurs along the parent's X/Y axes, not the node's own local X/Y axes. This is equivalent to\nthe `}<inlineCode parentName=\"p\">{`e`}</inlineCode>{` & `}<inlineCode parentName=\"p\">{`f`}</inlineCode>{` fields in the transform Matrix.`}</p>\n    <p>{`For an overview of node positioning & coordinate systems, see `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/coordinate-spaces-and-units/\"\n      }}>{`Coordinate spaces`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`See`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-moveinparentcoordinates\"\n        }}>{`moveInParentCoordinates`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-placeinparentcoordinates\"\n        }}>{`placeInParentCoordinates`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-topleftinparent\"\n        }}>{`topLeftInParent`}</a></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"scenenoderotation--number\"\n    }}><em parentName=\"h3\">{`sceneNode.rotation : `}<inlineCode parentName=\"em\">{`number`}</inlineCode></em></h3>\n    <p>{`The rotation component of this node's `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-transform\"\n      }}>{`transform`}</a>{`, in clockwise degrees.`}</p>\n    <p>{`For an overview of node transforms & coordinate systems, see `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/coordinate-spaces-and-units/\"\n      }}>{`Coordinate spaces`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true\n`}<strong parentName=\"p\">{`See`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-rotatearound\"\n      }}>{`rotateAround`}</a></p>\n    <h3 {...{\n      \"id\": \"scenenodeglobalbounds--bounds\"\n    }}><em parentName=\"h3\">{`sceneNode.globalBounds : `}{`!`}<a parentName=\"em\" {...{\n          \"href\": \"#bounds\"\n        }}><inlineCode parentName=\"a\">{`Bounds`}</inlineCode></a></em></h3>\n    <p>{`The node's `}<em parentName=\"p\">{`path bounds`}</em>{` in document-global coordinate space (represented by a bounding box aligned with global X/Y axes). Path bounds match the selection outline seen in the XD, but exclude some visual parts of the node (outer stroke, drop shadow / blur, etc.).`}</p>\n    <p>{`For an overview of node bounding boxes & coordinate systems, see `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/coordinate-spaces-and-units/\"\n      }}>{`Coordinate spaces`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true\n`}<strong parentName=\"p\">{`See`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-globaldrawbounds\"\n        }}>{`globalDrawBounds`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-localbounds\"\n        }}>{`localBounds`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-boundsinparent\"\n        }}>{`boundsInParent`}</a></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"scenenodelocalbounds--bounds\"\n    }}><em parentName=\"h3\">{`sceneNode.localBounds : `}{`!`}<a parentName=\"em\" {...{\n          \"href\": \"#bounds\"\n        }}><inlineCode parentName=\"a\">{`Bounds`}</inlineCode></a></em></h3>\n    <p>{`The node's `}<em parentName=\"p\">{`path bounds`}</em>{` in its own local coordinate space. This coordinate space may be rotated and translated relative to the parent's coordinate space. Path bounds match the selection outline seen in XD, but exclude some visual parts of the node (outerstroke, drop shadow / blur, etc.).`}</p>\n    <p>{`The visual top-left of a node's path bounds is located at (localBounds.x, localBounds.y). This value is `}<em parentName=\"p\">{`not`}</em>{` necessarily (0,0) in the local coordinate space: for example, a text node's baseline is at y=0 in local coordinates, so the top of the text has a negative y value.`}</p>\n    <p>{`For an overview of node bounding boxes & coordinate systems, see `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/coordinate-spaces-and-units/\"\n      }}>{`Coordinate spaces`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true\n`}<strong parentName=\"p\">{`See`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-globalbounds\"\n        }}>{`globalBounds`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-boundsinparent\"\n        }}>{`boundsInParent`}</a></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"scenenodeboundsinparent--bounds\"\n    }}><em parentName=\"h3\">{`sceneNode.boundsInParent : `}{`!`}<a parentName=\"em\" {...{\n          \"href\": \"#bounds\"\n        }}><inlineCode parentName=\"a\">{`Bounds`}</inlineCode></a></em></h3>\n    <p>{`The node's `}<em parentName=\"p\">{`path bounds`}</em>{` in its parent's coordinate space (represented by a bounding box aligned with the parent's X/Y axes - so if the node has rotation, the top-left of the node is not necessarily located at the top-left of boundsInParent). Path bounds match the selection outline seen in XD, but exclude some visual parts of the node (outer stroke, drop shadow / blur, etc.).`}</p>\n    <p>{`For an overview of node bounding boxes & coordinate systems, see `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/coordinate-spaces-and-units/\"\n      }}>{`Coordinate spaces`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true\n`}<strong parentName=\"p\">{`See`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-globalbounds\"\n        }}>{`globalBounds`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-localbounds\"\n        }}>{`localBounds`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-topleftinparent\"\n        }}>{`topLeftInParent`}</a></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"scenenodetopleftinparent--point\"\n    }}>{`sceneNode.topLeftInParent : `}{`!`}<a parentName=\"h3\" {...{\n        \"href\": \"#point\"\n      }}><inlineCode parentName=\"a\">{`Point`}</inlineCode></a></h3>\n    <p>{`The position of the node's upper-left corner (localBounds.x, localBounds.y) in its parent's coordinate space. If the node is\nrotated, this is not the same as the top-left corner of boundsInParent.\nThis is a shortcut for `}<inlineCode parentName=\"p\">{`node.transform.transformPoint({x: node.localBounds.x, y: node.localBounds.y})`}</inlineCode></p>\n    <p>{`For an overview of node bounding boxes & coordinate systems, see `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/coordinate-spaces-and-units/\"\n      }}>{`Coordinate spaces`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true\n`}<strong parentName=\"p\">{`See`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-boundsinparent\"\n        }}>{`boundsInParent`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-localbounds\"\n        }}>{`localBounds`}</a></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"scenenodelocalcenterpoint--point\"\n    }}>{`sceneNode.localCenterPoint : `}{`!`}<a parentName=\"h3\" {...{\n        \"href\": \"#point\"\n      }}><inlineCode parentName=\"a\">{`Point`}</inlineCode></a></h3>\n    <p>{`The position of the node's centerpoint in its own local coordinate space. Useful as an argument to `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-rotatearound\"\n      }}>{`rotateAround`}</a>{`.\nThis is a shortcut for `}<inlineCode parentName=\"p\">{`{x: localBounds.x + localBounds.width/2, y: localBounds.y + localBounds.height/2})`}</inlineCode></p>\n    <p>{`For an overview of node bounding boxes & coordinate systems, see `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/coordinate-spaces-and-units/\"\n      }}>{`Coordinate spaces`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true\n`}<strong parentName=\"p\">{`See`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-localbounds\"\n      }}>{`localBounds`}</a></p>\n    <h3 {...{\n      \"id\": \"scenenodeglobaldrawbounds--bounds\"\n    }}><em parentName=\"h3\">{`sceneNode.globalDrawBounds : `}{`!`}<a parentName=\"em\" {...{\n          \"href\": \"#bounds\"\n        }}><inlineCode parentName=\"a\">{`Bounds`}</inlineCode></a></em></h3>\n    <p>{`The node's `}<em parentName=\"p\">{`draw bounds`}</em>{` in document-global coordinate space. Draw bounds are larger than the selection outline seen in XD, including outer stroke, drop shadow / blur, etc. - every visible pixel of the node is encompassed by these bounds. This matches the image dimensions if the node is exported as a PNG/JPEG bitmap.`}</p>\n    <p>{`For an overview of node bounding boxes & coordinate systems, see `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/coordinate-spaces-and-units/\"\n      }}>{`Coordinate spaces`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true\n`}<strong parentName=\"p\">{`See`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-globalbounds\"\n        }}>{`globalBounds`}</a></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"scenenodename--string\"\n    }}><em parentName=\"h3\">{`sceneNode.name : `}<inlineCode parentName=\"em\">{`string`}</inlineCode></em></h3>\n    <p>{`Node name as seen in the Layers panel. Also used as filename during Export.`}</p>\n    <p>{`Setting this property will cause `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-hasdefaultname\"\n      }}><inlineCode parentName=\"a\">{`hasDefaultName`}</inlineCode></a>{` to become false.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"scenenodehasdefaultname--boolean\"\n    }}><em parentName=\"h3\">{`sceneNode.hasDefaultName : `}<inlineCode parentName=\"em\">{`boolean`}</inlineCode></em></h3>\n    <p>{`True if `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-name\"\n      }}>{`name`}</a>{` is a generic, auto-generated string (e.g. \"Rectangle 5\"). False if name has been explicitly set.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h3 {...{\n      \"id\": \"scenenodelocked--boolean\"\n    }}><em parentName=\"h3\">{`sceneNode.locked : `}<inlineCode parentName=\"em\">{`boolean`}</inlineCode></em></h3>\n    <p>{`True if the node is locked, meaning it cannot normally be selected.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"scenenodemarkedforexport--boolean\"\n    }}><em parentName=\"h3\">{`sceneNode.markedForExport : `}<inlineCode parentName=\"em\">{`boolean`}</inlineCode></em></h3>\n    <p>{`True if the node should be included in the output of `}<em parentName=\"p\">{`File > Export > Batch`}</em>{` and other bulk-export workflows.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"scenenodefixedwhenscrolling--boolean\"\n    }}><em parentName=\"h3\">{`sceneNode.fixedWhenScrolling : `}<inlineCode parentName=\"em\">{`?boolean`}</inlineCode></em></h3>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 19`}</p>\n    <p>{`True if the node stays in a fixed position while the Artboard's content is scrolling (when viewed in an interactive prototype).\n`}<em parentName=\"p\">{`Only applicable for nodes whose immediate parent is an Artboard`}</em>{` -- this does not apply to content inside a ScrollableGroup!`}</p>\n    <p>{`For other nodes, this property returns undefined and cannot be set. To determine whether those nodes scroll or remain\nfixed, walk up the parent chain and check this property on the topmost ancestor in the Artboard.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`See`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"#artboard-viewportheight\"\n      }}>{`Artboard.viewportHeight`}</a></p>\n    <h3 {...{\n      \"id\": \"scenenodetriggeredinteractions--arrrayinteractiondevelopreferenceinteractionsinteractiongt\"\n    }}><em parentName=\"h3\">{`sceneNode.triggeredInteractions : `}<inlineCode parentName=\"em\">{`!Arrray<\\\\![Interaction](/develop/reference/interactions/#Interaction)&gt;`}</inlineCode></em></h3>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 19`}</p>\n    <p>{`Get all interactions that are triggered by this node in the document's interactive prototype. Each element in the array\nis an `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/interactions/#Interaction\"\n      }}>{`Interaction object`}</a>{` which describes a gesture/event plus the action it produces.`}</p>\n    <p>{`Note: If this node (or one of its ancestors) has `}<inlineCode parentName=\"p\">{`visible`}</inlineCode>{` = false, tap and drag interactions on it will not be triggered.`}</p>\n    <p>{`Currently, this API excludes some types of interactions: keypress/gamepad, scrolling, hover, component state transitions, or non-speech audio playback.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Print all the interactions triggered by a node\nnode.triggeredInteractions.forEach((interaction) => {\n  console.log(\n    \"Trigger: \" +\n      interaction.trigger.type +\n      \" -> Action: \" +\n      interaction.action.type\n  );\n});\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true\n`}<strong parentName=\"p\">{`See`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/interactions/#module_interactions-allInteractions\"\n      }}>{`interactions.allInteractions`}</a></p>\n    <h3 {...{\n      \"id\": \"scenenodecontentchildren--scenenodelist\"\n    }}><em parentName=\"h3\">{`sceneNode.contentChildren : `}{`!`}<a parentName=\"em\" {...{\n          \"href\": \"#SceneNodeList\"\n        }}><inlineCode parentName=\"a\">{`SceneNodeList`}</inlineCode></a></em></h3>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 38`}</p>\n    <p>{`Returns a list of this node's children, skipping the background node when present. The list is z-index ordered, from lowest to highest. This list is `}<em parentName=\"p\"><strong parentName=\"em\">{`not an Array`}</strong></em>{`, so you must use `}<inlineCode parentName=\"p\">{`at(i)`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`[i]`}</inlineCode>{` to access content children by index.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const node = ...; // supposing that this node has the Stack property enabled\nconsole.log(\"Node has \" + node.contentChildren.length + \" stack cells\");\nconsole.log(\"First stack cell: \" + node.contentChildren.at(0));  // do not use \\`[0]\\` - it will not work!\n\nnode.contentChildren.forEach(function (stackCell, i) {\n    console.log(\"Stack cell \" + i + \" is a \" + stackCell.constructor.name);\n});\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h3 {...{\n      \"id\": \"scenenodelayout--layoutproperties\"\n    }}><em parentName=\"h3\">{`sceneNode.layout : LayoutProperties`}</em></h3>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 38`}</p>\n    <p>{`Encapsulates all the Layout properties: Responsive Resize, Padding and Stacks. By design, the Stack property is conditioned by the presence of Padding property which, in turn, is conditioned by the presence of Responsive Resize property.`}</p>\n    <p>{`Object containing all layout properties for the node`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`type`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`!String`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`SceneNode.LAYOUT_NONE, LAYOUT_RESPONSIVE_RESIZE, LAYOUT_PADDING or LAYOUT_STACK depending on which layout properties are enabled`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`?stack`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`!Object`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Included if layout type is LAYOUT_STACK`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`?padding`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`!Object`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Included if layout type is LAYOUT_STACK or LAYOUT_PADDING`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`?resizeConstraints`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`!Object`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Included if layout type is LAYOUT_STACK, LAYOUT_PADDING or LAYOUT_RESPONSIVE_RESIZE`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`Object representing layout.stack`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`orientation`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`SceneNode.STACK_HORIZONTAL or STACK_VERTICAL`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`spacings`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Array<Number>`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`Number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`a numbde if each cell is equidistant or an array of spaces between cells in order provided by `}<a parentName=\"td\" {...{\n              \"href\": \"#contentChildren\"\n            }}>{`contentChildren`}</a></td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`Object representing layout.padding`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`background`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`sceneNode`}</inlineCode>{` of NULL`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`SceneNode used as the background or null if no background set`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`values`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Object`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`Number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`top, right, bottom, left are all numbers which determines each side padding amount. A single number represents the padding used by all four sides.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`Object reporesenting layout.resizeConstraints`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`type`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`String`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`SceneNode.RESPONSIVE_RESIZE_AUTO or RESPONSIVE_RESIZE_MANUAL`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`values`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Object`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`top, right, bottom, left, width and height are all Boolean vaues set to true when enabled.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`In a `}<inlineCode parentName=\"p\">{`LayoutProperties`}</inlineCode>{` object:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`SceneNode.layout.padding.background`}</inlineCode>{` is either a SceneNode, if the current SceneNode has a background, or null, otherwise`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`SceneNode.layout.padding.values`}</inlineCode>{` represents either a number, if all the padding values are equal, or an object with `}<inlineCode parentName=\"li\">{`top`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`right`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`bottom`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`left`}</inlineCode>{` attributes, otherwise`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`SceneNode.layout.stack.spacings`}</inlineCode>{` represents either a number, if the stack cells are equidistant, or an array of spaces between the stack cells, in the order mentioned by `}<inlineCode parentName=\"li\">{`SceneNode.contentChildren`}</inlineCode>{`,\notherwise; the `}<inlineCode parentName=\"li\">{`SceneNode.contentChildren`}</inlineCode>{`, being z-index ordered, contains the stack cells in the reverse order to the natural one, from the last cell in stack to the first one; so, in a Stack\nwith N non-background stack cells:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`SceneNode.layout.stack.spacings[i]`}</inlineCode>{` = the space between `}<inlineCode parentName=\"li\">{`SceneNode.contentChildren[i]`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`SceneNode.contentChildren[i + 1]`}</inlineCode>{` for i = 0, N - 1`}</li>\n          <li parentName=\"ul\">{`To access the space coming before/after a stack cell, then the index of the desired stack cell must be searched in `}<inlineCode parentName=\"li\">{`SceneNode.contentChildren`}</inlineCode>{` and due to the z-index order:`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`after space = `}<inlineCode parentName=\"li\">{`SceneNode.layout.stack.spacings[index - 1]`}</inlineCode></li>\n              <li parentName=\"ul\">{`before space = `}<inlineCode parentName=\"li\">{`SceneNode.layout.stack.spacings[index]`}</inlineCode>{`       `}</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`The setter expects a `}<inlineCode parentName=\"p\">{`PluginLayoutProperties`}</inlineCode>{` object which must contain the desired layout type:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`SceneNode.LAYOUT_NONE:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`all the Layout properties will be disabled`}</li>\n          <li parentName=\"ul\">{`any other attributes contained in the provided Object will be ignored`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`SceneNode.LAYOUT_RESPONSIVE_RESIZE:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`only the Responsive Resize layout-specific property will be enabled`}</li>\n          <li parentName=\"ul\">{`the only attribute that will be taken into account from the provided Object is `}<inlineCode parentName=\"li\">{`resizeConstraints`}</inlineCode>{`; if this attribute:`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`is provided: if Responsive Resize is not enabled, this property is first enabled like switching its toggle from off to on in the Property Inspector; then the specified resize constraints are applied`}</li>\n              <li parentName=\"ul\">{`is missing: if Responsive Resize is not enabled, this property is enabled like switching its toggle from off to on in the Property Inspector; otherwise nothing happens`}</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`SceneNode.LAYOUT_PADDING:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`the Responsive Resize and Padding layout-specific properties will be enabled`}</li>\n          <li parentName=\"ul\">{`the attributes that will be taken into account from the provided Object are `}<inlineCode parentName=\"li\">{`resizeConstraints`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`padding`}</inlineCode></li>\n          <li parentName=\"ul\">{`for the `}<inlineCode parentName=\"li\">{`resizeConstraints`}</inlineCode>{` attribute, the behaviour is just the same as in the case of the SceneNode.LAYOUT_RESPONSIVE_RESIZE desired layout type`}</li>\n          <li parentName=\"ul\">{`for the `}<inlineCode parentName=\"li\">{`padding`}</inlineCode>{` attribute:`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`is provided: if Padding is not enabled, this property is first enabled like checking its checkbox in the Property Inspector; then the specified padding values are applied`}</li>\n              <li parentName=\"ul\">{`is missing: if Padding is not enabled, this property is enabled like checking its checkbox in the Property Inspector; otherwise nothing happens`}</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`SceneNode.LAYOUT_STACK:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`the Responsive Resize, Padding and Stack layout-specific properties will be enabled`}</li>\n          <li parentName=\"ul\">{`the attributes that will be taken into account from the provided Object are `}<inlineCode parentName=\"li\">{`resizeConstraints`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`padding`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`stack`}</inlineCode></li>\n          <li parentName=\"ul\">{`for the `}<inlineCode parentName=\"li\">{`resizeConstraints`}</inlineCode>{` attribute, the behaviour is just the same as in the case of the SceneNode.LAYOUT_RESPONSIVE_RESIZE desired layout type`}</li>\n          <li parentName=\"ul\">{`for `}<inlineCode parentName=\"li\">{`padding`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`stack`}</inlineCode>{` attributes:`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`if the `}<inlineCode parentName=\"li\">{`stack`}</inlineCode>{` attribute is provided, then:`}\n                <ul parentName=\"li\">\n                  <li parentName=\"ul\">{`Padding will be enabled (if it’s not), without computing a background and having all the padding values equal to 0; afterwards, the padding values will be updated with those specified, if the `}<inlineCode parentName=\"li\">{`padding`}</inlineCode>{` attribute is provided`}</li>\n                  <li parentName=\"ul\">{`Stack will be enabled (if it’s not), without clustering and reordering the stack cells - this can be called \"manual stack mode\"; then the orientation and spacings will be updated with those specified`}</li>\n                </ul>\n              </li>\n              <li parentName=\"ul\">{`if the `}<inlineCode parentName=\"li\">{`stack`}</inlineCode>{` attribute is missing, then:`}\n                <ul parentName=\"li\">\n                  <li parentName=\"ul\">{`Padding behaviour is just the same as in the case of the SceneNode.LAYOUT_PADDING desired layout type`}</li>\n                  <li parentName=\"ul\">{`Stack will be enabled (if it’s not) like checking its checkbox in the Property Inpector - this can be called \"auto stack mode\"`}</li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`Getter Remarks:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`If `}<inlineCode parentName=\"li\">{`SceneNode.layout.type`}</inlineCode>{` is:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`SceneNode.LAYOUT_NONE: there’s no Layout property enabled or available, hence the getter will return an Object containing only the `}<inlineCode parentName=\"li\">{`type`}</inlineCode>{` attribute`}</li>\n          <li parentName=\"ul\">{`SceneNode.LAYOUT_RESPONSIVE_RESIZE: the only Layout-specific property available and enabled is Responsive Resize, hence the getter will return an Object containing the `}<inlineCode parentName=\"li\">{`type`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`resizeConstraints`}</inlineCode>{` attributes`}</li>\n          <li parentName=\"ul\">{`SceneNode.LAYOUT_PADDING: Padding is enabled, so the object returned by the getter will contain the `}<inlineCode parentName=\"li\">{`type`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`resizeConstraints`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`padding`}</inlineCode>{` attributes`}</li>\n          <li parentName=\"ul\">{`SceneNode.LAYOUT_STACK: Stack is enabled, so the object returned by the getter will contain the `}<inlineCode parentName=\"li\">{`type`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`resizeConstraints`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`padding`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`stack`}</inlineCode>{` attributes`}</li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`Setter Remarks:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`If `}<inlineCode parentName=\"li\">{`SceneNode.layout.resizeConstraints.type`}</inlineCode>{` is set to SceneNode.RESPONSIVE_RESIZE_AUTO, then the values of the resize pins are no longer required, so the\nattribute `}<inlineCode parentName=\"li\">{`SceneNode.layout.resizeConstraints.values`}</inlineCode>{` is considered as read-only, being ignored if set`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`SceneNode.layout.paddingbackground`}</inlineCode>{` is a read-only attribute, so it will be ignored if set. If you’d like to manipulate the\nbackground, look for the `}<inlineCode parentName=\"li\">{`makeBackground()`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`replaceBackground()`}</inlineCode>{` methods.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"scenenodehorizontalconstraints--positionstring-sizestring\"\n    }}><em parentName=\"h3\">{`sceneNode.horizontalConstraints : `}<inlineCode parentName=\"em\">{`?{position:string, size:string}`}</inlineCode></em></h3>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 29`}</p>\n    <p>{`Horizontal dynamic-layout settings used with the Responsive Resize feature. Setting this only determines how the node is updated when its parent is resized -- it does not change the node's current size or position.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`horizontalConstraints.position`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Horizontal position anchoring, one of `}<inlineCode parentName=\"td\">{`SceneNode.FIXED_LEFT`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`FIXED_RIGHT`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`FIXED_BOTH`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`POSITION_PROPORTIONAL`}</inlineCode>{`.`}<br /><br /><inlineCode parentName=\"td\">{`FIXED_BOTH`}</inlineCode>{` sets fixed left & right offsets, so it always implies `}<inlineCode parentName=\"td\">{`size: SIZE_RESIZES`}</inlineCode>{` (similar to setting both `}<inlineCode parentName=\"td\">{`left`}</inlineCode>{` & `}<inlineCode parentName=\"td\">{`right`}</inlineCode>{` in CSS).`}<br /><br /><inlineCode parentName=\"td\">{`POSITION_PROPORTIONAL`}</inlineCode>{` holds node position at a fixed percentage of the parent's width -- the same positioning behavior you'd get if Responsive Resize is turned off entirely.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`horizontalConstraints.size`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Horizontal sizing behavior, either `}<inlineCode parentName=\"td\">{`SceneNode.SIZE_FIXED`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`SceneNode.SIZE_RESIZES`}</inlineCode>{`.`}<br /><br /><inlineCode parentName=\"td\">{`SIZE_FIXED`}</inlineCode>{` cannot be used with `}<inlineCode parentName=\"td\">{`position: FIXED_BOTH`}</inlineCode>{`, since it is impossible to fix both left & right edges without resizing when the parent resizes.`}<br /><br /><inlineCode parentName=\"td\">{`SIZE_RESIZES`}</inlineCode>{` can be used with any `}<inlineCode parentName=\"td\">{`position`}</inlineCode>{` setting. With `}<inlineCode parentName=\"td\">{`position: FIXED_BOTH`}</inlineCode>{`, the node's size always equals the parent's size minus the fixed left & right offsets. With other position settings, the node's size maintains a fixed percentage of the parent's size.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`Both fields `}<em parentName=\"p\">{`must`}</em>{` be provided together when setting this property.`}</p>\n    <p>{`Returns undefined if node's parent is a container where Responsive Resize is unavailable:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Certain containers such as RepeatGrid and the pasteboard (scenegraph root) do not support Responsive Resize.`}</li>\n      <li parentName=\"ul\">{`Container may have Responsive Resize layout explicitly turned off (see `}<a parentName=\"li\" {...{\n          \"href\": \"#group-dynamiclayout\"\n        }}><inlineCode parentName=\"a\">{`dynamicLayout`}</inlineCode>{` flag`}</a>{`).`}</li>\n    </ul>\n    <p>{`Attempting to set this property when Responsive Resize is unavailable results in an error.`}</p>\n    <p>{`Setting this property will cause `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-hascustomconstraints\"\n      }}><inlineCode parentName=\"a\">{`hasCustomConstraints`}</inlineCode></a>{` to become true.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let node = selection.items[0];\nnode.horizontalConstraints = {\n  position: scenegraph.SceneNode.FIXED_LEFT,\n  size: scenegraph.SceneNode.SIZE_FIXED,\n};\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"scenenodeverticalconstraints--positionstring-sizestring\"\n    }}><em parentName=\"h3\">{`sceneNode.verticalConstraints : `}<inlineCode parentName=\"em\">{`?{position:string, size:string}`}</inlineCode></em></h3>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 29`}</p>\n    <p>{`Vertical dynamic-layout settings used with the Responsive Resize feature. Setting this only determines how the node is updated when its parent is resized -- it does not change the node's current size or position.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`verticalConstraints.position`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Vertical position anchoring, one of `}<inlineCode parentName=\"td\">{`SceneNode.FIXED_TOP`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`FIXED_BOTTOM`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`FIXED_BOTH`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`POSITION_PROPORTIONAL`}</inlineCode>{`.`}<br /><br />{`For details, see `}<a parentName=\"td\" {...{\n              \"href\": \"#scenenode-horizontalconstraints\"\n            }}><inlineCode parentName=\"a\">{`horizontalConstraints`}</inlineCode></a>{` above.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`verticalConstraints.size`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Vertical sizing behavior, either `}<inlineCode parentName=\"td\">{`SceneNode.SIZE_FIXED`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`SceneNode.SIZE_RESIZES`}</inlineCode>{`.`}<br /><br />{`For details, see `}<a parentName=\"td\" {...{\n              \"href\": \"#scenenode-horizontalconstraints\"\n            }}><inlineCode parentName=\"a\">{`horizontalConstraints`}</inlineCode></a>{` above.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`Both fields `}<em parentName=\"p\">{`must`}</em>{` be provided together when setting this property.`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-horizontalconstraints\"\n      }}><inlineCode parentName=\"a\">{`horizontalConstraints`}</inlineCode></a>{` above for other important notes.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let node = selection.items[0];\nnode.verticalConstraints = {\n  position: scenegraph.SceneNode.FIXED_TOP,\n  size: scenegraph.SceneNode.SIZE_RESIZES,\n};\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"scenenodehascustomconstraints--boolean\"\n    }}><em parentName=\"h3\">{`sceneNode.hasCustomConstraints : `}<inlineCode parentName=\"em\">{`boolean`}</inlineCode></em></h3>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 29`}</p>\n    <p>{`True if this node's Responsive Resize layout settings, which are normally automatically inferred by XD, have been overridden with specific desired values. Constraints on a node are either all overridden, or all automatic -- never mixed.`}</p>\n    <p>{`If false, each time the parent resizes XD will automatically guess the best layout settings to used based on the current size & position of this node within its parent. You can use the `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-horizontalconstraints\"\n      }}><inlineCode parentName=\"a\">{`horizontalConstraints`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-verticalconstraints\"\n      }}><inlineCode parentName=\"a\">{`verticalConstraints`}</inlineCode></a>{` getters to check what computed settings XD would use based on the node's current size & position.`}</p>\n    <p>{`Automatically becomes true any time you set `}<inlineCode parentName=\"p\">{`horizontalConstraints`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`verticalConstraints`}</inlineCode>{`. To reset to false, call `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-resettoautoconstraints\"\n      }}><inlineCode parentName=\"a\">{`resetToAutoConstraints()`}</inlineCode></a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true `}<em parentName=\"p\">{`(but is modified indirectly; see above)`}</em></p>\n    <h3 {...{\n      \"id\": \"scenenoderesettoautoconstraints\"\n    }}><em parentName=\"h3\">{`sceneNode.resetToAutoConstraints()`}</em></h3>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 29`}</p>\n    <p>{`Erase any overridden Responsive Resize layout settings, restoring the default behavior where XD will automatically guess the best layout settings for this node the next time its parent is resized. This function does not change the node's `}<em parentName=\"p\">{`current`}</em>{` size & position, however.`}</p>\n    <p>{`Calling this will cause `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-hascustomconstraints\"\n      }}><inlineCode parentName=\"a\">{`hasCustomConstraints`}</inlineCode></a>{` to become false.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance method of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"scenenodehaslinkedcontent--boolean\"\n    }}><em parentName=\"h3\">{`sceneNode.hasLinkedContent : `}<inlineCode parentName=\"em\">{`boolean`}</inlineCode></em></h3>\n    <p>{`True if the node's appearance comes from a link to an external resource, such as Creative Cloud Libraries or a\nseparate XD document (in the case of a Linked Component instance).`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h3 {...{\n      \"id\": \"scenenodeplugindata--ast\"\n    }}><em parentName=\"h3\">{`sceneNode.pluginData : `}<inlineCode parentName=\"em\">{`&ast;`}</inlineCode></em></h3>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 14`}</p>\n    <p>{`Metadata specific to your plugin. Must be a value which can be converted to a JSON string, or undefined to clear the\nstored metadata on this node.`}</p>\n    <p>{`Metadata is persisted with the document when it is saved. Duplicating a node (including across documents, via copy-paste)\nwill duplicate the metadata with it. If the node lies within a Component or Repeat Grid, all instances of the node will have\nidentical metadata (changes in one copy will automatically be synced to the other copy).`}</p>\n    <p>{`To store general metadata for the document overall, set pluginData on the `}<a parentName=\"p\" {...{\n        \"href\": \"#module_scenegraph-root\"\n      }}>{`root`}</a>{` node of the scenegraph. Metadata on\nthe root node can be changed from `}<em parentName=\"p\">{`any`}</em>{` edit context.`}</p>\n    <p>{`Metadata stored in pluginData cannot be accessed by other plugins -- each plugin has its own isolated storage. To share metadata\nwith other plugins, use `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-sharedplugindata\"\n      }}><inlineCode parentName=\"a\">{`sharedPluginData`}</inlineCode></a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"scenenodesharedplugindata--perpluginstorage\"\n    }}><em parentName=\"h3\">{`sceneNode.sharedPluginData : `}{`!`}<a parentName=\"em\" {...{\n          \"href\": \"/uxp-xd/develop/reference/PerPluginStorage/\"\n        }}><inlineCode parentName=\"a\">{`PerPluginStorage`}</inlineCode></a></em></h3>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 29`}</p>\n    <p>{`Metadata storage accessible by other plugins, separated into silos by plugin ID. Your plugin can read & write the storage for its own plugin ID,\nbut storage for other plugin IDs is `}<em parentName=\"p\">{`read-only`}</em>{`. This property returns a `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/PerPluginStorage/\"\n      }}>{`PerPluginStorage API object`}</a>{`.`}</p>\n    <p><em parentName=\"p\">{`Each`}</em>{` scenenode has its own metadata storage. To store general metadata that is not specific to one scenenode, use `}<inlineCode parentName=\"p\">{`sharedPluginData`}</inlineCode>{` on the\n`}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/scenegraph/#module_scenegraph-root\"\n      }}>{`document's scenegraph root`}</a>{`.`}</p>\n    <p>{`Metadata is persisted with the document when it is saved. See `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-plugindata\"\n      }}><inlineCode parentName=\"a\">{`pluginMetadata`}</inlineCode></a>{` for info on how metadata is duplicated when nodes are\ncopied or synced.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"scenenoderemovefromparent\"\n    }}><em parentName=\"h3\">{`sceneNode.removeFromParent()`}</em></h3>\n    <p>{`Remove this node from its parent, effectively deleting it from the document.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance method of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"scenenodemoveinparentcoordinatesdeltax-deltay-deltaz\"\n    }}><em parentName=\"h3\">{`sceneNode.moveInParentCoordinates(deltaX, deltaY, ?deltaZ)`}</em></h3>\n    <p><strong parentName=\"p\">{`Updated`}</strong>{` XD 40`}</p>\n    <p>{`Move the node by the given number of pixels along the parent's X/Y axes (if this node has no rotation, this is identical to\nmoving the node along its own local X/Y axes). This is equivalent to modifying the value returned by 'translation' and then\nsetting it back.`}</p>\n    <p>{`The third parameter, deltaZ (optional), allows the movement of the object on Z axis.`}</p>\n    <p>{`For an overview of node positioning & coordinate systems, see `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/coordinate-spaces-and-units/\"\n      }}>{`Coordinate spaces`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance method of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`See`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-placeinparentcoordinates\"\n        }}>{`placeInParentCoordinates`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-translation\"\n        }}>{`translation`}</a></li>\n    </ul>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`deltaX`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`deltaY`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`?deltaZ`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Optional: number of pixels to change depth with`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"scenenodeplaceinparentcoordinatesregistrationpoint-parentpoint\"\n    }}><em parentName=\"h3\">{`sceneNode.placeInParentCoordinates(registrationPoint, parentPoint)`}</em></h3>\n    <p>{`Move the node so the given point in its local coordinates is placed at the given point in its parent's coordinates (taking into account\nany rotation on this node, etc.).`}</p>\n    <p>{`For an overview of node positioning & coordinate systems, see `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/coordinate-spaces-and-units/\"\n      }}>{`Coordinate spaces`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance method of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`registrationPoint`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`!`}<a parentName=\"td\" {...{\n              \"href\": \"#point\"\n            }}><inlineCode parentName=\"a\">{`Point`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Point in this node's local coordinate space to align with parentPoint`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`parentPoint`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`!`}<a parentName=\"td\" {...{\n              \"href\": \"#point\"\n            }}><inlineCode parentName=\"a\">{`Point`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Point in this node's parent's coordinate space to move registrationPoint to`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Place this node's top-left corner at the centerpoint of its parent\nlet parentCenter = node.parent.localCenterPoint; // parent's center in parent's coordinates\nlet nodeBounds = node.localBounds; // node's bounds in its own local coordinates\nlet nodeTopLeft = { x: nodeBounds.x, y: nodeBounds.y }; // node's top left corner in its own local coordinates\nnode.placeInParentCoordinates(nodeTopLeft, parentCenter);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"scenenodeplaceinparentcoordinates3dregistrationpoint-parentpoint\"\n    }}>{`sceneNode.placeInParentCoordinates3D(registrationPoint, parentPoint)`}</h3>\n    <p><strong parentName=\"p\">{`Since`}</strong>{` XD 40`}</p>\n    <p>{`Move the node so the given point in its local coordinates is placed at the given point in its parent's coordinates (taking into account any rotation on this node, etc.).`}</p>\n    <p>{`If a 2D point is passed as parameter for either registrationPoint or parentPoint it will be treated as a 3D point with z = 0 (a point in node's plane).`}</p>\n    <p>{`For an overview of node positioning & coordinate systems, see `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/coordinate-spaces-and-units/\"\n      }}>{`Coordinate spaces`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance method of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`registrationPoint`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`!`}<a parentName=\"td\" {...{\n              \"href\": \"#point3D\"\n            }}><inlineCode parentName=\"a\">{`Point`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`2D or 3D point in this node's local coordinate space to align with parentPoint`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`parentPoint`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`!`}<a parentName=\"td\" {...{\n              \"href\": \"#point3D\"\n            }}><inlineCode parentName=\"a\">{`Point`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`2D or 3D point in this node's parent's coordinate space to move registrationPoint to`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Place this node's top-left corner at the centerpoint of its parent, 100px deeper on Z axis\nvar parentCenter = node.parent.localCenterPoint;  // parent's center in parent's coordinates\nvar nodeBounds = node.localBounds;  // node's bounds in its own local coordinates\nvar nodeTopLeft = {x: nodeBounds.x, y: nodeBounds.y, z:100};  // node's top left corner in its own local coordinates\nnode.placeInParentCoordinates3D(nodeTopLeft, parentCenter);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"scenenodeperspectivecenterinparentcoordinates--point\"\n    }}>{`sceneNode.perspectiveCenterInParentCoordinates : `}{`!`}<a parentName=\"h3\" {...{\n        \"href\": \"#point\"\n      }}><inlineCode parentName=\"a\">{`Point`}</inlineCode></a></h3>\n    <p><strong parentName=\"p\">{`Since`}</strong>{` XD 40`}</p>\n    <p>{`The perspective center component of this node, in parent coordinates. It represents the point in canvas plane where the viewer eye is placed. The perspective center exists for the top level 3D transformed node in a hierarchy and it is null otherwise.`}</p>\n    <p>{`Example: Artboard1 contains a Group1 that contains a Group2 that contains Rectangle1 and Rectangle2. If Group1 is 2D, Group2 is 3D (e.g. rotated 30 deg on Y), Rectangle1 is 2D and Rectangle2 is 3D, the perspective center is set on Group2. For all the others elements the perspectiveCenterInParentCoordinates property is null.`}</p>\n    <p>{`For an overview of node positioning & coordinate systems, see `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/coordinate-spaces-and-units/\"\n      }}>{`Coordinate spaces`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"scenenodezdepth--number\"\n    }}>{`sceneNode.zDepth : `}<inlineCode parentName=\"h3\">{`number`}</inlineCode></h3>\n    <p><strong parentName=\"p\">{`Since`}</strong>{` XD 40`}</p>\n    <p>{`The zDepth component of this node's `}{`[`}<inlineCode parentName=\"p\">{`SceneNode`}</inlineCode>{`]`}{`(#transform}. Since zDepth is applied after any rotation in the transform Matrix, zDepth occurs along the parent's Z axis, not the node's own local Z axis. This is equivalent to the `}<inlineCode parentName=\"p\">{`mz`}</inlineCode>{` field in the transform Matrix. zDepth is 0 for 2D nodes.`}</p>\n    <p>{`If portions of objects are placed at z greater than 800 (e.g. an unrotated shape with zDepth >= 800 or a 90 deg Y-rotated shape having width = 2000) rendering artifacts will appear.`}</p>\n    <p>{`For an overview of node positioning & coordinate systems, see `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/coordinate-spaces-and-units/\"\n      }}>{`Coordinate spaces`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <p><strong parentName=\"p\">{`See`}</strong>{`: `}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-moveZDepth\"\n        }}>{`moveZDepth`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-moveInParentCoordinates\"\n        }}>{`moveInParentCoordinates`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-placeinparentcoordinates3D\"\n        }}>{`placeInParentCoordinates3D`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-topLeftInParent\"\n        }}>{`topLeftInParent`}</a></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"scenenodemovezdepthdeltaz\"\n    }}>{`sceneNode.moveZDepth(deltaZ)`}</h3>\n    <p><strong parentName=\"p\">{`Since`}</strong>{` XD 40`}</p>\n    <p>{`Move the node by the given number of pixels along the parent's Z axis (if this node has no 3D rotation, this is identical to moving the node along its own local Z axis).`}</p>\n    <p>{`For an overview of node positioning & coordinate systems, see `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/coordinate-spaces-and-units/\"\n      }}>{`Coordinate spaces`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance method of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <p><strong parentName=\"p\">{`See`}</strong>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenodezDepth\"\n        }}>{`zDepth`}</a>{`, `}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-placeinparentcoordinates3D\"\n        }}>{`placeInParentCoordinates3D`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-moveInParentCoordinates\"\n        }}>{`moveInParentCoordinates`}</a></li>\n    </ul>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`deltaZ`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"scenenoderotatearounddeltaangle-rotationcenter\"\n    }}><em parentName=\"h3\">{`sceneNode.rotateAround(deltaAngle, rotationCenter)`}</em></h3>\n    <p>{`Rotate the node clockwise by the given number of degrees around the given point in the plugin's local coordinate space. If this node\nalready has nonzero rotation, this operation `}<em parentName=\"p\">{`adds`}</em>{` to its existing angle.`}</p>\n    <p>{`For an overview of node transforms & coordinate systems, see `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/coordinate-spaces-and-units/\"\n      }}>{`Coordinate spaces`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance method of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`See`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-rotation\"\n      }}>{`rotation`}</a></p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`deltaAngle`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`In degrees.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`rotationCenter`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#point\"\n            }}><inlineCode parentName=\"a\">{`Point`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Point to rotate around, in node's local coordinates.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Rotate the node 45 degrees clockwise around its centerpoint\nnode.rotateAround(45, node.localCenterPoint);\n\n// Ignoring the node's previous angle, set its rotation to exactly 180 degrees\nlet rotationDelta = 180 - node.rotation;\nnode.rotateAround(rotationDelta, node.localCenterPoint);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"scenenoderotationx--number\"\n    }}>{`scenenode.rotationX : `}<inlineCode parentName=\"h3\">{`number`}</inlineCode></h3>\n    <p><strong parentName=\"p\">{`Since`}</strong>{` XD 40`}</p>\n    <p>{`The rotation around X axis component of this node's `}<a parentName=\"p\" {...{\n        \"href\": \"#transform\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`, in degrees. (A positive rotation on X means the upper side of the object is moving away from the viewer)`}</p>\n    <p>{`For an overview of node transforms & coordinate systems, see `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/coordinate-spaces-and-units/\"\n      }}>{`Coordinate spaces`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true\n`}<strong parentName=\"p\">{`See`}</strong>{` `}<a parentName=\"p\" {...{\n        \"href\": \"#rotateXAround\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"scenenoderotationy--number\"\n    }}>{`scenenode.rotationY : `}<inlineCode parentName=\"h3\">{`number`}</inlineCode></h3>\n    <p><strong parentName=\"p\">{`Since`}</strong>{` XD 40`}</p>\n    <p>{`The rotation around Y axis component of this node's `}<a parentName=\"p\" {...{\n        \"href\": \"#transform\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`, in degrees. (A positive rotation on Y means the right side of the object is moving away from the viewer)`}</p>\n    <p>{`For an overview of node transforms & coordinate systems, see `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/coordinate-spaces-and-units/\"\n      }}>{`Coordinate spaces`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true\n`}<strong parentName=\"p\">{`See`}</strong>{` `}<a parentName=\"p\" {...{\n        \"href\": \"#rotateYAround\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"scenenoderotatexarounddeltaangle-rotationcenter\"\n    }}>{`scenenode.rotateXAround(deltaAngle, rotationCenter)`}</h3>\n    <p><strong parentName=\"p\">{`Since`}</strong>{` XD 40`}</p>\n    <p>{`Rotate the node around X axis by the given number of degrees around the given point in the plugin's local coordinate space. If this node already has nonzero rotation on X axis, this operation `}<em parentName=\"p\">{`adds`}</em>{` to its existing angle. The rotation around Z and the rotation around Y are left unmodified. The rotations around the 3D axes are applied in the following order: rotation around X axis is applied first, followed by rotation around Y and then rotation around Z (2D rotation)`}</p>\n    <p>{`For an overview of node transforms & coordinate systems, see `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/coordinate-spaces-and-units/\"\n      }}>{`Coordinate spaces`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance method of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`See`}</strong>{` `}{`[`}<inlineCode parentName=\"p\">{`SceneNode`}</inlineCode>{`]`}{`(#rotationX}`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`deltaAngle`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`In degrees`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`rotationCenter`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Point`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Point to rotate around, in node's local coordinates.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Rotate the node 30 degrees on X axis around its centerpoint\nnode.rotateXAround(30, node.localCenterPoint);\n\n// Ignoring the node's previous angle, set its rotation to exactly 180 degrees on X axis\nvar rotationDelta = 180 - node.rotationX;\nnode.rotateXAround(rotationDelta, node.localCenterPoint);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"scenenoderotateyaround\"\n    }}>{`scenenode.rotateYAround`}</h3>\n    <p><strong parentName=\"p\">{`Since`}</strong>{` XD 40`}</p>\n    <p>{`Rotate the node around Y axis by the given number of degrees around the given point in the plugin's local coordinate space. If this node already has nonzero rotation on Y axis, this operation `}<em parentName=\"p\">{`adds`}</em>{` to its existing angle. The rotation around Z and the rotation around X are left unmodified. The rotations around the 3D axes are applied in the following order: rotation around X axis is applied first, followed by rotation around Y and then rotation around Z (2D rotation)`}</p>\n    <p>{`For an overview of node transforms & coordinate systems, see `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/coordinate-spaces-and-units/\"\n      }}>{`Coordinate spaces`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance method of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`See`}</strong>{` `}{`[`}<inlineCode parentName=\"p\">{`SceneNode`}</inlineCode>{`]`}{`(#rotationY}`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`deltaAngle`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`In degrees`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`rotationCenter`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Point`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Point to rotate around, in node's local coordinates.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Rotate the node 30 degrees on X axis around its centerpoint\nnode.rotateYAround(30, node.localCenterPoint);\n\n// Ignoring the node's previous angle, set its rotation to exactly 180 degrees on Y axis\nvar rotationDelta = 180 - node.rotationY;\nnode.rotateYAround(rotationDelta, node.localCenterPoint);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"scenenoderesizewidth-height\"\n    }}><em parentName=\"h3\">{`sceneNode.resize(width, height)`}</em></h3>\n    <p>{`Attempts to change `}<inlineCode parentName=\"p\">{`localBounds.width`}</inlineCode>{` & `}<inlineCode parentName=\"p\">{`height`}</inlineCode>{` to match the specified sizes. The result is not guaranteed to\nmatch your requested size, since some nodes have limits on their ability to resize.`}</p>\n    <p>{`Note that `}<em parentName=\"p\">{`resizing`}</em>{` is different from simply `}<em parentName=\"p\">{`rescaling`}</em>{` the content:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Styles like stroke weight and corner radius stay the same size, so the ratio of their size relative to the\nresized shape will change.`}</li>\n      <li parentName=\"ul\">{`If this node is a Group, resizing may invoke XD's Responsive Resize feature, which rearranges items using a\nfluid layout and may change only the `}<em parentName=\"li\">{`position`}</em>{` (not size) of some children.`}</li>\n      <li parentName=\"ul\">{`Some content cannot be resized at all, or cannot stretch to change its aspect ratio.`}</li>\n    </ul>\n    <p>{`Rescaling, by contrast, is the effect seen when you zoom in on the view in XD, or when you export a node at\na higher DPI multiplier.`}</p>\n    <p><em parentName=\"p\">{`Note:`}</em>{` Currenty this function does not respect the \"aspect ratio lock\" setting in XD's Properties panel. This\nmay be changed/fixed later.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance method of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`width`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`height`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Double the width of this node\nlet originalBounds = node.localBounds;\nnode.resize(originalBounds.width * 2, originalBounds.height);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"scenenodeinnershadow--innershadow\"\n    }}><em parentName=\"h3\">{`sceneNode.innerShadow : `}{`!`}<a parentName=\"em\" {...{\n          \"href\": \"/uxp-xd/develop/reference/InnerShadow/\"\n        }}><inlineCode parentName=\"a\">{`InnerShadow`}</inlineCode></a></em></h3>\n    <p><strong parentName=\"p\">{`Since`}</strong>{` XD 40`}</p>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`null`}</inlineCode></p>\n    <p>{`The node's inner shadow, if any. If this property is null `}<em parentName=\"p\">{`or`}</em>{` `}<inlineCode parentName=\"p\">{`innerShadow.visible`}</inlineCode>{` is false, no inner shadow is drawn. Artboard, Line and any container object like Group, ScrollableGroup, SymbolInstance and Repeat Grid don't support inner shadow.`}</p>\n    <p>{`To modify an existing inner shadow, always be sure to re-invoke the `}<inlineCode parentName=\"p\">{`innerShadow`}</inlineCode>{` setter rather than just changing the InnerShadow object's properties inline.See `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/properties-with-object-values/\"\n      }}>{`\"Properties with object values\"`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <h2 {...{\n      \"id\": \"rootnode\"\n    }}>{`RootNode`}</h2>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: class\n`}<strong parentName=\"p\">{`Extends`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <p>{`Class representing the root node of the document. All Artboards are children of this node, as well as any pasteboard content that\ndoes not lie within an Artboard. Artboards must be grouped contiguously at the bottom of this node's z order. The root node has no\nvisual appearance of its own.`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#rootnode\"\n        }}>{`RootNode`}</a>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#group-addchild\"\n            }}>{`.addChild(node, index)`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#group-addchildafter\"\n            }}>{`.addChildAfter(node, relativeTo)`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#group-addchildbefore\"\n            }}>{`.addChildBefore(node, relativeTo)`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#group-removeallchildren\"\n            }}>{`.removeAllChildren()`}</a></li>\n        </ul>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"group\"\n    }}>{`Group`}</h2>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: class\n`}<strong parentName=\"p\">{`Extends`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <p>{`Group nodes represent two types of simple containers in XD:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Plain Groups, created by the `}<em parentName=\"li\">{`Object > Group`}</em>{` command`}</li>\n      <li parentName=\"ul\">{`Masked Groups, created by the `}<em parentName=\"li\">{`Object > Mask With Shape`}</em>{` command\nYou can determine whether a group is masked by checking the `}<inlineCode parentName=\"li\">{`mask`}</inlineCode>{` property.`}</li>\n    </ul>\n    <p>{`Groups and other containers cannot be created directly using scenenode constructors, since you can't add a populated Group to the\nscenegraph (you can't add subtrees all at once) nor can you add an empty Group and then add children to it (can't add nodes outside\nthe scope of the current `}<em parentName=\"p\">{`edit context`}</em>{`). Instead, to create Groups and other nested structures, use `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/commands/\"\n      }}>{`commands`}</a>{`.`}</p>\n    <p>{`Plain Groups (as well as some other node types, like SymbolInstances) can have dynamic layout features enabled such as padding and\nstack layouts. These are sometimes referred to as Content-Aware Groups or Stack containers, but ultimately these appear in the API as\nplain Group nodes. They do not carry the same edit-context restrictions as Masked Groups or other special node types.`}</p>\n    <p>{`In a Mask Group, the mask shape is included in the group's `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{` list, at the top of the z order. It is not visible - only its\npath outline is used, for clipping the group.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let commands = require(\"commands\");\n\n// Newly created shape nodes\nlet shape1 = ...,\n    shape2 = ...;\n\n// Add both nodes to the current edit context first\nselection.insertionParent.addChild(shape1);\nselection.insertionParent.addChild(shape2);\n\n// Select both shapes, then run the Group command\nselection.items = [shape1, shape2];\ncommands.group();\nlet group = selection.items[0];  // selection has been set to the new Group node afterward\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"groupaddchildnode-index\"\n    }}>{`group.addChild(node, index)`}</h4>\n    <p>{`Adds a child node to this container node. You can only add leaf nodes this way; to create structured subtrees of content,\nuse `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/commands/\"\n      }}>{`commands`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance method of `}<a parentName=\"p\" {...{\n        \"href\": \"#group\"\n      }}><inlineCode parentName=\"a\">{`Group`}</inlineCode></a>{` and other container nodes`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`node`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`!SceneNode`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Child to add`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`index`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`?number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Optional: index to insert child at. Child is appended to end of children list (top of z order) otherwise.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4 {...{\n      \"id\": \"groupaddchildafternode-relativeto\"\n    }}>{`group.addChildAfter(node, relativeTo)`}</h4>\n    <p>{`Inserts a child node after the given reference node.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance method of `}<a parentName=\"p\" {...{\n        \"href\": \"#group\"\n      }}><inlineCode parentName=\"a\">{`Group`}</inlineCode></a>{` and other container nodes`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`node`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`!SceneNode`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Child to add`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`relativeTo`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`!SceneNode`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`New child is added immediately after this existing child`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4 {...{\n      \"id\": \"groupaddchildbeforenode-relativeto\"\n    }}>{`group.addChildBefore(node, relativeTo)`}</h4>\n    <p>{`Inserts a child node before the given reference node.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance method of `}<a parentName=\"p\" {...{\n        \"href\": \"#group\"\n      }}><inlineCode parentName=\"a\">{`Group`}</inlineCode></a>{` and other container nodes`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`node`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`!SceneNode`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Child to add`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`relativeTo`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`!SceneNode`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`New child is added immediately before this existing child`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4 {...{\n      \"id\": \"groupremoveallchildren\"\n    }}>{`group.removeAllChildren()`}</h4>\n    <p>{`Removes all children from this node. Equivalent to calling removeFromParent() on each child in turn, but faster.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance method of `}<a parentName=\"p\" {...{\n        \"href\": \"#group\"\n      }}><inlineCode parentName=\"a\">{`Group`}</inlineCode></a>{` and other container nodes`}</p>\n    <h3 {...{\n      \"id\": \"groupdynamiclayout--boolean\"\n    }}>{`group.dynamicLayout : ?boolean`}</h3>\n    <p><strong parentName=\"p\">{`Since:`}</strong>{` XD 29`}</p>\n    <p>{`If true, Responsive Resize is enabled, and this node's children will use an intelligent layout algorithm whenever this node is resized.`}</p>\n    <p>{`Returns undefined on node types that do not support Responsive Resize (such as RepeatGrid; see `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-horizontalconstraints\"\n      }}><inlineCode parentName=\"a\">{`horizontalConstraints`}</inlineCode></a>{` docs for a\ncomplete list). Attempting to set this property on such node types results in an error.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#group\"\n      }}><inlineCode parentName=\"a\">{`Group`}</inlineCode></a></p>\n    <p><strong parentName=\"p\">{`See`}</strong>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-horizontalconstraints\"\n        }}>{`horizontalConstraints`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#scenenode-verticalconstraints\"\n        }}>{`verticalConstraints`}</a></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"groupmask--scenenode\"\n    }}>{`group.mask : ?`}<a parentName=\"h3\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></h3>\n    <p>{`The mask shape applied to this group, if any. This object is also present in the group's `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{` list. Though it has no direct visual appearance of its own, the mask affects the entire group's appearance by clipping all its other content.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`localBounds`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`globalBounds`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`globalDrawBounds`}</inlineCode>{` of a Masked Group are based on the bounds of the mask shape alone, regardless of whether the content is larger than the mask or even if the content doesn't fill the mask area completely.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#group\"\n      }}><inlineCode parentName=\"a\">{`Group`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let group = ...;\nconsole.log(\"Type of group is: \" + (group.mask ? \"Masked Group\" : \"Plain Group\"));\n`}</code></pre>\n    <p>{`To create a Masked Group, use `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/commands/#module_commands-createMaskGroup\"\n      }}>{`commands.createMaskGroup`}</a>{` instead of `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/commands/#module_commands-group\"\n      }}>{`commands.group`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"graphicnode\"\n    }}><em parentName=\"h2\">{`GraphicNode`}</em></h2>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: abstract class\n`}<strong parentName=\"p\">{`Extends`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <p>{`Base class for nodes that have a stroke and/or fill. This includes leaf nodes such as Rectangle, as well as BooleanGroup\nwhich is a container node. If you create a shape node, it will not be visible unless you explicitly give it either a stroke\nor a fill.`}</p>\n    <h3 {...{\n      \"id\": \"graphicnodefill--colorcolor--lineargradientfilllineargradientfill--radialgradientfill--angulargradientfill--imagefillimagefill\"\n    }}><em parentName=\"h3\">{`graphicNode.fill : `}<inlineCode parentName=\"em\">{`?[Color](Color/)`}</inlineCode>{` `}{`|`}{` `}<inlineCode parentName=\"em\">{`[LinearGradientFill](LinearGradientFill/)`}</inlineCode>{` `}{`|`}{` `}<inlineCode parentName=\"em\">{`RadialGradientFill`}</inlineCode>{` `}{`|`}{` `}<inlineCode parentName=\"em\">{`AngularGradientFill`}</inlineCode>{` `}{`|`}{` `}<inlineCode parentName=\"em\">{`[ImageFill](ImageFill/)`}</inlineCode></em></h3>\n    <p><strong parentName=\"p\">{`Updated`}</strong>{` XD 41`}</p>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`null`}</inlineCode></p>\n    <p>{`The fill applied to this shape, if any. If this property is null `}<em parentName=\"p\">{`or`}</em>{` `}<inlineCode parentName=\"p\">{`fillEnabled`}</inlineCode>{` is false, no fill is drawn.\nFreshly created nodes have no fill by default.`}</p>\n    <p>{`For Line nodes, fill is ignored. For Text nodes, `}<em parentName=\"p\">{`only`}</em>{` solid Color fill values are allowed. For Artboard nodes, image fill values\nare not allowed.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}><inlineCode parentName=\"a\">{`GraphicNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`ellipse.fill = new Color(\"red\");\n`}</code></pre>\n    <p>{`To modify an existing fill, always be sure to re-invoke the `}<inlineCode parentName=\"p\">{`fill`}</inlineCode>{` setter rather than just changing the fill object's properties inline.\nSee `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/properties-with-object-values/\"\n      }}>{`\"Properties with object values\"`}</a>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Danger`}</strong>{`\nThe RadialGradientFill and AngularGradientFill types are not documented and their API may change. Plugins currently cannot modify or otherwise work with radial or angular gradients.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"graphicnodefillenabled--boolean\"\n    }}><em parentName=\"h3\">{`graphicNode.fillEnabled : `}<inlineCode parentName=\"em\">{`boolean`}</inlineCode></em></h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`true`}</inlineCode></p>\n    <p>{`If false, the `}<inlineCode parentName=\"p\">{`fill`}</inlineCode>{` is not rendered. The user can toggle this via a checkbox in the Properties panel.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}><inlineCode parentName=\"a\">{`GraphicNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"graphicnodestroke--colorcolor\"\n    }}><em parentName=\"h3\">{`graphicNode.stroke : `}<inlineCode parentName=\"em\">{`?[Color](Color/)`}</inlineCode></em></h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`null`}</inlineCode></p>\n    <p>{`The stroke color applied to this shape, if any. If this property is null `}<em parentName=\"p\">{`or`}</em>{` `}<inlineCode parentName=\"p\">{`strokeEnabled`}</inlineCode>{` is false, no stroke is drawn.\nFreshly created nodes have no stroke by default. Artboard objects ignore stroke settings.`}</p>\n    <p>{`Depending on the `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode-strokewidth\"\n      }}><inlineCode parentName=\"a\">{`strokeWidth`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode-strokeposition\"\n      }}><inlineCode parentName=\"a\">{`strokePosition`}</inlineCode></a>{`, the path outline\nof a node may need to be positioned on fractional pixels in order for the stroke itself to be crisply aligned to the pixel grid.\nFor example, if a horizontal line uses a 1px center stroke, the line's y should end in .5 to keep the stroke on-pixel.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}><inlineCode parentName=\"a\">{`GraphicNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`ellipse.stroke = new Color(\"red\");\n`}</code></pre>\n    <p>{`To modify an existing stroke, always be sure to re-invoke the `}<inlineCode parentName=\"p\">{`stroke`}</inlineCode>{` setter rather than just changing the Color object's properties inline.\nSee `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/properties-with-object-values/\"\n      }}>{`\"Properties with object values\"`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"graphicnodestrokeenabled--boolean\"\n    }}><em parentName=\"h3\">{`graphicNode.strokeEnabled : `}<inlineCode parentName=\"em\">{`boolean`}</inlineCode></em></h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`false`}</inlineCode></p>\n    <p>{`If false, the `}<inlineCode parentName=\"p\">{`stroke`}</inlineCode>{` is not rendered. The user can toggle this via a checkbox in the Properties panel.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}><inlineCode parentName=\"a\">{`GraphicNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"graphicnodestrokewidth--number--0\"\n    }}><em parentName=\"h3\">{`graphicNode.strokeWidth : `}<inlineCode parentName=\"em\">{`number`}</inlineCode></em>{` `}{`>`}{`= 0`}</h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`1.0`}</inlineCode></p>\n    <p>{`Thickness in pixels of the stroke.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}><inlineCode parentName=\"a\">{`GraphicNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"graphicnodestrokeposition--string\"\n    }}><em parentName=\"h3\">{`graphicNode.strokePosition : `}<inlineCode parentName=\"em\">{`string`}</inlineCode></em></h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`CENTER_STROKE`}</inlineCode>{` for most shapes, `}<inlineCode parentName=\"p\">{`INNER_STROKE`}</inlineCode>{` for Rectangle, Ellipse & Polygon`}</p>\n    <p>{`Position of the stroke relative to the shape's path outline: GraphicNode.INNER_STROKE, OUTER_STROKE, or CENTER_STROKE. Ignored by Text and Line, which always render using CENTER_STROKE.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}><inlineCode parentName=\"a\">{`GraphicNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"graphicnodestrokeendcaps--string\"\n    }}><em parentName=\"h3\">{`graphicNode.strokeEndCaps : `}<inlineCode parentName=\"em\">{`string`}</inlineCode></em></h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`STROKE_CAP_SQUARE`}</inlineCode></p>\n    <p>{`For Lines and non-closed Paths, how the dangling ends of the stroke are rendered: GraphicNode.STROKE_CAP_NONE, STROKE_CAP_SQUARE, or STROKE_CAP_ROUND.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}><inlineCode parentName=\"a\">{`GraphicNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"graphicnodestrokejoins--string\"\n    }}><em parentName=\"h3\">{`graphicNode.strokeJoins : `}<inlineCode parentName=\"em\">{`string`}</inlineCode></em></h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`STROKE_JOIN_MITER`}</inlineCode></p>\n    <p>{`How sharp corners in the shape are rendered: GraphicNode.STROKE_JOIN_BEVEL, STROKE_JOIN_ROUND, or STROKE_JOIN_MITER.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}><inlineCode parentName=\"a\">{`GraphicNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"graphicnodestrokemiterlimit--number--0\"\n    }}><em parentName=\"h3\">{`graphicNode.strokeMiterLimit : `}<inlineCode parentName=\"em\">{`number`}</inlineCode></em>{` `}{`>`}{`= 0`}</h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`4`}</inlineCode></p>\n    <p>{`Expressed as a multiple of stroke width. Only used when `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode-strokejoins\"\n      }}><inlineCode parentName=\"a\">{`strokeJoins`}</inlineCode></a>{` = STROKE_JOIN_MITER.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}><inlineCode parentName=\"a\">{`GraphicNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"graphicnodestrokedasharray--arraynumbergt\"\n    }}><em parentName=\"h3\">{`graphicNode.strokeDashArray : `}<inlineCode parentName=\"em\">{`!Array<number&gt;`}</inlineCode></em></h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`[]`}</inlineCode></p>\n    <p>{`Empty array indicates a solid stroke. If non-empty, values represent the lengths of rendered and blank segments of the\nstroke's dash pattern, repeated along the length of the stroke. The first value is the length of the first solid segment.\nIf the array is odd length, the items are copied to double the array length. For example, `}<inlineCode parentName=\"p\">{`[3]`}</inlineCode>{` produces the same effect\nas `}<inlineCode parentName=\"p\">{`[3, 3]`}</inlineCode>{`.`}</p>\n    <p>{`The appearance of each segment's start/end follows the `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode#strokeEndCaps\"\n      }}>{`strokeEndCaps`}</a>{` setting.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}><inlineCode parentName=\"a\">{`GraphicNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"graphicnodestrokedashoffset--number\"\n    }}><em parentName=\"h3\">{`graphicNode.strokeDashOffset : `}<inlineCode parentName=\"em\">{`number`}</inlineCode></em></h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`0`}</inlineCode></p>\n    <p>{`Ignored unless `}<inlineCode parentName=\"p\">{`strokeDashArray`}</inlineCode>{` is non-empty. Shifts the \"phase\" of the repeating dash pattern along the length of the stroke.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}><inlineCode parentName=\"a\">{`GraphicNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"graphicnodeshadow--shadowshadow\"\n    }}><em parentName=\"h3\">{`graphicNode.shadow : `}<inlineCode parentName=\"em\">{`?[Shadow](Shadow/)`}</inlineCode></em></h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`null`}</inlineCode></p>\n    <p>{`The node's drop shadow, if any. If there is no shadow applied, this property may be null `}<em parentName=\"p\">{`or`}</em>{` `}<inlineCode parentName=\"p\">{`shadow.visible`}</inlineCode>{` may be false.`}</p>\n    <p>{`To modify an existing shadow, always be sure to re-invoke the `}<inlineCode parentName=\"p\">{`shadow`}</inlineCode>{` setter rather than just changing the Shadow object's properties inline.\nSee `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/properties-with-object-values/\"\n      }}>{`\"Properties with object values\"`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}><inlineCode parentName=\"a\">{`GraphicNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"graphicnodeblur--blurblur\"\n    }}><em parentName=\"h3\">{`graphicNode.blur : `}<inlineCode parentName=\"em\">{`?[Blur](Blur/)`}</inlineCode></em></h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`null`}</inlineCode></p>\n    <p>{`The node's object blur or background blur settings, if applicable (a node may not have both types of blur at once). If there is no blur\neffect applied, this property may be null `}<em parentName=\"p\">{`or`}</em>{` `}<inlineCode parentName=\"p\">{`blur.visible`}</inlineCode>{` may be false.`}</p>\n    <p>{`To modify an existing blur, always be sure to re-invoke the `}<inlineCode parentName=\"p\">{`blur`}</inlineCode>{` setter rather than just changing the Blur object's properties inline.\nSee `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/properties-with-object-values/\"\n      }}>{`\"Properties with object values\"`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}><inlineCode parentName=\"a\">{`GraphicNode`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"graphicnodepathdata--string\"\n    }}><em parentName=\"h3\">{`graphicNode.pathData : `}<inlineCode parentName=\"em\">{`string`}</inlineCode></em></h3>\n    <p>{`Returns a representation of the node's outline in SVG `}<inlineCode parentName=\"p\">{`<path>`}</inlineCode>{` syntax. Note that only nodes with `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode#strokePosition\"\n      }}>{`strokePosition`}</a>{` ==\n`}<inlineCode parentName=\"p\">{`GraphicNode.CENTER_STROKE`}</inlineCode>{` can be faithfully rendered in actual SVG using the exact pathData shown here.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}><inlineCode parentName=\"a\">{`GraphicNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h3 {...{\n      \"id\": \"graphicnodehaslinkedgraphicfill--boolean\"\n    }}><em parentName=\"h3\">{`graphicNode.hasLinkedGraphicFill : `}<inlineCode parentName=\"em\">{`boolean`}</inlineCode></em></h3>\n    <p>{`True if the node has an image fill that comes from a link to an external resource, such as Creative Cloud Libraries. Equivalent to the expression: `}<inlineCode parentName=\"p\">{`node.fill && node.fill.linked`}</inlineCode>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}><inlineCode parentName=\"a\">{`GraphicNode`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h2 {...{\n      \"id\": \"rectangle\"\n    }}>{`Rectangle`}</h2>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: class\n`}<strong parentName=\"p\">{`Extends`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}><inlineCode parentName=\"a\">{`GraphicNode`}</inlineCode></a></p>\n    <p>{`Rectangle leaf node shape, with or without rounded corners. Like all shape nodes, has no fill or stroke by default unless you set one.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let rect = new Rectangle();\nrect.width = 100;\nrect.height = 25;\nrect.fill = new Color(\"red\");\nselection.insertionParent.addChild(rect);\nselection.items = [rect];\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"rectanglewidth--number--0\"\n    }}>{`rectangle.width : `}<inlineCode parentName=\"h3\">{`number`}</inlineCode>{` `}{`>`}{` 0`}</h3>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#rectangle\"\n      }}><inlineCode parentName=\"a\">{`Rectangle`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"rectangleheight--number--0\"\n    }}>{`rectangle.height : `}<inlineCode parentName=\"h3\">{`number`}</inlineCode>{` `}{`>`}{` 0`}</h3>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#rectangle\"\n      }}><inlineCode parentName=\"a\">{`Rectangle`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"rectanglecornerradii--topleftnumber-toprightnumber-bottomrightnumber-bottomleftnumber-all-numbers--0\"\n    }}>{`rectangle.cornerRadii : `}<inlineCode parentName=\"h3\">{`!{topLeft:number, topRight:number, bottomRight:number, bottomLeft:number}`}</inlineCode>{` (all numbers >= 0)`}</h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`{topLeft:0, topRight:0, bottomRight:0, bottomLeft:0}`}</inlineCode></p>\n    <p>{`The actual corner radius that is rendered is capped based on the size of the rectangle even if the radius value set here is higher (see\n`}<a parentName=\"p\" {...{\n        \"href\": \"#rectangle-effectivecornerradii\"\n      }}><inlineCode parentName=\"a\">{`effectiveCornerRadii`}</inlineCode></a>{`.`}</p>\n    <p>{`To set all corners to the same value, use `}<a parentName=\"p\" {...{\n        \"href\": \"#rectangle-setallcornerradii\"\n      }}><inlineCode parentName=\"a\">{`setAllCornerRadii`}</inlineCode></a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#rectangle\"\n      }}><inlineCode parentName=\"a\">{`Rectangle`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"rectanglehasroundedcorners--boolean\"\n    }}>{`rectangle.hasRoundedCorners : `}<inlineCode parentName=\"h3\">{`boolean`}</inlineCode></h3>\n    <p>{`True if any of the Rectangle's four corners is rounded (corner radius > 0).`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#rectangle\"\n      }}><inlineCode parentName=\"a\">{`Rectangle`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h3 {...{\n      \"id\": \"rectanglesetallcornerradiiradius\"\n    }}>{`rectangle.setAllCornerRadii(radius)`}</h3>\n    <p>{`Set the rounding radius of all four corners of the Rectangle to the same value. The actual corner radius that is rendered is capped based on\nthe size of the rectangle even if the radius value set here is higher (see `}<a parentName=\"p\" {...{\n        \"href\": \"#rectangle-effectivecornerradii\"\n      }}><inlineCode parentName=\"a\">{`effectiveCornerRadii`}</inlineCode></a>{`.`}</p>\n    <p>{`To set the corners to different radius values, use `}<a parentName=\"p\" {...{\n        \"href\": \"#rectangle-cornerradii\"\n      }}><inlineCode parentName=\"a\">{`cornerRadii`}</inlineCode></a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance method of `}<a parentName=\"p\" {...{\n        \"href\": \"#rectangle\"\n      }}><inlineCode parentName=\"a\">{`Rectangle`}</inlineCode></a></p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`radius`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"rectangleeffectivecornerradii--topleftnumber-toprightnumber-bottomrightnumber-bottomleftnumber\"\n    }}>{`rectangle.effectiveCornerRadii : `}<inlineCode parentName=\"h3\">{`!{topLeft:number, topRight:number, bottomRight:number, bottomLeft:number}`}</inlineCode></h3>\n    <p>{`The actual corner radius that is rendered may be capped by the size of the rectangle. Returns the actual radii that\nare currently in effect, which may be smaller than the `}<inlineCode parentName=\"p\">{`cornerRadii`}</inlineCode>{` values as a result.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#rectangle\"\n      }}><inlineCode parentName=\"a\">{`Rectangle`}</inlineCode></a></p>\n    <h2 {...{\n      \"id\": \"artboard\"\n    }}>{`Artboard`}</h2>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: class\n`}<strong parentName=\"p\">{`Extends`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}><inlineCode parentName=\"a\">{`GraphicNode`}</inlineCode></a></p>\n    <p>{`Artboard container node. All Artboards must be children of the root node (they cannot be nested), and they must be placed `}<em parentName=\"p\">{`below`}</em>{` all\npasteboard content in the z order.`}</p>\n    <p>{`Artboards can have a background fill, but the stroke, shadow, and blur settings are all ignored. Artboards cannot be locked or hidden,\nor have opacity < 100%.`}</p>\n    <p>{`Generally, all nodes that overlap an Artboard are children of that artboard, and nodes that don't overlap any Artboard are children\nof the root (pasteboard). XD ensures this automatically: if a node is modified in any way that changes whether it overlaps an\nArtboard, its parent will automatically be changed accordingly after the edit operation finishes.`}</p>\n    <h3 {...{\n      \"id\": \"artboardwidth--number--0\"\n    }}>{`artboard.width : `}<inlineCode parentName=\"h3\">{`number`}</inlineCode>{` `}{`>`}{` 0`}</h3>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#artboard\"\n      }}><inlineCode parentName=\"a\">{`Artboard`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"artboardheight--number--0\"\n    }}>{`artboard.height : `}<inlineCode parentName=\"h3\">{`number`}</inlineCode>{` `}{`>`}{` 0`}</h3>\n    <p>{`For scrollable Artboards, this is the total height encompassing all content - not just the viewport size (i.e. screen height).`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#artboard\"\n      }}><inlineCode parentName=\"a\">{`Artboard`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`See`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"#artboard-viewportheight\"\n      }}>{`viewportHeight`}</a></p>\n    <h3 {...{\n      \"id\": \"artboardviewportheight--number\"\n    }}>{`artboard.viewportHeight : `}<inlineCode parentName=\"h3\">{`?number`}</inlineCode></h3>\n    <p>{`If Artboard is scrollable, this is the height of the viewport (e.g. mobile device screen size). Null if Artboard isn't scrollable.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#artboard\"\n      }}><inlineCode parentName=\"a\">{`Artboard`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`See`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"#artboard-height\"\n      }}>{`height`}</a></p>\n    <h3 {...{\n      \"id\": \"artboardincominginteractions--array-triggernode-scenenode-interactions-arrayinteractiongt-gt\"\n    }}>{`artboard.incomingInteractions : `}<inlineCode parentName=\"h3\">{`!Array<!{ triggerNode: !SceneNode, interactions: !Array<!Interaction&gt; }&gt;`}</inlineCode></h3>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 19`}</p>\n    <p>{`Get all interactions whose destination is this artboard (either navigating the entire view, i.e. a `}<inlineCode parentName=\"p\">{`\"goToArtboard\"`}</inlineCode>{` action, or\nshowing this artboard as an overlay, i.e. an `}<inlineCode parentName=\"p\">{`\"overlay\"`}</inlineCode>{` action). Each element in the array is an `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/interactions/#Interaction\"\n      }}>{`Interaction object`}</a>{`\nwhich describes a gesture/event plus the action it produces.`}</p>\n    <p>{`May include interactions that are impossible to trigger because the trigger node (or one of its ancestors) has `}<inlineCode parentName=\"p\">{`visible`}</inlineCode>{` = false.`}</p>\n    <p>{`Note: currently, this API excludes any applicable keyboard/gamepad interactions.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#artboard\"\n      }}><inlineCode parentName=\"a\">{`Artboard`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true\n`}<strong parentName=\"p\">{`See`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-triggeredinteractions\"\n      }}>{`SceneNode.triggeredInteractions`}</a>{`\n`}<strong parentName=\"p\">{`See`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/interactions/#module_interactions-allInteractions\"\n      }}>{`interactions.allInteractions`}</a></p>\n    <h3 {...{\n      \"id\": \"artboardishomeartboard--boolean\"\n    }}>{`artboard.isHomeArtboard : `}<inlineCode parentName=\"h3\">{`boolean`}</inlineCode></h3>\n    <p><strong parentName=\"p\">{`Deprecated`}</strong>{`: XD 33 - Please use `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/interactions/#module_interactions-flows\"\n      }}><inlineCode parentName=\"a\">{`flows`}</inlineCode></a>{` which supports multple flows.`}</p>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 19`}</p>\n    <p>{`True if this is the starting Artboard seen when the interactive prototype is launched.`}</p>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 32`}</p>\n    <p>{`In case there are multiple interactive prototype experiences (flows), implying multiple home artboards, this API returns true only for the top-left artboard among all of those home artboards.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#artboard\"\n      }}><inlineCode parentName=\"a\">{`Artboard`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true\n`}<strong parentName=\"p\">{`See`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/interactions/#module_interactions-homeArtboard\"\n      }}>{`interactions.homeArtboard`}</a></p>\n    <h2 {...{\n      \"id\": \"ellipse\"\n    }}>{`Ellipse`}</h2>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: class\n`}<strong parentName=\"p\">{`Extends`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}><inlineCode parentName=\"a\">{`GraphicNode`}</inlineCode></a></p>\n    <p>{`Ellipse leaf node shape.`}</p>\n    <h3 {...{\n      \"id\": \"ellipseradiusx--number\"\n    }}>{`ellipse.radiusX : `}<inlineCode parentName=\"h3\">{`number`}</inlineCode></h3>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#ellipse\"\n      }}><inlineCode parentName=\"a\">{`Ellipse`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"ellipseradiusy--number\"\n    }}>{`ellipse.radiusY : `}<inlineCode parentName=\"h3\">{`number`}</inlineCode></h3>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#ellipse\"\n      }}><inlineCode parentName=\"a\">{`Ellipse`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"ellipseiscircle--boolean\"\n    }}>{`ellipse.isCircle : `}<inlineCode parentName=\"h3\">{`boolean`}</inlineCode></h3>\n    <p>{`True if the Ellipse is a circle (i.e., has a 1:1 aspect ratio).`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#ellipse\"\n      }}><inlineCode parentName=\"a\">{`Ellipse`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h2 {...{\n      \"id\": \"polygon\"\n    }}>{`Polygon`}</h2>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 19\n`}<strong parentName=\"p\">{`Kind`}</strong>{`: class\n`}<strong parentName=\"p\">{`Extends`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}><inlineCode parentName=\"a\">{`GraphicNode`}</inlineCode></a></p>\n    <p>{`Leaf node shape that is either a convex polygon `}<em parentName=\"p\">{`or`}</em>{` a star shape. May have rounded corners. The sides are not necessarily all equal in length:\nthis is true only when the Polygon's width and height matches the aspect ratio of a regular (equilateral) polygon with the given number of\nsides.`}</p>\n    <p>{`When unrotated, a non-star Polygon always has its bottommost side as a perfectly horizontal line - with the exception of the 4-sided Polygon, which\nis a diamond shape instead.`}</p>\n    <p>{`Like all shape nodes, has no size, fill, or stroke by default unless you set one.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Add a red triangle to the document\nvar polygon = new Polygon();\npolygon.cornerCount = 3;\npolygon.width = 50;\npolygon.height = 100;\npolygon.fill = new Color(\"red\");\nselection.insertionParent.addChild(polygon);\n\n// Add a blue 5-pointed star with rounded corners\nvar polygon = new Polygon();\npolygon.cornerCount = 5;\npolygon.starRatio = 55;\npolygon.setAllCornerRadii(4);\npolygon.width = 100;\npolygon.height = 95;\npolygon.fill = new Color(\"blue\");\nselection.insertionParent.addChild(polygon);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"polygonwidth--number--0\"\n    }}>{`polygon.width : `}<inlineCode parentName=\"h3\">{`number`}</inlineCode>{` `}{`>`}{` 0`}</h3>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#polygon\"\n      }}><inlineCode parentName=\"a\">{`Polygon`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"polygonheight--number--0\"\n    }}>{`polygon.height : `}<inlineCode parentName=\"h3\">{`number`}</inlineCode>{` `}{`>`}{` 0`}</h3>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#polygon\"\n      }}><inlineCode parentName=\"a\">{`Polygon`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"polygoncornercount--number-integer--3\"\n    }}>{`polygon.cornerCount : `}<inlineCode parentName=\"h3\">{`number`}</inlineCode>{` (integer `}{`>`}{`= 3)`}</h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: 3`}</p>\n    <p>{`For a non-star shape, defines the number of corners (vertices), and also therefore number of sides. For a star shape, defines the\nnumber of star points -- there will be twice as many corners in total (the tips of the points `}<em parentName=\"p\">{`plus`}</em>{` all the inside corners\nbetween the points).`}</p>\n    <p>{`Setting `}<inlineCode parentName=\"p\">{`cornerCount`}</inlineCode>{` on an existing Polygon behaves in one of two different ways:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`If the shape's aspect ratio gives it equilateral sides, the sides remain equilateral while the size and aspect ratio of the\nshape are automatically changed as needed.`}</li>\n      <li parentName=\"ul\">{`Otherwise, the size and aspect ratio of the shape remain unchanged.`}</li>\n    </ul>\n    <p>{`This matches how changing the corner count in XD's UI behaves.`}</p>\n    <p>{`To change corner count while guaranteeing the shape will not change size, save its original size first, set `}<inlineCode parentName=\"p\">{`cornerCount`}</inlineCode>{`, and\nthen set size back to the saved values.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#polygon\"\n      }}><inlineCode parentName=\"a\">{`Polygon`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"polygoncornerradii--arraynumbergt\"\n    }}>{`polygon.cornerRadii : `}<inlineCode parentName=\"h3\">{`!Array<number&gt;`}</inlineCode></h3>\n    <p>{`List of corner radius for each corner of the polygon. To set corner radius, use `}<a parentName=\"p\" {...{\n        \"href\": \"#polygon-setallcornerradii\"\n      }}><inlineCode parentName=\"a\">{`setAllCornerRadii()`}</inlineCode></a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#polygon\"\n      }}><inlineCode parentName=\"a\">{`Polygon`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h3 {...{\n      \"id\": \"polygonhasroundedcorners--boolean\"\n    }}>{`polygon.hasRoundedCorners : `}<inlineCode parentName=\"h3\">{`boolean`}</inlineCode></h3>\n    <p>{`True if any of the Polygon's corners is rounded (corner radius > 0).`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#polygon\"\n      }}><inlineCode parentName=\"a\">{`Polygon`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h3 {...{\n      \"id\": \"polygonsetallcornerradiiradius\"\n    }}>{`polygon.setAllCornerRadii(radius)`}</h3>\n    <p>{`Set the corner radius of all corners of the Polygon to the same value.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance method of `}<a parentName=\"p\" {...{\n        \"href\": \"#polygon\"\n      }}><inlineCode parentName=\"a\">{`Polygon`}</inlineCode></a></p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`radius`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"polygonstarratio--number-10-to-1000\"\n    }}>{`polygon.starRatio : `}<inlineCode parentName=\"h3\">{`number`}</inlineCode>{` (1.0 to 100.0)`}</h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`100`}</inlineCode>{`\n`}<strong parentName=\"p\">{`Since`}</strong>{`: XD 26`}</p>\n    <p>{`Determines how prominent the shape's star points are. The default value of 100 is a normal convex polygon (not a star at all).\nFor a star shape, consider that the outer vertices at the tips of the points all lie on a circle and the inner vertices\nbetween the points all lie on a second, smaller circle. The `}<inlineCode parentName=\"p\">{`starRatio`}</inlineCode>{` is the ratio of the smaller circle's diameter to the\nouter circle's diameter, expressed as a percentage.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#polygon\"\n      }}><inlineCode parentName=\"a\">{`Polygon`}</inlineCode></a></p>\n    <h2 {...{\n      \"id\": \"line\"\n    }}>{`Line`}</h2>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: class\n`}<strong parentName=\"p\">{`Extends`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}><inlineCode parentName=\"a\">{`GraphicNode`}</inlineCode></a></p>\n    <p>{`Line leaf node shape. Lines have a stroke but no fill.`}</p>\n    <h3 {...{\n      \"id\": \"linestart--point\"\n    }}>{`line.start : `}{`!`}<a parentName=\"h3\" {...{\n        \"href\": \"#point\"\n      }}><inlineCode parentName=\"a\">{`Point`}</inlineCode></a></h3>\n    <p>{`Start point of the Line in local coordinate space. To change the start point, use `}<a parentName=\"p\" {...{\n        \"href\": \"#line-setstartend\"\n      }}>{`setStartEnd`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#line\"\n      }}><inlineCode parentName=\"a\">{`Line`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h3 {...{\n      \"id\": \"lineend--point\"\n    }}>{`line.end : `}{`!`}<a parentName=\"h3\" {...{\n        \"href\": \"#point\"\n      }}><inlineCode parentName=\"a\">{`Point`}</inlineCode></a></h3>\n    <p>{`Endpoint of the Line in local coordinate space. To change the endpoint, use `}<a parentName=\"p\" {...{\n        \"href\": \"#line-setstartend\"\n      }}>{`setStartEnd`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#line\"\n      }}><inlineCode parentName=\"a\">{`Line`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h3 {...{\n      \"id\": \"linesetstartendstartx-starty-endx-endy\"\n    }}>{`line.setStartEnd(startX, startY, endX, endY)`}</h3>\n    <p>{`Set the start and end points of the Line in local coordinate space. The values may be normalized by this setter, shifting the node's\ntranslation and counter-shifting the start/end points. So the start/end getters may return values different from the values you\npassed this setter, even though the line's visual bounds and appearance are the same.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance method of `}<a parentName=\"p\" {...{\n        \"href\": \"#line\"\n      }}><inlineCode parentName=\"a\">{`Line`}</inlineCode></a></p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`startX`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`startY`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`endX`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`endY`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"path\"\n    }}>{`Path`}</h2>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: class\n`}<strong parentName=\"p\">{`Extends`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}><inlineCode parentName=\"a\">{`GraphicNode`}</inlineCode></a></p>\n    <p>{`Arbitrary vector Path leaf node shape. Paths can be open or closed, and a Path may include multiple disjoint sections (aka a \"compound\npath\"). Even open Paths may have a fill - the fill is drawn as if the Path were closed with a final \"Z\" segment.`}</p>\n    <p>{`The path may not start at (0,0) in local coordinates, for example if it starts with a move (\"M\") segment.`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#path\"\n        }}>{`Path`}</a>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#path-pathdata\"\n            }}>{`.pathData`}</a>{` : `}<inlineCode parentName=\"li\">{`string`}</inlineCode></li>\n        </ul>\n      </li>\n    </ul>\n    <h3 {...{\n      \"id\": \"pathpathdata--string\"\n    }}>{`path.pathData : `}<inlineCode parentName=\"h3\">{`string`}</inlineCode></h3>\n    <p>{`Representation of the path outline in SVG `}<inlineCode parentName=\"p\">{`<path>`}</inlineCode>{` syntax. Unlike other node types, pathData is writable here. Syntax is\nautomatically normalized, so the getter may return a slightly different string than what you passed to the setter.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#path\"\n      }}><inlineCode parentName=\"a\">{`Path`}</inlineCode></a></p>\n    <h2 {...{\n      \"id\": \"booleangroup\"\n    }}>{`BooleanGroup`}</h2>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: class\n`}<strong parentName=\"p\">{`Extends`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}><inlineCode parentName=\"a\">{`GraphicNode`}</inlineCode></a></p>\n    <p>{`BooleanGroup container node - although it has fill/stroke/etc. properties like a leaf shape node, it is a container\nwith children. Its visual appearance is determined by generating a path via a nondestructive boolean operation on all\nits children's paths.`}</p>\n    <p>{`It is not currently possible for plugins to `}<em parentName=\"p\">{`create`}</em>{` a new BooleanGroup node, aside from using `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/commands/#module_commands-duplicate\"\n      }}>{`commands.duplicate`}</a>{`\nto clone existing BooleanGroups.`}</p>\n    <h3 {...{\n      \"id\": \"booleangrouppathop--string\"\n    }}>{`booleanGroup.pathOp : `}<inlineCode parentName=\"h3\">{`string`}</inlineCode></h3>\n    <p>{`Which boolean operation is used to generate the path: BooleanGroup.PATH_OP_ADD, PATH_OP_SUBTRACT, PATH_OP_INTERSECT, or PATH_OP_EXCLUDE_OVERLAP.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#booleangroup\"\n      }}><inlineCode parentName=\"a\">{`BooleanGroup`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h2 {...{\n      \"id\": \"text\"\n    }}>{`Text`}</h2>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: class\n`}<strong parentName=\"p\">{`Extends`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}><inlineCode parentName=\"a\">{`GraphicNode`}</inlineCode></a></p>\n    <p>{`Text leaf node shape. Text can have a fill and/or stroke, but only a solid-color fill is allowed (gradient or image\nfill will be rejected).`}</p>\n    <p>{`There are three types of Text nodes:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Point Text`}</strong>{` - Expands to fit the full width of the text content. Only uses multiple lines if the text content contains hard line\nbreaks (\"\\\\n\").`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Area Text`}</strong>{` - Fixed width and height. Text is automatically wrapped (soft line wrapping) to fit the width. If it does not fit the\nheight, any remaining text is clipped.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 34`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Auto-height Text`}</strong>{` - Fixed width. Text is automatically wrapped (soft line wrapping) to fit the width. The height is expanded to match all the text lines.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 34`}</p>\n    <p>{`Use `}<a parentName=\"p\" {...{\n        \"href\": \"#text-layoutbox\"\n      }}><inlineCode parentName=\"a\">{`layoutBox`}</inlineCode></a>{` to determine the type of a text node.`}</p>\n    <p><strong parentName=\"p\">{`Deprecated`}</strong>{`: XD 34`}</p>\n    <p>{`Check whether `}<a parentName=\"p\" {...{\n        \"href\": \"#text-areabox\"\n      }}><inlineCode parentName=\"a\">{`areaBox`}</inlineCode></a>{` is null to determine if the type of a Text node.`}</p>\n    <p>{`Text bounds and layout work differently depending on the type of text:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Point Text - The baseline is at y=0 in the node's local coordinate system. Horizontally, local x=0 is the `}<em parentName=\"p\">{`anchor point`}</em>{` that the\ntext grows from / shrinks toward when edited. This anchor depends on the justification: for example, if the text is centered, x=0 is\nthe horizontal centerpoint of the text. The bounding box leaves enough space for descenders, uppercase letters, and accent marks,\neven if the current string does not contain any of those characters. This makes aligning text based on its bounds behave more\nconsistently.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Area Text / Auto-height text - The baseline is at a positive y value in local coordinates, and its local (0, 0) is the top left of `}<em parentName=\"p\">{`anchor point`}</em>{` the areaBox. Text always flows to the right and down from this local origin regardless of justification.`}</p>\n      </li>\n    </ul>\n    <p>{` `}{\n        /* prevent the bullet list above from running into this one */\n      }</p>\n    <h3 {...{\n      \"id\": \"texttext--string\"\n    }}>{`text.text : `}<inlineCode parentName=\"h3\">{`string`}</inlineCode></h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`\" \"`}</inlineCode>{` (a single space character)`}</p>\n    <p>{`The plaintext content of the node, including any hard line breaks but excluding soft line wrap breaks.`}</p>\n    <p>{`Setting text does not change styleRanges, so styles aligned with the old text's string indices will continue to be applied to\nthe new string's indices unless you explicitly change styleRanges as well.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#text\"\n      }}><inlineCode parentName=\"a\">{`Text`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"textstyleranges--arraylengthnumber-fontfamilystring-fontstylestring-fontsizenumber-fillcolorcolor-charspacingnumber-underlineboolean-strikethroughboolean-texttransformstring-textscriptstringgt\"\n    }}>{`text.styleRanges : `}<inlineCode parentName=\"h3\">{`!Array<!{length:number, fontFamily:string, fontStyle:string, fontSize:number, fill:\\\\![Color](Color/), charSpacing:number, underline:boolean, strikethrough:boolean, textTransform:string, textScript:string}&gt;`}</inlineCode></h3>\n    <p>{`Array of text ranges and their character style settings. Each range covers a set number of characters in the text content. Ranges\nare contiguous, with each one starting immediately after the previous one. Any characters past the end of the last range use the\nsame style as the last range.`}</p>\n    <p>{`When `}<em parentName=\"p\">{`setting`}</em>{` styleRanges, any fields missing from a given range default to the existing values from the `}<em parentName=\"p\">{`last`}</em>{` range in the old\nvalue of styleRanges. The styleRanges `}<em parentName=\"p\">{`getter`}</em>{` always returns fully realized range objects with all fields specified.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#text\"\n      }}><inlineCode parentName=\"a\">{`Text`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"textfontfamily--string\"\n    }}>{`text.fontFamily : `}<inlineCode parentName=\"h3\">{`string`}</inlineCode></h3>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 14`}</p>\n    <p>{`Set the font family across all style ranges, or get the font family of the last style range (font family of all the text\nif one range covers all the text). Plugins should not assume any particular default value for fontFamily.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#text\"\n      }}><inlineCode parentName=\"a\">{`Text`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"textfontstyle--string\"\n    }}>{`text.fontStyle : `}<inlineCode parentName=\"h3\">{`string`}</inlineCode></h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: non-italic normal weight style\n`}<strong parentName=\"p\">{`Since`}</strong>{`: XD 14`}</p>\n    <p>{`Set the font style across all style ranges, or get the font style of the last style range (font style of all the text\nif one range covers all the text).`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#text\"\n      }}><inlineCode parentName=\"a\">{`Text`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"textfontsize--number--0\"\n    }}>{`text.fontSize : `}<inlineCode parentName=\"h3\">{`number`}</inlineCode>{` `}{`>`}{` 0`}</h3>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 14`}</p>\n    <p>{`Font size in document pixels. Set the font size across all style ranges, or get the font size of the last style range\n(font size of all the text if one range covers all the text). Plugins should not assume any particular default value for\nfontSize.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#text\"\n      }}><inlineCode parentName=\"a\">{`Text`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"textfill--colorcolor\"\n    }}>{`text.fill : `}<inlineCode parentName=\"h3\">{`?[Color](Color/)`}</inlineCode></h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`null`}</inlineCode></p>\n    <p>{`Set the text color across all style ranges, or get the color of the last style range (color of all the text if one range\ncovers all the text). Unlike most other nodes, text only allows a solid color fill - gradients and image fills are not\nsupported.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#text\"\n      }}><inlineCode parentName=\"a\">{`Text`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"textcharspacing--number\"\n    }}>{`text.charSpacing : `}<inlineCode parentName=\"h3\">{`number`}</inlineCode></h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{`\n`}<strong parentName=\"p\">{`Since`}</strong>{`: XD 14`}</p>\n    <p>{`Character spacing in increments of 1/1000th of the fontSize, in addition to the font's default character kerning. May be\nnegative.`}</p>\n    <p>{`Set the character spacing across all style ranges, or get the character spacing of the last style range (character\nspacing of all the text if one range covers all the text).`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#text\"\n      }}><inlineCode parentName=\"a\">{`Text`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"textunderline--boolean\"\n    }}>{`text.underline : `}<inlineCode parentName=\"h3\">{`boolean`}</inlineCode></h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`\n`}<strong parentName=\"p\">{`Since`}</strong>{`: XD 14`}</p>\n    <p>{`Set underline across all style ranges, or get the underline of the last style range (underline of all the text if one\nrange covers all the text).`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#text\"\n      }}><inlineCode parentName=\"a\">{`Text`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"textstrikethrough--boolean\"\n    }}>{`text.strikethrough : `}<inlineCode parentName=\"h3\">{`boolean`}</inlineCode></h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`\n`}<strong parentName=\"p\">{`Since`}</strong>{`: XD 19`}</p>\n    <p>{`Set strikethrough across all style ranges, or get the strikethrough of the last style range (strikethrough of all the text if one\nrange covers all the text).`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#text\"\n      }}><inlineCode parentName=\"a\">{`Text`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"texttexttransform--string\"\n    }}>{`text.textTransform : `}<inlineCode parentName=\"h3\">{`string`}</inlineCode></h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`\"none\"`}</inlineCode>{`\n`}<strong parentName=\"p\">{`Since`}</strong>{`: XD 19`}</p>\n    <p>{`Set textTransform (\"none\", \"uppercase\", \"lowercase\", or \"titlecase\") across all style ranges, or get the textTransform of the last style range.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#text\"\n      }}><inlineCode parentName=\"a\">{`Text`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"texttextscript--string\"\n    }}>{`text.textScript : `}<inlineCode parentName=\"h3\">{`string`}</inlineCode></h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`\"none\"`}</inlineCode>{`\n`}<strong parentName=\"p\">{`Since`}</strong>{`: XD 20`}</p>\n    <p>{`Set textScript (\"none\" or \"superscript\" or \"subscript\") across all style ranges, or get the textScript of the last style range.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#text\"\n      }}><inlineCode parentName=\"a\">{`Text`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"textflipy--boolean\"\n    }}>{`text.flipY : `}<inlineCode parentName=\"h3\">{`boolean`}</inlineCode></h3>\n    <p>{`If true, the text is drawn upside down.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#text\"\n      }}><inlineCode parentName=\"a\">{`Text`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"texttextalign--string\"\n    }}>{`text.textAlign : `}<inlineCode parentName=\"h3\">{`string`}</inlineCode></h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`ALIGN_LEFT`}</inlineCode></p>\n    <p>{`Horizontal alignment: Text.ALIGN_LEFT, ALIGN_CENTER, or ALIGN_RIGHT. This setting affects the layout of multiline text, and for point\ntext it also affects how the text is positioned relative to its anchor point (x=0 in local coordinates) and what direction the text\ngrows when edited by the user.`}</p>\n    <p>{`Changing textAlign on existing point text will cause it to shift horizontally. To change textAlign while keeping the text in a fixed\nposition, shift the text horizontally (moving its anchor point) to compensate:`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let originalBounds = textNode.localBounds;\ntextNode.textAlign = newAlignValue;\nlet newBounds = textNode.localBounds;\ntextNode.moveInParentCoordinates(originalBounds.x - newBounds.x, 0);\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#text\"\n      }}><inlineCode parentName=\"a\">{`Text`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"textlinespacing--number--0-or-0-for-default-spacing\"\n    }}>{`text.lineSpacing : `}<inlineCode parentName=\"h3\">{`number`}</inlineCode>{` `}{`>`}{` 0, or 0 for default spacing`}</h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`0`}</inlineCode></p>\n    <p>{`Distance between baselines in multiline text, in document pixels. The special value 0 causes XD to use the default line spacing\ndefined by the font given the current font size & style.`}</p>\n    <p>{`This property is not automatically adjusted when fontSize changes, if line spacing is not set to 0, the line spacing will stay\nfixed while the font size changes, shifting the spacing's proportional relationship to font size. If the value is 0, then the\nrendered line spacing will change to match the new font size, since 0 means the spacing is dynamically calculated from the current\nfont settings.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#text\"\n      }}><inlineCode parentName=\"a\">{`Text`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"textparagraphspacing--number--0\"\n    }}>{`text.paragraphSpacing : `}<inlineCode parentName=\"h3\">{`number`}</inlineCode>{` `}{`>`}{`= 0`}</h3>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{`\n`}<strong parentName=\"p\">{`Since`}</strong>{`: XD 14`}</p>\n    <p>{`Additional distance between paragraphs, in document pixels, added to the lineSpacing amount (soft line breaks in area text are\nseparated only by lineSpacing, while hard line breaks are separated by lineSpacing + paragraphSpacing). Unlike lineSpacing, 0\nis not a special value; it just means no added spacing.`}</p>\n    <p>{`Similar to lineSpacing, this property is not automatically adjusted when fontSize changes. The paragraph spacing amount will stay\nfixed while the font size changes, shifting the spacing's proportional relationship to font size.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#text\"\n      }}><inlineCode parentName=\"a\">{`Text`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"textareabox--widthnumber-heightnumber\"\n    }}>{`text.areaBox : `}<inlineCode parentName=\"h3\">{`?{width:number, height:number}`}</inlineCode></h3>\n    <p><strong parentName=\"p\">{`Deprecated`}</strong>{`: XD 34 - Please use `}<a parentName=\"p\" {...{\n        \"href\": \"#text-layoutbox\"\n      }}><inlineCode parentName=\"a\">{`layoutBox`}</inlineCode></a>{` which supports all text types.`}</p>\n    <p>{`Null for point text and starting with XD 34 null for auto height text.\nFor area text, specifies the size of the rectangle within which text is wrapped and clipped.`}</p>\n    <p>{`Changing point text to area text or vice versa will change the origin / anchor point of the text, thus changing its localBounds,\nbut it will also automatically change the node's transform so its globalBounds and boundsInParent origins remain unchanged.`}</p>\n    <p>{`Changing area text to point text will also automatically insert hard line breaks (\"\\\\n\") into the text to match the previous line\nwrapping's appearance exactly.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#text\"\n      }}><inlineCode parentName=\"a\">{`Text`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"textlayoutbox--typestring-widthnumber-heightnumber\"\n    }}>{`text.layoutBox : `}<inlineCode parentName=\"h3\">{`{type:string, ?width:number, ?height:number}`}</inlineCode></h3>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 34`}</p>\n    <p>{`Type: Text.POINT (for point text also referred as auto width), FIXED_HEIGHT (for area text also referred as fixed size) or AUTO_HEIGHT (for the new auto height text)`}</p>\n    <p>{`Width: number between 0-999999. This is ignored and can be omitted for Text.POINT`}</p>\n    <p>{`Height: number between 0-999999. This is ignored and can be omitted for Text.POINT and Text.AUTO_HEIGHT`}</p>\n    <p>{`Changing POINT text to FIXED_HEIGHT or AUTO_HEIGHT text or vice versa will change the origin / anchor point of the text, thus changing its localBounds, but it will also automatically change the node's transform so its `}<inlineCode parentName=\"p\">{`globalBounds`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`boundsInParent`}</inlineCode>{` origins remain unchanged.`}</p>\n    <p>{`Changing FIXED_HEIGHT or AUTO_HEIGHT text to POINT text will automatically insert hard line break (\"\\\\n\") into the text to match the previous line wrapping's appearance exactly.`}</p>\n    <p>{`Changing from FIXED_HEIGHT to AUTO_HEIGHT text will automatically change the height of the bounds to match the height of the total text (can be a no-op).`}</p>\n    <p>{`Changing from AUTO_HEIGHT to FIXED_HEIGHT text will not change the bounds, transform or origin (no-op).`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#text\"\n      }}><inlineCode parentName=\"a\">{`Text`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"textclippedbyarea--boolean\"\n    }}>{`text.clippedByArea : `}<inlineCode parentName=\"h3\">{`boolean`}</inlineCode></h3>\n    <p>{`Always false for point text and, starting with XD 34, false for auto height text.\nFor area text, true if the text does not fit in the content box and its bottom is being clipped.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#text\"\n      }}><inlineCode parentName=\"a\">{`Text`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h2 {...{\n      \"id\": \"symbolinstance\"\n    }}>{`SymbolInstance`}</h2>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: class\n`}<strong parentName=\"p\">{`Extends`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <p>{`Container node representing one instance of a Component (previously known as \"Symbols\" in XD's UI). Changes made to the contents of a\nSymbolInstance are treated in one of two ways:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`If `}<a parentName=\"li\" {...{\n          \"href\": \"#symbolinstance-ismaster\"\n        }}><inlineCode parentName=\"a\">{`isMaster`}</inlineCode></a>{` is `}<strong parentName=\"li\">{`false`}</strong>{`: The changes affect `}<em parentName=\"li\">{`only`}</em>{` this one instance. This creates an \"override\":\nchanges made to the corresponding part of the master later will no longer get synced to this particular instance.`}</li>\n      <li parentName=\"ul\">{`If `}<a parentName=\"li\" {...{\n          \"href\": \"#symbolinstance-ismaster\"\n        }}><inlineCode parentName=\"a\">{`isMaster`}</inlineCode></a>{` is `}<strong parentName=\"li\">{`true`}</strong>{`: The changes are automatically synced to all other other instances of the\ncomponent - `}<em parentName=\"li\">{`except`}</em>{` for instances where the affected nodes have instance-specific overrides. As a result, your plugin's batch\nof edits `}<strong parentName=\"li\">{`may not be applied atomically`}</strong>{` in some instances.`}</li>\n    </ul>\n    <p>{`To elaborate: if your plugin command makes edits to more than one property or more than one node as part of a single gesture, and the\nuser invokes your plugin while editing a component master, other instances of the component may receive only a `}<em parentName=\"p\">{`partial application`}</em>{`\nof your plugin's changes. In many cases this will feel like a natural consequence of the overrides the user has created, but if this\npartial application of your plugin's intended changes feels too confusing in your use case, you may opt to warn users or disable some\nof your plugin's functionality when `}<inlineCode parentName=\"p\">{`selection.editContext`}</inlineCode>{` is (or is inside of) a component with `}<inlineCode parentName=\"p\">{`isMaster`}</inlineCode>{` true.`}</p>\n    <p>{`Note that overrides vary somewhat in granularity. In some but not all cases, overriding one property may also prevent other properties\non the same node from receiving future updates from the master instance.`}</p>\n    <p>{`It is not currently possible for plugins to `}<em parentName=\"p\">{`create`}</em>{` a new component definition or a new SymbolInstance node, aside from using\n`}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/commands/#module_commands-duplicate\"\n      }}>{`commands.duplicate`}</a>{` to clone existing SymbolInstances.`}</p>\n    <h3 {...{\n      \"id\": \"symbolinstancesymbolid--string\"\n    }}>{`symbolInstance.symbolId : `}<inlineCode parentName=\"h3\">{`string`}</inlineCode></h3>\n    <p>{`An identifier unique within this document that is shared by all instances of the same component.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#symbolinstance\"\n      }}><inlineCode parentName=\"a\">{`SymbolInstance`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h3 {...{\n      \"id\": \"symbolinstanceismaster--boolean\"\n    }}>{`symbolInstance.isMaster : `}<inlineCode parentName=\"h3\">{`boolean`}</inlineCode></h3>\n    <p>{`True if this is the \"master\" instance of the component, which forms the template for all new instances. When the user edits the master,\nthose changes are synced to all other instances of the component (unless blocked by \"overrides\" -- `}<a parentName=\"p\" {...{\n        \"href\": \"#symbolinstance\"\n      }}>{`see discussion above`}</a>{`).`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#symbolinstance\"\n      }}><inlineCode parentName=\"a\">{`SymbolInstance`}</inlineCode></a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h2 {...{\n      \"id\": \"repeatgrid\"\n    }}>{`RepeatGrid`}</h2>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: class\n`}<strong parentName=\"p\">{`Extends`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <p>{`Repeat Grid container node containing multiple grid cells, each one a child Group. Changes within one cell are automatically synced\nto all the other cells - with certain exceptions, called \"overrides.\" A Repeat Grid also defines a rectangular clipping mask which\ndetermines how may cells are visible (new cells are automatically generated as needed if the Repeat Grid is resized larger).`}</p>\n    <p>{`Each grid cell is a Group that is an immediate child of the RepeatGrid. These groups are automatically created and destroyed as\nneeded when the RepeatGrid is resized.`}</p>\n    <p>{`It is not currently possible for plugins to `}<em parentName=\"p\">{`create`}</em>{` a new RepeatGrid node, aside from using `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/commands/#module_commands-duplicate\"\n      }}>{`commands.duplicate`}</a>{`\nto clone existing RepeatGrids.`}</p>\n    <h3 {...{\n      \"id\": \"repeatgridwidth--number\"\n    }}>{`repeatGrid.width : `}<inlineCode parentName=\"h3\">{`number`}</inlineCode></h3>\n    <p>{`Defines size of the RepeatGrid. Cells are created and destroyed as necessary to fill the current size. Cells that only partially fit will be clipped.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#repeatgrid\"\n      }}><inlineCode parentName=\"a\">{`RepeatGrid`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"repeatgridheight--number\"\n    }}>{`repeatGrid.height : `}<inlineCode parentName=\"h3\">{`number`}</inlineCode></h3>\n    <p>{`Defines size of the RepeatGrid. Cells are created and destroyed as necessary to fill the current size. Cells that only partially fit will be clipped.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#repeatgrid\"\n      }}><inlineCode parentName=\"a\">{`RepeatGrid`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"repeatgridnumcolumns--number\"\n    }}>{`repeatGrid.numColumns : `}<inlineCode parentName=\"h3\">{`number`}</inlineCode></h3>\n    <p>{`Number of grid columns`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#repeatgrid\"\n      }}><inlineCode parentName=\"a\">{`RepeatGrid`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"repeatgridnumrows--number\"\n    }}>{`repeatGrid.numRows : `}<inlineCode parentName=\"h3\">{`number`}</inlineCode></h3>\n    <p>{`Number of grid rows`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#repeatgrid\"\n      }}><inlineCode parentName=\"a\">{`RepeatGrid`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"repeatgridpaddingx--number\"\n    }}>{`repeatGrid.paddingX : `}<inlineCode parentName=\"h3\">{`number`}</inlineCode></h3>\n    <p>{`Horizontal spacing between grid cells/columns`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#repeatgrid\"\n      }}><inlineCode parentName=\"a\">{`RepeatGrid`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"repeatgridpaddingy--number\"\n    }}>{`repeatGrid.paddingY : `}<inlineCode parentName=\"h3\">{`number`}</inlineCode></h3>\n    <p>{`Vertical spacing between grid cells/rows`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#repeatgrid\"\n      }}><inlineCode parentName=\"a\">{`RepeatGrid`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"repeatgridcellsize--width-number-height-number\"\n    }}>{`repeatGrid.cellSize : `}<inlineCode parentName=\"h3\">{`!{width: number, height: number}`}</inlineCode></h3>\n    <p>{`The size of each grid cell. The size of each cell's content can vary slightly due to text overrides; the cell size is always set to the width of the widest cell content and the height of the tallest cell content.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#repeatgrid\"\n      }}><inlineCode parentName=\"a\">{`RepeatGrid`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"repeatgridattachtextdataseriestextnode-textvalues\"\n    }}>{`repeatGrid.attachTextDataSeries(textNode, textValues)`}</h3>\n    <p>{`Attach a sequence of text values to the instances of a given text node across all the cells of a Repeat Grid. The sequence is\nrepeated as necessary to cover all the grid cells. This is a persistent data binding, so if the Repeat Grid is resized `}<em parentName=\"p\">{`later`}</em>{`\nto increase the number of grid cells, items from this sequence will be used to fill the text values of the new cells.`}</p>\n    <p>{`You can call this API from either of `}<em parentName=\"p\">{`two different edit contexts`}</em>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Edit context where the RepeatGrid node is in scope (where properties of the RepeatGrid node itself could be edited) - e.g.\nwhen the RepeatGrid is selected`}</li>\n      <li parentName=\"ul\">{`Edit context where textNode is in scope (where properties of the textNode could be edited) - e.g. when textNode is selected\nor when the user has otherwise drilled down into the grid cell containing it.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance method of `}<a parentName=\"p\" {...{\n        \"href\": \"#repeatgrid\"\n      }}><inlineCode parentName=\"a\">{`RepeatGrid`}</inlineCode></a></p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`textNode`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`!Text`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`A Text node exemplar that would be in scope for editing if the current edit context was one of this RepeatGrid's cells. The data series will be bound to this text node and all corresponding copies of it in the other grid cells.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`textValues`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`!Array<string&gt;`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Array of one or more strings. Empty strings are ignored.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"repeatgridattachimagedataseriesshapenode-images\"\n    }}>{`repeatGrid.attachImageDataSeries(shapeNode, images)`}</h3>\n    <p>{`Attach a sequence of image fills to the instances of a given shape node across all the cells of a Repeat Grid. The sequence is\nrepeated as necessary to cover all the grid cells. This is a persistent data binding, so if the Repeat Grid is resized `}<em parentName=\"p\">{`later`}</em>{`\nto increase the number of grid cells, items from this sequence will be used to set the image fill in the new cells.`}</p>\n    <p>{`You can call this API from either of `}<em parentName=\"p\">{`two different edit contexts`}</em>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Edit context where the RepeatGrid node is in scope (where properties of the RepeatGrid node itself could be edited) - e.g.\nwhen the RepeatGrid is selected`}</li>\n      <li parentName=\"ul\">{`Edit context where shapeNode is in scope (where properties of the shapeNode could be edited) - e.g. when shapeNode is selected\nor when the user has otherwise drilled down into the grid cell containing it.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance method of `}<a parentName=\"p\" {...{\n        \"href\": \"#repeatgrid\"\n      }}><inlineCode parentName=\"a\">{`RepeatGrid`}</inlineCode></a></p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`shapeNode`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`!GraphicNode`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`A shape node exemplar that would be in scope for editing if the current edit context was one of this RepeatGrid's cells. The image series will be bound to this node and all corresponding copies of it in the other grid cells. Must be a node type that supports image fills (e.g. Rectangle, but not Text or Line).`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`images`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`!Array<!ImageFill&gt;`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Array of one or more ImageFills.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"scrollablegroup\"\n    }}>{`ScrollableGroup`}</h2>\n    <p><strong parentName=\"p\">{`Since:`}</strong>{` XD 30\n`}<strong parentName=\"p\">{`Kind`}</strong>{`: class\n`}<strong parentName=\"p\">{`Extends`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <p>{`ScrollableGroup nodes are content that users can interactively scroll around. Content is viewed through a `}<a parentName=\"p\" {...{\n        \"href\": \"#scrollablegroup-viewport\"\n      }}>{`viewport`}</a>{`,\nwith everything else clipped. If a ScrollableGroup is set to only scroll on one axis, on the other axis the viewport is\nautomatically sized to exactly fit the bounds of the content so nothing is clipped.`}</p>\n    <p>{`The scroll distance range is defined by a `}<em parentName=\"p\">{`scrollable area`}</em>{` rectangle which is the union of the viewport and the bounds of all\nthe content. This can include some blank space, if the content is initially positioned not filling the entire viewport.`}</p>\n    <h3 {...{\n      \"id\": \"scrollablegroupscrollingtype--string\"\n    }}>{`ScrollableGroup.scrollingType : `}<inlineCode parentName=\"h3\">{`string`}</inlineCode></h3>\n    <p>{`The type of scrolling: one of ScrollableGroup.VERTICAL, HORIZONTAL and PANNING.\nPANNING enables scrolling on both axes.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scrollablegroup\"\n      }}><inlineCode parentName=\"a\">{`ScrollableGroup`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"scrollablegroupviewport--viewportwidth-number-offsetx-number--viewportheight-number-offsety-number--viewportwidth-number-offsetx-number-viewportheight-number-offsety-number\"\n    }}>{`ScrollableGroup.viewport : `}<inlineCode parentName=\"h3\">{`!{viewportWidth: number, offsetX: number} | {viewportHeight: number, offsetY: number} | {viewportWidth: number, offsetX: number, viewportHeight: number, offsetY: number}}`}</inlineCode></h3>\n    <p>{`The viewport is a rectangle whose bounds are defined explicitly on scrolling axes and fit automatically to the\ncontent on non-scrolling axes:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`On a scrolling axis, the bounds are specified in `}<a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/coordinate-spaces-and-units/\"\n        }}>{`local coordinates`}</a>{`\nusing the `}<inlineCode parentName=\"li\">{`viewport`}</inlineCode>{` values specified here.`}</li>\n      <li parentName=\"ul\">{`On a non-scrolling axis, the bounds are automatically calculated to exactly fit the content (just like the blue\nselection rectangle seen when you select a plain Group).`}</li>\n    </ul>\n    <p>{`For example, if scrollingType == VERTICAL, the top of the viewport is `}<inlineCode parentName=\"p\">{`viewport.offsetY`}</inlineCode>{` in the ScrollableGroup's\nlocal coordinates, the bottom of the viewport is `}<inlineCode parentName=\"p\">{`viewport.offsetY + viewport.viewportHeight`}</inlineCode>{` in local coordinates,\nand horizontally there is no viewport clipping -- the entire current `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode-localbounds\"\n      }}>{`localBounds`}</a>{` range is visible. The\n`}<inlineCode parentName=\"p\">{`viewport`}</inlineCode>{` object will only contain `}<inlineCode parentName=\"p\">{`offsetY`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`viewportHeight`}</inlineCode>{` properties in this case.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#scrollablegroup\"\n      }}><inlineCode parentName=\"a\">{`ScrollableGroup`}</inlineCode></a></p>\n    <h2 {...{\n      \"id\": \"linkedgraphic\"\n    }}>{`LinkedGraphic`}</h2>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: class\n`}<strong parentName=\"p\">{`Extends`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a></p>\n    <p>{`Container node whose content is linked to an external resource, such as Creative Cloud Libraries. It cannot be edited except by first\nungrouping it, breaking this link.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}