{"version":3,"sources":["webpack:///./src/pages/develop/reference/ui/dialogs/assets/Example-Error-Alert.png","webpack:///./src/pages/develop/reference/ui/dialogs/assets/dialog.png","webpack:///./src/pages/develop/reference/ui/dialogs/assets/dialog-anatomy.png","webpack:///./src/pages/develop/reference/ui/assets/helper-alert.png","webpack:///./src/pages/develop/reference/ui/dialogs/assets/Example-Prompt-Dialog.png","webpack:///./src/pages/develop/reference/ui/dialogs/assets/Example-About-Dialog.png","webpack:///./src/pages/develop/reference/ui/dialogs/assets/Example-Confirmation-Dialog.png","webpack:///./src/pages/develop/reference/ui/dialogs/assets/Example-Warning-Dialog.png","webpack:///./src/pages/develop/reference/ui/dialogs/assets/Example-About-Dialog-on-UWP.png","webpack:///./src/pages/develop/reference/ui/dialogs/index.md"],"names":["module","exports","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","alt","src","require","isMDXComponent"],"mappings":"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","file":"component---src-pages-develop-reference-ui-dialogs-index-md-4a397dae7c8f32107f41.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/Example-Error-Alert-ec80605431fac498489c9b5ba7a01ab4.png\";","module.exports = __webpack_public_path__ + \"static/dialog-22395da39bec5d585a520f8e734d86e1.png\";","module.exports = __webpack_public_path__ + \"static/dialog-anatomy-0d32e625670747a5490eac72d66f948a.png\";","module.exports = __webpack_public_path__ + \"static/helper-alert-3967f4906ab03bf7e92e943555d3df10.png\";","module.exports = __webpack_public_path__ + \"static/Example-Prompt-Dialog-825f96d6c5989aab3ff4989b001b05cc.png\";","module.exports = __webpack_public_path__ + \"static/Example-About-Dialog-cb674d6a209270ea096eac6e4f2ef58c.png\";","module.exports = __webpack_public_path__ + \"static/Example-Confirmation-Dialog-cbeaa12931f83d680fac3615f4d70f29.png\";","module.exports = __webpack_public_path__ + \"static/Example-Warning-Dialog-b302c3d3f017c15c2089ac19cc55ea78.png\";","module.exports = __webpack_public_path__ + \"static/Example-About-Dialog-on-UWP-9f851b07c3412cb626ea49164bd0b5cd.png\";","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"dialogs\"\n    }}>{`Dialogs`}</h1>\n    <p>{`A modal dialog is used to display important information and ask for user input. XD Plugins can display user interface in the form of `}<strong parentName=\"p\">{`modal dialogs`}</strong>{`.`}</p>\n    <p><img alt=\"Example of a Modal Dialog\" src={require(\"./assets/dialog.png\")} /></p>\n    <p>{`Dialogs appear over the XD document, and prevent further interaction with the underlying document. Dialogs are dismissed in any one of the following manners:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The user presses the ESC key`}</li>\n      <li parentName=\"ul\">{`The user presses ENTER (assuming the plugin supplies an `}<inlineCode parentName=\"li\">{`onsubmit`}</inlineCode>{` handler)`}</li>\n      <li parentName=\"ul\">{`The user clicks or touches a button designed to dismiss the dialog.`}</li>\n    </ul>\n    <p>{`Dialogs are highly intrusive, and should only be used when absolutely necessary.`}</p>\n    <h2 {...{\n      \"id\": \"anatomy\"\n    }}>{`Anatomy`}</h2>\n    <p>{`{% tabs anatomy=\"Dialog\", examplesmac=\"macOS\", examplesuwp=\"Windows\" %}`}</p>\n    <p>{`{% content \"anatomy\" %}`}</p>\n    <p><img alt=\"Dialog Anatomy\" src={require(\"./assets/dialog-anatomy.png\")} /></p>\n    <p>{`{% content \"examplesmac\" %}`}</p>\n    <p><img alt=\"macOS Dialog Example\" src={require(\"./assets/Example-About-Dialog.png\")} /></p>\n    <p>{`{% content \"examplesuwp\" %}`}</p>\n    <p><img alt=\"Windows Dialog Example\" src={require(\"./assets/Example-About-Dialog-on-UWP.png\")} /></p>\n    <p>{`{% endtabs %}`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`When it comes to building the user interface, XD exposes an API surface that looks and feels a lot like what you would get in a web browser, namely:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`HTML5 DOM (Document Object Model) API`}</li>\n      <li parentName=\"ul\">{`CSS`}</li>\n      <li parentName=\"ul\">{`JavaScript`}</li>\n    </ul>\n    <p>{`These APIs and standards can be used to create compelling user interfaces, even inside modal dialogs.`}</p>\n    <p>{`The above example is a typical modal dialog. Modal dialogs consist of:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A dialog element (`}<inlineCode parentName=\"li\">{`<dialog>`}</inlineCode>{`) that is added to the DOM and contains everything that follows`}</li>\n      <li parentName=\"ul\">{`A form element (`}<inlineCode parentName=\"li\">{`<form>`}</inlineCode>{`) that wraps around the content of the dialog`}</li>\n      <li parentName=\"ul\">{`A heading (`}<inlineCode parentName=\"li\">{`<h1>`}</inlineCode>{`), which may also display the plugin's icon`}</li>\n      <li parentName=\"ul\">{`A horizontal rule (`}<inlineCode parentName=\"li\">{`<hr />`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\">{`Some body content`}</li>\n      <li parentName=\"ul\">{`A footer (`}<inlineCode parentName=\"li\">{`<footer>`}</inlineCode>{`) with one or more buttons (`}<inlineCode parentName=\"li\">{`<button>`}</inlineCode>{`)`}</li>\n    </ul>\n    <p>{`The margins and padding that surround the structure are provided automatically. There is generally `}<em parentName=\"p\">{`no need`}</em>{` to specify or override these margins in your own user interface, unless you want to do so.`}</p>\n    <h2 {...{\n      \"id\": \"building-modal-dialogs\"\n    }}>{`Building Modal Dialogs`}</h2>\n    <p>{`You can build modal dialogs using any method that creates an HTML5 DOM structure. This means you can use `}<inlineCode parentName=\"p\">{`document.createElement`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`innerHTML`}</inlineCode>{`, jQuery, React, and other frameworks.`}</p>\n    <p>{`Let's examine a simple dialog and how we might create it.`}</p>\n    <p>{`{% tabs sample=\"Sample\", html=\"HTML\", js=\"JS\", react=\"React\" %}`}</p>\n    <p>{`{% content \"sample\" %}`}</p>\n    <p><img alt=\"A Simple Dialog\" src={require(\"./assets/dialog.png\")} /></p>\n    <p>{`{% content \"html\" %}`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<style>\n    #dialog form {\n        width: 360px;\n    }\n    .h1 {\n        align-items: center;\n        justify-content: space-between;\n        display: flex;\n        flex-direction: row;\n    }\n    .icon {\n        border-radius: 4px;\n        width: 24px;\n        height: 24px;\n        overflow: hidden;\n    }\n</style>\n<dialog id=\"dialog\">\n    <form method=\"dialog\">\n        <h1 class=\"h1\">\n            <span>Create Shape</span>\n            <img class=\"icon\" src=\"./assets/icon.png\" />\n        </h1>\n        <hr />\n        <p>Please enter the kind of shape you'd like to create. You can also include additional options by separating them with spaces.</p>\n        <label>\n            <span>Shape</span>\n            <input type=\"text\" placeholder=\"e.g., Rectangle 10 10 20 40\" />\n        </label>\n        <footer>\n            <button uxp-variant=\"primary\">Cancel</button>\n            <button type=\"submit\" uxp-variant=\"cta\">Create</button>\n        </footer>\n    </form>\n</dialog>\n`}</code></pre>\n    <p>{`{% content \"js\" %}`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let ourDialog;\nfunction showOurDialog() {\n    if (!ourDialog) {\n        ourDialog = document.createElement(\"dialog\");\n        ourDialog.innerHTML = \\`\n<style>\n    form {\n        width: 360px;\n    }\n    .h1 {\n        align-items: center;\n        justify-content: space-between;\n        display: flex;\n        flex-direction: row;\n    }\n    .icon {\n        border-radius: 4px;\n        width: 24px;\n        height: 24px;\n        overflow: hidden;\n    }\n</style>\n<form method=\"dialog\">\n    <h1 class=\"h1\">\n        <span>Create Shape</span>\n        <img class=\"icon\" src=\"./assets/icon.png\" />\n    </h1>\n    <hr />\n    <p>Please enter the kind of shape you'd like to create. You can also include additional options by separating them with spaces.</p>\n    <label>\n        <span>Shape</span>\n        <input type=\"text\" placeholder=\"e.g., Rectangle 10 10 20 40\" />\n    </label>\n    <footer>\n        <button uxp-variant=\"primary\">Cancel</button>\n        <button type=\"submit\" uxp-variant=\"cta\">Create</button>\n    </footer>\n</form>\n        \\`;\n    }\n    return ourDialog.showModal();\n}\n`}</code></pre>\n    <p>{`{% content \"react\" %}`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const React = require(\"react\");\nconst ReactDOM = require(\"react-dom\");\n\nfunction Form() {\n    const styles = {\n        form: {\n            width: 360;\n        },\n        h1: {\n            alignItems: \"center\";\n            justifyContent: \"space-between\";\n            display: \"flex\";\n            flexDirection: \"row\";\n        },\n        icon: {\n            borderRadius: 4;\n            width: 24;\n            height: 24;\n            overflow: \"hidden\";\n        }\n    };\n\n    return (\n        <form styles={styles.form} method=\"dialog\">\n            <h1 styles={styles.h1}>\n                <span>Create Shape</span>\n                <img styles={styles.icon} src=\"./assets/icon.png\" />\n            </h1>\n            <hr />\n            <p>Please enter the kind of shape you'd like to create. You can also include additional options by separating them with spaces.</p>\n            <label>\n                <span>Shape</span>\n                <input type=\"text\" placeholder=\"e.g., Rectangle 10 10 20 40\" />\n            </label>\n            <footer>\n                <button uxp-variant=\"primary\">Cancel</button>\n                <button type=\"submit\" uxp-variant=\"cta\">Create</button>\n            </footer>\n        </form>\n    );\n}\n\nlet ourDialog;\nfunction showOurDialog() {\n    if (!ourDialog) {\n        ourDialog = document.createElement(\"dialog\");\n    }\n    ReactDOM.render(<Form />, ourDialog);\n    return ourDialog.showModal();\n}\nfunction render() {\n    return (\n        <button>Click Me</button>\n    );\n}\n`}</code></pre>\n    <p>{`{% endtabs %}`}</p>\n    <p>{`Once a dialog is built, you will need to manage its lifecycle:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./showing/\"\n        }}>{`Showing a Modal Dialog`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./dismissal/\"\n        }}>{`Dismissing a Modal Dialog`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"variations\"\n    }}>{`Variations`}</h2>\n    <h3 {...{\n      \"id\": \"alert\"\n    }}>{`Alert`}</h3>\n    <p>{`A simple \"alert\" can be used to display a message along with a `}<strong parentName=\"p\">{`Close`}</strong>{` button. You can customize the content of the title and message, but you cannot customize the button itself.`}</p>\n    <p><img alt=\"Example Alert\" src={require(\"../../ui/assets/helper-alert.png\")} /></p>\n    <h3 {...{\n      \"id\": \"error\"\n    }}>{`Error`}</h3>\n    <p>{`An error \"alert\" (with a red heading). These are useful for rendering error messages. Just like regular alerts, you cannot customize the button itself.`}</p>\n    <p><img alt=\"Example Error Alert\" src={require(\"./assets/Example-Error-Alert.png\")} /></p>\n    <h3 {...{\n      \"id\": \"confirmation\"\n    }}>{`Confirmation`}</h3>\n    <p>{`Confirmation dialogs display a message and `}<em parentName=\"p\">{`two`}</em>{` buttons. The user is free to pick which of the buttons they wish to invoke.`}</p>\n    <p><img alt=\"Example Confirmation Dialog\" src={require(\"./assets/Example-Confirmation-Dialog.png\")} /></p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Danger`}</strong></p>\n      <p parentName=\"blockquote\">{`Do not use confirmation dialogs for destructive actions.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"warning\"\n    }}>{`Warning`}</h3>\n    <p>{`Warning dialogs display a message and `}<em parentName=\"p\">{`two`}</em>{` buttons, one of which is destructive. Pressing `}<strong parentName=\"p\">{`ENTER`}</strong>{` in this case should `}<em parentName=\"p\">{`not`}</em>{` invoke the destructive action. Otherwise it is the same as a confirmation dialog.`}</p>\n    <p><img alt=\"Example Warning Dialog\" src={require(\"./assets/Example-Warning-Dialog.png\")} /></p>\n    <h3 {...{\n      \"id\": \"prompt\"\n    }}>{`Prompt`}</h3>\n    <p>{`Prompts display a single line text field in addition to a message and two buttons.`}</p>\n    <p><img alt=\"Example Prompt Dialog\" src={require(\"./assets/Example-Prompt-Dialog.png\")} /></p>\n    <h2 {...{\n      \"id\": \"guidelines\"\n    }}>{`Guidelines`}</h2>\n    <p>{`You should always strive to provide a good user experience with a modal dialog. That means providing easy access to dismissive buttons, avoiding dark patterns, and ensuring that your dialog doesn't block the user from forward progress in their work.`}</p>\n    <p>{`You should definitely read up on our `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/design/ux-patterns/modal-ux/\"\n      }}>{`UX patterns for modals`}</a>{` to learn more about what to do and what not to do.`}</p>\n    <h5 {...{\n      \"id\": \"when-to-use-dialogs\"\n    }}>{`When to Use Dialogs`}</h5>\n    <p>{`Dialogs are very intrusive to the user's workflow. As such, you should consider their use very carefully.`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Don't`}</strong>{` display a \"success\" dialog when the result of the plugin is obvious to the user.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Do`}</strong>{` display a \"success\" dialog when the result of the plugin is `}<strong parentName=\"li\">{`not`}</strong>{` obvious to the user (such as data being sent to a remote endpoint.)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Don't`}</strong>{` fail silently `}{`—`}{` let the user know what went wrong and how they can fix it by showing a modal dialog.`}</li>\n    </ul>\n    <h5 {...{\n      \"id\": \"no-nested-dialogs\"\n    }}>{`No Nested Dialogs`}</h5>\n    <p>{`You should avoid nesting dialogs within other dialogs. The only exception to this guideline is when displaying file or folder pickers.`}</p>\n    <h5 {...{\n      \"id\": \"three-buttons\"\n    }}>{`Three Buttons`}</h5>\n    <p>{`In general, try to strive to avoid dialogs with lots of buttons in the footer. You should try to use up to three buttons in the footer.`}</p>\n    <h5 {...{\n      \"id\": \"dismissive-buttons\"\n    }}>{`Dismissive Buttons`}</h5>\n    <p>{`Dismissive dialog buttons live within a `}<inlineCode parentName=\"p\">{`footer`}</inlineCode>{` element. Within the `}<inlineCode parentName=\"p\">{`footer`}</inlineCode>{`, you can have any number of buttons, but you should follow these guidelines when defining variants (which you can use to indicate if a button is the default or is destructive):`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`uxp-variant=\"cta\"`}</inlineCode>{` indicates that the button is a \"call to action\". This is typically used for the default action. You should only have one of these buttons in a dialog.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`uxp-variant=\"primary\"`}</inlineCode>{` indicates the button is a \"primary\" button. This is the `}<em parentName=\"li\">{`default`}</em>{` if `}<inlineCode parentName=\"li\">{`uxp-variant`}</inlineCode>{` is not specified.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`uxp-variant=\"secondary\"`}</inlineCode>{` indicates the button is a \"secondary\" button. It receives a lighter color than primary buttons.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`uxp-variant=\"warning\"`}</inlineCode>{` indicates that the button will trigger a destructive action. This button should not be the default action.`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Tip`}</strong></p>\n      <p parentName=\"blockquote\">{`Dismissive buttons should always be visible on screen without scrolling. If a dismissive button isn't visible, the user may think they are trapped in the dialog.`}</p>\n    </blockquote>\n    <h5 {...{\n      \"id\": \"dismissal-by-other-means\"\n    }}>{`Dismissal by other means`}</h5>\n    <p>{`You should avoid dismissing a dialog using other means, including action buttons, checkboxes, etc.`}</p>\n    <h2 {...{\n      \"id\": \"keyboard-interaction\"\n    }}>{`Keyboard Interaction`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Key`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Action`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ENTER`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Submits the dialog's form`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ESC`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Cancels the dialog`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`TAB`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Moves to the next focusable element.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`SHIFT+TAB`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Moves to the previous focusable element.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"known-issues\"\n    }}>{`Known Issues`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Large dialogs on small screens (or in small windows) do not scroll automatically and will clip. You should apply a fixed height to your dialogs.`}</li>\n      <li parentName=\"ul\">{`Dialogs are neither movable nor resizable.`}</li>\n      <li parentName=\"ul\">{`It is not possible to show multiple dialogs at once, `}<em parentName=\"li\">{`except`}</em>{` for file and folder pickers.`}</li>\n      <li parentName=\"ul\">{`It is not possible to intercept the `}<strong parentName=\"li\">{`ESC`}</strong>{` gesture when dismissing a dialog. Dialogs are always dismissible using `}<strong parentName=\"li\">{`ESC`}</strong>{`.`}</li>\n      <li parentName=\"ul\">{`When `}<strong parentName=\"li\">{`TAB`}</strong>{`ing in Windows 10, the focus border may appear incorrectly on some elements.`}</li>\n      <li parentName=\"ul\">{`On Windows 10, the tab order in a dialog's footer may be reversed.`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`<dialog>`}</inlineCode>{` background color is different on Windows and macOS. On macOS, it is `}<inlineCode parentName=\"li\">{`#F5F5F5`}</inlineCode>{`, and on Windows it is `}<inlineCode parentName=\"li\">{`#FFFFFF`}</inlineCode>{`.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}