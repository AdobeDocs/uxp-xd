{"version":3,"file":"component---src-pages-develop-tutorials-how-to-work-with-scenenodelist-index-md-929560b303138ac587cc.js","mappings":"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","sources":["webpack://uxp-xd/./src/pages/develop/tutorials/how-to-work-with-scenenodelist/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"how-to-work-with-a-scenenodelist\"\n    }}>{`How to work with a SceneNodeList`}</h1>\n    <p>{`This sample demonstrates how to work with a SceneNodeList in Adobe XD. The short version of this story is that a `}<inlineCode parentName=\"p\">{`SceneNodeList`}</inlineCode>{` is `}<em parentName=\"p\">{`not an Array`}</em>{`. Read on for details.`}</p>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Basic knowledge of HTML, CSS, and JavaScript.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/tutorials/quick-start/\"\n        }}>{`Quick Start Tutorial`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/tutorials/debugging/\"\n        }}>{`Debugging Tutorial`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"development-steps\"\n    }}>{`Development Steps`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Info`}</strong>{`\nComplete code for this plugin can be found `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/AdobeXD/Plugin-Samples/tree/master/how-to-work-with-scenenodelist\"\n        }}>{`on GitHub`}</a>{`.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"1-prepare-your-plugin-scaffold\"\n    }}>{`1. Prepare your plugin scaffold`}</h3>\n    <p>{`First, edit the manifest file for the plugin you created in our `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/tutorials/quick-start/\"\n      }}>{`Quick Start Tutorial`}</a>{`.`}</p>\n    <p>{`Replace the `}<inlineCode parentName=\"p\">{`uiEntryPoints`}</inlineCode>{` field of the manifest with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"uiEntryPoints\": [\n    {\n        \"type\": \"menu\",\n        \"label\": \"Create Elements\",\n        \"commandId\": \"createElements\"\n    },\n    {\n        \"type\": \"menu\",\n        \"label\": \"Filter and Color\",\n        \"commandId\": \"filterAndColor\"\n    }\n]\n`}</code></pre>\n    <p>{`If you're curious about what each entry means, `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/plugin-structure/manifest/\"\n      }}>{`see the manifest documentation`}</a>{`, where you can also learn about all manifest requirements for a plugin to be published in the XD Plugin Manager.`}</p>\n    <p>{`Then, update your `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file, mapping `}<em parentName=\"p\">{`both`}</em>{` of the manifest's `}<inlineCode parentName=\"p\">{`commandId`}</inlineCode>{` to their respective handler functions.`}</p>\n    <p>{`Replace the content of your `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file with the code below.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function createElements(selection) {\n  // The body of this function is added later\n}\n\nfunction filterAndColor(selection, documentRoot) {\n  // The body of this function is added later\n}\n\nmodule.exports = {\n  commands: {\n    createElements,\n    filterAndColor,\n  },\n};\n`}</code></pre>\n    <p>{`Note the different use of `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/plugin-structure/handlers/#contextual-arguments\"\n      }}>{`contextual arguments`}</a>{` in each function: the first function only makes use of `}<inlineCode parentName=\"p\">{`selection`}</inlineCode>{`, which the second makes use of both `}<inlineCode parentName=\"p\">{`selection`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`documentRoot`}</inlineCode>{`. We'll look at why `}<inlineCode parentName=\"p\">{`documentRoot`}</inlineCode>{` is used in a later step.`}</p>\n    <p>{`The remaining steps in this tutorial describe additional edits to the `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file.`}</p>\n    <h3 {...{\n      \"id\": \"2-require-in-xd-api-dependencies\"\n    }}>{`2. Require in XD API dependencies`}</h3>\n    <p>{`For this tutorial, we just need access to two XD scenegraph classes and one XD module.`}</p>\n    <p>{`Add the following lines to the top of your `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Add this to the top of your main.js file\nconst { Artboard, Rectangle, Ellipse, Text, Color } = require(\"scenegraph\");\n`}</code></pre>\n    <p>{`Now the `}<inlineCode parentName=\"p\">{`Artboard`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Rectangle`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Ellipse`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Text`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`Color`}</inlineCode>{` classes are required in and ready to be used.`}</p>\n    <h3 {...{\n      \"id\": \"3-create-the-handler-function-for-createelements\"\n    }}>{`3. Create the handler function for `}<inlineCode parentName=\"h3\">{`createElements`}</inlineCode></h3>\n    <p>{`This function will do what it says on the label: create elements in the XD document. It's just here for the purpose of generating elements that will help us learn about the `}<inlineCode parentName=\"p\">{`SceneNodeList`}</inlineCode>{` in the next section.`}</p>\n    <p>{`Because of that, we won't go into detail about the `}<inlineCode parentName=\"p\">{`createElements`}</inlineCode>{` function. In short, it will create a number of rectangles, ellipses, and text elements, and put them on your XD artboard.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function createElements(selection) {\n  for (let i = 0; i < 5; i++) {\n    let rectangle = new Rectangle();\n    rectangle.width = 30 * i;\n    rectangle.height = 20 * i;\n    rectangle.fill = new Color(\"gray\");\n    selection.insertionParent.addChild(rectangle);\n    rectangle.moveInParentCoordinates(50 * i, 50 * i);\n\n    let ellipse = new Ellipse();\n    ellipse.radiusX = 20 * i;\n    ellipse.radiusY = 20 * i;\n    ellipse.fill = new Color(\"gray\");\n    selection.insertionParent.addChild(ellipse);\n    ellipse.moveInParentCoordinates(100 * i, 200 * i);\n\n    let text = new Text();\n    text.text = \\`example text \\${i}\\`;\n    text.styleRanges = [\n      {\n        length: text.text.length,\n        fill: new Color(\"gray\"),\n        fontSize: 20,\n      },\n    ];\n    selection.insertionParent.addChild(text);\n    text.moveInParentCoordinates(200 * i, 100 * i);\n  }\n}\n`}</code></pre>\n    <p>{`We'll run the command for this function in a later step.`}</p>\n    <h3 {...{\n      \"id\": \"4-create-the-handler-function-for-filterandcolor\"\n    }}>{`4. Create the handler function for `}<inlineCode parentName=\"h3\">{`filterAndColor`}</inlineCode></h3>\n    <p>{`So let's take a look at working with a `}<inlineCode parentName=\"p\">{`SceneNodeList`}</inlineCode>{`!`}</p>\n    <p>{`The function we create in this step will filter all content on the artboard for rectangles, and then color only the rectangles red.`}</p>\n    <p>{`Recall that in the first step, we made a note of `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/plugin-structure/handlers/#contextual-arguments\"\n      }}>{`contextual arguments in command handlers`}</a>{`, and particularly that this `}<inlineCode parentName=\"p\">{`filterAndColor`}</inlineCode>{` function makes use of the second `}<inlineCode parentName=\"p\">{`documentRoot`}</inlineCode>{` argument.`}</p>\n    <p>{`Like any `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/scenegraph/#scenenode\"\n      }}><inlineCode parentName=\"a\">{`SceneNode`}</inlineCode></a>{`, `}<inlineCode parentName=\"p\">{`documentRoot`}</inlineCode>{` has a `}<inlineCode parentName=\"p\">{`.children`}</inlineCode>{` property that returns a `}<inlineCode parentName=\"p\">{`SceneNodeList`}</inlineCode>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`info`}</strong>{`\nA `}<inlineCode parentName=\"p\">{`SceneNodeList`}</inlineCode>{` is `}<em parentName=\"p\">{`not an Array`}</em>{`. One notable difference is that, with a `}<inlineCode parentName=\"p\">{`SceneNodeList`}</inlineCode>{`, you access elements in the list using the `}<inlineCode parentName=\"p\">{`#at`}</inlineCode>{` method (for example, `}<inlineCode parentName=\"p\">{`node.children.at(0)`}</inlineCode>{` to get the first node in the list). `}<a parentName=\"p\" {...{\n          \"href\": \"/uxp-xd/develop/reference/SceneNodeList/\"\n        }}>{`You can learn more about the `}<inlineCode parentName=\"a\">{`SceneNodeList`}</inlineCode>{` class here`}</a>{`.`}</p>\n    </blockquote>\n    <p>{`Let's fill out our handler function. Each of the numbered comments are explained below the code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function filterAndColor(selection, documentRoot) {\n  documentRoot.children.forEach((node) => {\n    // [1]\n    if (node instanceof Artboard) {\n      // [2]\n      let artboard = node;\n      let rectangles = artboard.children.filter((artboardChild) => {\n        // [3]\n        return artboardChild instanceof Rectangle;\n      });\n      rectangles.forEach((rectangle) => {\n        // [4]\n        rectangle.fill = new Color(\"red\");\n      });\n    }\n  });\n}\n`}</code></pre>\n    <ol>\n      <li parentName=\"ol\">{`Start from the `}<inlineCode parentName=\"li\">{`documentRoot`}</inlineCode>{` node and traverse down the tree using the `}<inlineCode parentName=\"li\">{`.children`}</inlineCode>{` property. Since `}<inlineCode parentName=\"li\">{`.children`}</inlineCode>{` is a `}<inlineCode parentName=\"li\">{`SceneNodeList`}</inlineCode>{`, it has a `}<inlineCode parentName=\"li\">{`#forEach`}</inlineCode>{` method that will let us iterate through the list, node by node.`}</li>\n      <li parentName=\"ol\">{`Since we started at the `}<inlineCode parentName=\"li\">{`documentRoot`}</inlineCode>{` level, the first thing we need to do is look for the artboards in the document. This line ensures that we only traverse down further if the current child `}<inlineCode parentName=\"li\">{`node`}</inlineCode>{` is an artboard.`}</li>\n      <li parentName=\"ol\">{`Once we've found an artboard, we look at its `}<inlineCode parentName=\"li\">{`.children`}</inlineCode>{` property, which is also a `}<inlineCode parentName=\"li\">{`SceneNodeList`}</inlineCode>{`. This `}<inlineCode parentName=\"li\">{`SceneNodeList will contain all of the elements we created earlier. We use the `}</inlineCode>{`SceneNodeList#filter`}<inlineCode parentName=\"li\">{`method to filter the artboard's children down to a`}</inlineCode>{`rectangles\\` array.`}</li>\n      <li parentName=\"ol\">{`Finally, we iteracte over the `}<inlineCode parentName=\"li\">{`rectangles`}</inlineCode>{` array with `}<inlineCode parentName=\"li\">{`#forEach`}</inlineCode>{`, coloring each rectangle red as we go.`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"5-run-the-plugin\"\n    }}>{`5. Run the plugin`}</h3>\n    <p>{`After saving all your changes, reload the plugin in XD.`}</p>\n    <p>{`First, select an artboard and run the \"Create Elements\" command. You plugin will pull shapes on the artboard.`}</p>\n    <p>{`Then, run the \"Filter and Color\" command:`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"1280px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"60.62500000000001%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/uxp-xd/static/4413f906d501fc683833a12707d332fe/5530d/filter-and-color.webp 320w\", \"/uxp-xd/static/4413f906d501fc683833a12707d332fe/0c8fb/filter-and-color.webp 640w\", \"/uxp-xd/static/4413f906d501fc683833a12707d332fe/94b1e/filter-and-color.webp 1280w\", \"/uxp-xd/static/4413f906d501fc683833a12707d332fe/37c77/filter-and-color.webp 1430w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/uxp-xd/static/4413f906d501fc683833a12707d332fe/dd4a7/filter-and-color.png 320w\", \"/uxp-xd/static/4413f906d501fc683833a12707d332fe/0f09e/filter-and-color.png 640w\", \"/uxp-xd/static/4413f906d501fc683833a12707d332fe/bbbf7/filter-and-color.png 1280w\", \"/uxp-xd/static/4413f906d501fc683833a12707d332fe/1d7f3/filter-and-color.png 1430w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/uxp-xd/static/4413f906d501fc683833a12707d332fe/bbbf7/filter-and-color.png\",\n            \"alt\": \"multiple texts, rectangles, and circles\",\n            \"title\": \"multiple texts, rectangles, and circles\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <p>{`You've worked with a `}<inlineCode parentName=\"p\">{`SceneNodeList`}</inlineCode>{` to iterate through an artboard's contents and filter based on element type!`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}