{"version":3,"sources":["webpack:///./src/pages/develop/images/pie-chart.png","webpack:///./src/pages/develop/tutorials/how-to-create-paths/index.md"],"names":["module","exports","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","alt","src","require","isMDXComponent"],"mappings":"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","file":"component---src-pages-develop-tutorials-how-to-create-paths-index-md-a044be14de73f5445034.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/pie-chart-a993cc8ea2a8d97027802b5692d80304.png\";","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"how-to-create-paths\"\n    }}>{`How to create paths`}</h1>\n    <p>{`This sample demonstrates how to create path objects in XD.  The path objects are used to construct a pie chart.`}</p>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Basic knowledge of HTML, CSS, and JavaScript`}</li>\n      <li parentName=\"ul\">{`Basic knowledge of `}<a parentName=\"li\" {...{\n          \"href\": \"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths\"\n        }}>{`Paths`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/tutorials/quick-start/\"\n        }}>{`Quick Start Tutorial`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/tutorials/debugging/\"\n        }}>{`Debugging Tutorial`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"development-steps\"\n    }}>{`Development Steps`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Info`}</strong>{`\nComplete code for this plugin can be found `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/AdobeXD/Plugin-Samples/tree/master/how-to-create-path-objects\"\n        }}>{`on GitHub`}</a>{`.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"1--create-plugin-scaffold\"\n    }}>{`1.  Create plugin scaffold`}</h3>\n    <p>{`First, edit the manifest file for the plugin you created in our `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/tutorials/quick-start/\"\n      }}>{`Quick Start Tutorial`}</a>{`.`}</p>\n    <p>{`Replace the `}<inlineCode parentName=\"p\">{`uiEntryPoints`}</inlineCode>{` field of the manifest with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"uiEntryPoints\": [\n    {\n        \"type\": \"menu\",\n        \"label\": \"Create Pie Chart\",\n        \"commandId\": \"createPieChartCommand\"\n    }\n]\n`}</code></pre>\n    <p>{`If you're curious about what each entry means, `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/reference/structure/manifest/\"\n      }}>{`see the manifest documentation`}</a>{`, where you can also learn about all manifest requirements for a plugin to be published in the XD Plugin Manager.`}</p>\n    <p>{`Then, update your `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file, mapping the manifest's `}<inlineCode parentName=\"p\">{`commandId`}</inlineCode>{` to a handler function.`}</p>\n    <p>{`Replace the content of your `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file with the following code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function createPieChartCommand(selection) {\n    // The body of this function is added later\n}\n\nmodule.exports = {\n    commands: {\n        createPieChartCommand\n    }\n};\n`}</code></pre>\n    <p>{`The remaining steps in this tutorial describe additional edits to the `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file.`}</p>\n    <h3 {...{\n      \"id\": \"2--require-in-xd-api-dependencies\"\n    }}>{`2.  Require in XD API dependencies`}</h3>\n    <p>{`For this tutorial, we just need access to two XD scenegraph classes.`}</p>\n    <p>{`Add the following lines to the top of your `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Add this to the top of your main.js file\nconst { Path, Color } = require(\"scenegraph\");\n`}</code></pre>\n    <p>{`Now the `}<inlineCode parentName=\"p\">{`Path`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Color`}</inlineCode>{` classes are required in and ready to be used.`}</p>\n    <h3 {...{\n      \"id\": \"3-create-helper-functions\"\n    }}>{`3. Create helper functions`}</h3>\n    <h5 {...{\n      \"id\": \"calculate-a-point-on-a-circle\"\n    }}>{`Calculate a point on a circle`}</h5>\n    <p>{`Since our plugin will create a pie chart, this helper function will be used to return an x,y coordinates of each wedge in the pie chart. The function accepts `}<inlineCode parentName=\"p\">{`radius`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`angle`}</inlineCode>{` as parameters and use them to calculate the coordinates of a point on a circle at a given angle on the perimeter of the circle.`}</p>\n    <p>{`Add the lines of code below to your file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function pointOnCircle(radius, angle) {\n    const radians = angle * 2. * Math.PI / 360.;\n    const xcoord = radius * Math.cos(radians);\n    const ycoord = radius * Math.sin(radians);\n    return xcoord + \",\" + ycoord;\n}\n`}</code></pre>\n    <p>{`This is just straight-up JavaScript; there's nothing specific to XD plugin APIs to cover here.`}</p>\n    <p>{`We won't cover the math in depth, here's an overview what this helper function does:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The angle is expressed in degrees. It must be converted to radians before passing it to the sine and cosine functions. More info: `}<a parentName=\"li\" {...{\n          \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos\"\n        }}>{`Math.cos`}</a>{`, `}<a parentName=\"li\" {...{\n          \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin\"\n        }}>{`Math.sin`}</a></li>\n      <li parentName=\"ul\">{`The function will return the coordinates as a string in the `}<inlineCode parentName=\"li\">{`x,y`}</inlineCode>{` format, which will be used to be inserted to the path data, which also has to be a string`}</li>\n    </ul>\n    <h5 {...{\n      \"id\": \"add-a-single-pie-wedge-to-the-scenegraph\"\n    }}>{`Add a single pie wedge to the scenegraph`}</h5>\n    <p>{`Our plugin will also need to be able to add a single pie wedge to the scenegraph.`}</p>\n    <p>{`Add the lines of code below to your file. Each of the numbered comments are explained below the code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function createWedge(selection, radius, startAngle, endAngle, color) { // [1]\n    const startPt = pointOnCircle(radius, startAngle);\n    const endPt = pointOnCircle(radius, endAngle);\n    const pathData = \\`M0,0 L\\${startPt} A\\${radius},\\${radius},0,0,1,\\${endPt} L0,0\\`; // [2]\n    const wedge = new Path(); // [3]\n    wedge.pathData = pathData; // [4]\n    wedge.fill = new Color(color); // [5]\n    wedge.translation = {x: radius, y: radius};  // [6]\n    selection.insertionParent.addChild(wedge); // [7]\n}\n`}</code></pre>\n    <ol>\n      <li parentName=\"ol\">{`This function accepts five arguments:`}\n        <ol parentName=\"li\">\n          <li parentName=\"ol\">{`The current selection in the scene graph (`}<inlineCode parentName=\"li\">{`selection`}</inlineCode>{`)`}</li>\n          <li parentName=\"ol\">{`The pie chart radius (`}<inlineCode parentName=\"li\">{`chartRadius`}</inlineCode>{`)`}</li>\n          <li parentName=\"ol\">{`The start radian of the wedge (`}<inlineCode parentName=\"li\">{`startAngle`}</inlineCode>{`)`}</li>\n          <li parentName=\"ol\">{`The end radian of the wedge (`}<inlineCode parentName=\"li\">{`endAngle`}</inlineCode>{`)`}</li>\n          <li parentName=\"ol\">{`The color of the wedge (`}<inlineCode parentName=\"li\">{`color`}</inlineCode>{`)`}</li>\n        </ol>\n      </li>\n      <li parentName=\"ol\">{`Based on these arguments, `}<inlineCode parentName=\"li\">{`pathData`}</inlineCode>{` is constructed. The pen is moved to the origin, a line is drawn to the first point on the edge of the circle, an arc is drawn to the second point on the edge of the circle, and then a line is drawn back to the origin. For more information on how to create path data, please refer to `}<a parentName=\"li\" {...{\n          \"href\": \"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths\"\n        }}>{`Paths`}</a></li>\n      <li parentName=\"ol\">{`Create a new instance of `}<inlineCode parentName=\"li\">{`Path`}</inlineCode></li>\n      <li parentName=\"ol\">{`Set `}<inlineCode parentName=\"li\">{`pathData`}</inlineCode></li>\n      <li parentName=\"ol\">{`Set the color of the path object`}</li>\n      <li parentName=\"ol\">{`Move the path object down and to the right by `}<inlineCode parentName=\"li\">{`radius`}</inlineCode>{` units.  As a result, the pie chart will appear with its top left corner positioned at `}<inlineCode parentName=\"li\">{`0,0`}</inlineCode></li>\n      <li parentName=\"ol\">{`Insert the path object into the currently-selected artboard`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"4-create-the-main-function\"\n    }}>{`4. Create the main function`}</h3>\n    <p>{`In this step, we'll build out the main function, `}<inlineCode parentName=\"p\">{`createLinesHandlerFunction`}</inlineCode>{`, that we added in the first step.`}</p>\n    <p>{`This function creates four wedges:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function createPieChartCommand(selection) {\n    createWedge(selection, 100, 0, 90, \"red\");\n    createWedge(selection, 100, 90, 135, \"blue\");\n    createWedge(selection, 100, 135, 225, \"yellow\");\n    createWedge(selection, 100, 225, 360, \"purple\");\n}\n`}</code></pre>\n    <p>{`Note that the end angle of each wedge matches the start angle of the next wedge. As a result, the wedges fit together to create a complete pie chart!`}</p>\n    <h3 {...{\n      \"id\": \"5-run-the-plugin\"\n    }}>{`5. Run the plugin`}</h3>\n    <p>{`Ater saving all your changes, reload the plugin in XD and run it.  The result should be similar to the following:`}</p>\n    <p><img alt=\"Created pie chart\" src={require(\"../../images/pie-chart.png\")} /></p>\n    <h2 {...{\n      \"id\": \"next-steps\"\n    }}>{`Next Steps`}</h2>\n    <p>{`Want to expand on what you learned here? Have a look at these references to see options for customizing this sample plugin:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/reference/scenegraph/#path\"\n        }}>{`Path`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/reference/Color/\"\n        }}>{`Color`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/reference/commands/\"\n        }}>{`Commands`}</a></li>\n    </ul>\n    <p>{`Ready to explore further? Take a look at our other resources:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/tutorials\"\n        }}>{`Tutorials`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/AdobeXD/plugin-samples\"\n        }}>{`Sample code repos`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}