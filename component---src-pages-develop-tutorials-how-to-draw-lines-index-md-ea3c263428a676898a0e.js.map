{"version":3,"sources":["webpack://uxp-xd/./src/pages/develop/tutorials/how-to-draw-lines/index.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-develop-tutorials-how-to-draw-lines-index-md-ea3c263428a676898a0e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"how-to-draw-lines\"\n    }}>{`How to draw lines`}</h1>\n    <p>{`This sample demonstrates how to create a plugin that adds colored lines to the user's document.`}</p>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Basic knowledge of HTML, CSS, and JavaScript`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/tutorials/quick-start/\"\n        }}>{`Quick Start Tutorial`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/tutorials/debugging/\"\n        }}>{`Debugging Tutorial`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"development-steps\"\n    }}>{`Development Steps`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Info`}</strong>{`\nComplete code for this plugin can be found `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/AdobeXD/Plugin-Samples/tree/master/how-to-draw-lines\"\n        }}>{`on GitHub`}</a>{`.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"1-prepare-your-plugin-scaffold\"\n    }}>{`1. Prepare your plugin scaffold`}</h3>\n    <p>{`First, edit the manifest file for the plugin you created in our `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/tutorials/quick-start/\"\n      }}>{`Quick Start Tutorial`}</a>{`.`}</p>\n    <p>{`Replace the `}<inlineCode parentName=\"p\">{`uiEntryPoints`}</inlineCode>{` field of the manifest with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"uiEntryPoints\": [\n    {\n        \"type\": \"menu\",\n        \"label\": \"Create lines\",\n        \"commandId\": \"createLinesCommand\"\n    }\n]\n`}</code></pre>\n    <p>{`If you're curious about what each entry means, `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/plugin-structure/manifest/\"\n      }}>{`see the manifest documentation`}</a>{`, where you can also learn about all manifest requirements for a plugin to be published in the XD Plugin Manager.`}</p>\n    <p>{`Then, update your `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file, mapping the manifest's `}<inlineCode parentName=\"p\">{`commandId`}</inlineCode>{` to a handler function.`}</p>\n    <p>{`Replace the content of your `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file with the following code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function createLinesCommand(selection) {\n  // The body of this function is added later\n}\n\nmodule.exports = {\n  commands: {\n    createLinesCommand,\n  },\n};\n`}</code></pre>\n    <p>{`The remaining steps in this tutorial describe additional edits to the `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file.`}</p>\n    <h3 {...{\n      \"id\": \"2-require-in-xd-api-dependencies\"\n    }}>{`2. Require in XD API dependencies`}</h3>\n    <p>{`For this tutorial, we just need access to two XD scenegraph classes and one XD module.`}</p>\n    <p>{`Add the following lines to the top of your `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Add this to the top of your main.js file\nconst { Line, Color } = require(\"scenegraph\");\nconst commands = require(\"commands\");\n`}</code></pre>\n    <p>{`Now the `}<inlineCode parentName=\"p\">{`Line`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Color`}</inlineCode>{` classes and `}<inlineCode parentName=\"p\">{`commands`}</inlineCode>{` module are required in and ready to be used.`}</p>\n    <h3 {...{\n      \"id\": \"3-create-a-helper-function\"\n    }}>{`3. Create a helper function`}</h3>\n    <p>{`Our plugin is going to assigning random colors to the lines we create!`}</p>\n    <p>{`Add the lines of code below to your file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function randomColor() {\n  const hexValues = [\"00\", \"33\", \"66\", \"99\", \"CC\", \"FF\"];\n  const color =\n    \"#\" +\n    Array.from(\n      { length: 3 },\n      (_) => hexValues[Math.floor(Math.random() * hexValues.length)]\n    ).join(\"\");\n  return color;\n}\n`}</code></pre>\n    <p>{`This function returns a web-friendly color hex value (e.g., \\`\"#FFFFFF\"). This is just straight-up JavaScript; there's nothing specific to XD plugin APIs to cover here.`}</p>\n    <h3 {...{\n      \"id\": \"4-create-line-data\"\n    }}>{`4. Create line data`}</h3>\n    <p>{`In this step, we're going to add a little more plain-old JavaScript. This time we'll add a data structure that will set us up to draw lines with the XD plugin API in the next step.`}</p>\n    <p>{`Add this code to your file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const lineData = [\n  { startX: 100, startY: 110, endX: 210, endY: 233 },\n  { startX: 210, startY: 233, endX: 320, endY: 156 },\n  { startX: 320, startY: 156, endX: 400, endY: 300 },\n  { startX: 400, startY: 300, endX: 500, endY: 120 },\n];\n`}</code></pre>\n    <p>{`A couple of things to note:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`In this example, the each line's `}<inlineCode parentName=\"li\">{`startX`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`startY`}</inlineCode>{` matches the former line's `}<inlineCode parentName=\"li\">{`endX`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`endY`}</inlineCode>{`. This ensures lines are connected to each other. But they don't `}<em parentName=\"li\">{`have`}</em>{` to connect; feel free to modifiy the data as you wish!`}</li>\n      <li parentName=\"ul\">{`The data structure here is important to note:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`lineData`}</inlineCode>{` is an array. This gives us a way to store coordinates for multiple lines. We'll loop over this array in the next step.`}</li>\n          <li parentName=\"ul\">{`The array contains multiple objects that will be passed, one at a time, to the `}<inlineCode parentName=\"li\">{`Line`}</inlineCode>{` API.`}</li>\n          <li parentName=\"ul\">{`Since we're drawing lines, each object has a `}<em parentName=\"li\">{`start`}</em>{` and `}<em parentName=\"li\">{`end`}</em>{` coordinates for X and Y.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <h3 {...{\n      \"id\": \"5-create-the-main-function\"\n    }}>{`5. Create the main function`}</h3>\n    <p>{`In this step, we'll build out the main function, `}<inlineCode parentName=\"p\">{`createLinesCommand`}</inlineCode>{`, that we added in the first step. Each of the numbered comments are explained below the code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function createLinesCommand(selection) {\n  // [1]\n\n  let lines = []; // [2]\n\n  lineData.forEach((data) => {\n    // [3]\n    const line = new Line(); // [4.i]\n\n    line.setStartEnd(\n      // [4.ii]\n      data.startX,\n      data.startY,\n      data.endX,\n      data.endY\n    );\n\n    line.strokeEnabled = true; // [4.iii]\n    line.stroke = new Color(randomColor()); // [4.iv]\n    line.strokeWidth = 3; // [4.v]\n\n    lines.push(line); // [4.vi]\n\n    selection.editContext.addChild(line); // [4.vii]\n  });\n\n  selection.items = lines; // [5]\n  commands.group(); // [6]\n}\n`}</code></pre>\n    <ol>\n      <li parentName=\"ol\">{`This function only needs the first `}<a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/plugin-development/plugin-structure/handlers/#contextual-arguments\"\n        }}>{`contextual argument`}</a>{`, `}<inlineCode parentName=\"li\">{`selection`}</inlineCode>{`, which gives access to the selection object inside XD.`}</li>\n      <li parentName=\"ol\">{`Create an empty array to contain all the `}<inlineCode parentName=\"li\">{`Line`}</inlineCode>{` objects we'll create. This array will be used in a later step.`}</li>\n      <li parentName=\"ol\">{`Loop over the `}<inlineCode parentName=\"li\">{`lineData`}</inlineCode>{` array, getting an individual `}<inlineCode parentName=\"li\">{`data`}</inlineCode>{` object each time through the loop.`}</li>\n      <li parentName=\"ol\">{`For each `}<inlineCode parentName=\"li\">{`data`}</inlineCode>{` object:`}\n        <ol parentName=\"li\">\n          <li parentName=\"ol\">{`Create a new instance of `}<inlineCode parentName=\"li\">{`Line`}</inlineCode>{`.`}</li>\n          <li parentName=\"ol\">{`Use the `}<inlineCode parentName=\"li\">{`Line`}</inlineCode>{` object's setter, `}<inlineCode parentName=\"li\">{`.setStartEnd`}</inlineCode>{`, to set the line data from our `}<inlineCode parentName=\"li\">{`data`}</inlineCode>{` object.`}</li>\n          <li parentName=\"ol\">{`Set the `}<inlineCode parentName=\"li\">{`strokeEnabled`}</inlineCode>{` property to `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` in order to draw a stroke for the line.`}</li>\n          <li parentName=\"ol\">{`Set the stroke color using the `}<inlineCode parentName=\"li\">{`randomColor`}</inlineCode>{` helper function.`}</li>\n          <li parentName=\"ol\">{`Set the width of the stroke using `}<inlineCode parentName=\"li\">{`strokeWidth`}</inlineCode>{` property.`}</li>\n          <li parentName=\"ol\">{`Append the line object into the `}<inlineCode parentName=\"li\">{`lines`}</inlineCode>{` array.`}</li>\n          <li parentName=\"ol\">{`Insert the line into the edit context using the `}<inlineCode parentName=\"li\">{`selection.editContext.addChild`}</inlineCode>{` method. This step adds the line to the document's scenegraph.`}</li>\n        </ol>\n      </li>\n      <li parentName=\"ol\">{`Now that all of the `}<inlineCode parentName=\"li\">{`Line`}</inlineCode>{` objects have been added to the scenegraph, set the document's current selection to be those `}<inlineCode parentName=\"li\">{`Line`}</inlineCode>{` objects.`}</li>\n      <li parentName=\"ol\">{`Use the `}<inlineCode parentName=\"li\">{`group`}</inlineCode>{` command to combine all of the currently-selected objects (the `}<inlineCode parentName=\"li\">{`Line`}</inlineCode>{` objects) into a single group object.`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"6-run-the-plugin\"\n    }}>{`6. Run the plugin`}</h3>\n    <p>{`After saving all of your changes, reload the plugin in XD and run it. The result should be similar to the following:`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"1000px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"133.75%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/uxp-xd/static/cef4618cea5ffd9218a660fea144dd55/cb523/lines.webp 320w\", \"/uxp-xd/static/cef4618cea5ffd9218a660fea144dd55/797b9/lines.webp 640w\", \"/uxp-xd/static/cef4618cea5ffd9218a660fea144dd55/e00f7/lines.webp 1000w\"],\n            \"sizes\": \"(max-width: 1000px) 100vw, 1000px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/uxp-xd/static/cef4618cea5ffd9218a660fea144dd55/72799/lines.png 320w\", \"/uxp-xd/static/cef4618cea5ffd9218a660fea144dd55/6af66/lines.png 640w\", \"/uxp-xd/static/cef4618cea5ffd9218a660fea144dd55/00d43/lines.png 1000w\"],\n            \"sizes\": \"(max-width: 1000px) 100vw, 1000px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/uxp-xd/static/cef4618cea5ffd9218a660fea144dd55/00d43/lines.png\",\n            \"alt\": \"Created lines\",\n            \"title\": \"Created lines\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}