(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{yGeG:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return r})),a.d(t,"default",(function(){return b}));var n=a("wx14"),d=a("zLVn"),c=(a("q1tI"),a("7ljp")),l=a("ndZU"),r=(a("qKvR"),{}),m={_frontmatter:r},i=l.a;function b(e){var t=e.components,a=Object(d.a)(e,["components"]);return Object(c.mdx)(i,Object(n.a)({},m,a,{components:t,mdxType:"MDXLayout"}),Object(c.mdx)("a",{name:"SceneNodeList"}),Object(c.mdx)("h2",{id:"scenenodelist"},"SceneNodeList"),Object(c.mdx)("p",null,"Represents the children of a scenenode. Typically accessed via the ",Object(c.mdx)("a",Object(n.a)({parentName:"p"},{href:"/uxp-xd/reference/scenegraph/#SceneNode-children"}),"SceneNode.children")," property."),Object(c.mdx)("p",null,"This is ",Object(c.mdx)("em",{parentName:"p"},"not an Array"),", so you must use ",Object(c.mdx)("a",Object(n.a)({parentName:"p"},{href:"#SceneNodeList-at"}),Object(c.mdx)("inlineCode",{parentName:"a"},"at(i)"))," instead of ",Object(c.mdx)("inlineCode",{parentName:"p"},"[i]")," to access children by index. It has a\nnumber of Array-like methods such as ",Object(c.mdx)("a",Object(n.a)({parentName:"p"},{href:"#SceneNodeList-forEach"}),"forEach")," for convenience, however. For best performance, iterate\nthe list using these methods rather than repeatedly calling ",Object(c.mdx)("inlineCode",{parentName:"p"},"at()"),"."),Object(c.mdx)("p",null,"Items in this list are ordered from lowest z order to highest."),Object(c.mdx)("p",null,Object(c.mdx)("strong",{parentName:"p"},"Kind"),": class  "),Object(c.mdx)("p",null,Object(c.mdx)("strong",{parentName:"p"},"Example")),Object(c.mdx)("pre",null,Object(c.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'let node = ...;\nconsole.log("Node has " + node.children.length + " children");\nconsole.log("First child: " + node.children.at(0));  // do not use `[0]` - it will not work!\nnode.children.forEach(function (childNode, i) {\n    ...\n});\n')),Object(c.mdx)("p",null,Object(c.mdx)("strong",{parentName:"p"},"See"),": ",Object(c.mdx)("a",Object(n.a)({parentName:"p"},{href:"/uxp-xd/reference/scenegraph/#SceneNode-children"}),"SceneNode.children"),"  "),Object(c.mdx)("ul",null,Object(c.mdx)("li",{parentName:"ul"},Object(c.mdx)("a",Object(n.a)({parentName:"li"},{href:"#SceneNodeList"}),"SceneNodeList"),Object(c.mdx)("ul",{parentName:"li"},Object(c.mdx)("li",{parentName:"ul"},Object(c.mdx)("a",Object(n.a)({parentName:"li"},{href:"#SceneNodeList-length"}),".length")," : ",Object(c.mdx)("inlineCode",{parentName:"li"},"number")),Object(c.mdx)("li",{parentName:"ul"},Object(c.mdx)("a",Object(n.a)({parentName:"li"},{href:"#SceneNodeList-forEach"}),".forEach(callback, thisArg)")," ⇒ ",Object(c.mdx)("inlineCode",{parentName:"li"},"void")),Object(c.mdx)("li",{parentName:"ul"},Object(c.mdx)("a",Object(n.a)({parentName:"li"},{href:"#SceneNodeList-forEachRight"}),".forEachRight(callback, thisArg)")," ⇒ ",Object(c.mdx)("inlineCode",{parentName:"li"},"void")),Object(c.mdx)("li",{parentName:"ul"},Object(c.mdx)("a",Object(n.a)({parentName:"li"},{href:"#SceneNodeList-filter"}),".filter(callback, thisArg)")," ⇒ ",Object(c.mdx)("inlineCode",{parentName:"li"},"Array.&lt;!SceneNode&gt;")),Object(c.mdx)("li",{parentName:"ul"},Object(c.mdx)("a",Object(n.a)({parentName:"li"},{href:"#SceneNodeList-map"}),".map(callback, thisArg)")," ⇒ ",Object(c.mdx)("inlineCode",{parentName:"li"},"Array.&lt;\\*&gt;")),Object(c.mdx)("li",{parentName:"ul"},Object(c.mdx)("a",Object(n.a)({parentName:"li"},{href:"#SceneNodeList-some"}),".some(callback, thisArg)")," ⇒ ",Object(c.mdx)("inlineCode",{parentName:"li"},"boolean")),Object(c.mdx)("li",{parentName:"ul"},Object(c.mdx)("a",Object(n.a)({parentName:"li"},{href:"#SceneNodeList-at"}),".at()")," ⇒ ",Object(c.mdx)("inlineCode",{parentName:"li"},"SceneNode"))))),Object(c.mdx)("hr",null),Object(c.mdx)("a",{name:"SceneNodeList-length"}),Object(c.mdx)("h3",{id:"scenenodelistlength--number"},"sceneNodeList.length : ",Object(c.mdx)("inlineCode",{parentName:"h3"},"number")),Object(c.mdx)("p",null,"Number of children in the list."),Object(c.mdx)("p",null,Object(c.mdx)("strong",{parentName:"p"},"Kind"),": instance property of ",Object(c.mdx)("a",Object(n.a)({parentName:"p"},{href:"#SceneNodeList"}),Object(c.mdx)("inlineCode",{parentName:"a"},"SceneNodeList")),Object(c.mdx)("br",{parentName:"p"}),"\n",Object(c.mdx)("strong",{parentName:"p"},"Read only"),": true  "),Object(c.mdx)("hr",null),Object(c.mdx)("a",{name:"SceneNodeList-forEach"}),Object(c.mdx)("h3",{id:"scenenodelistforeachcallback-thisarg-⇒-void"},"sceneNodeList.forEach(callback, thisArg) ⇒ ",Object(c.mdx)("inlineCode",{parentName:"h3"},"void")),Object(c.mdx)("p",null,"Iterate all children in the list."),Object(c.mdx)("p",null,Object(c.mdx)("strong",{parentName:"p"},"Kind"),": instance method of ",Object(c.mdx)("a",Object(n.a)({parentName:"p"},{href:"#SceneNodeList"}),Object(c.mdx)("inlineCode",{parentName:"a"},"SceneNodeList")),"  "),Object(c.mdx)("table",null,Object(c.mdx)("thead",{parentName:"table"},Object(c.mdx)("tr",{parentName:"thead"},Object(c.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Param"),Object(c.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.mdx)("tbody",{parentName:"table"},Object(c.mdx)("tr",{parentName:"tbody"},Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"callback"),Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.mdx)("inlineCode",{parentName:"td"},"!function(!SceneNode, number)")),Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"Callback, passed each child node and its index.")),Object(c.mdx)("tr",{parentName:"tbody"},Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"thisArg"),Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.mdx)("inlineCode",{parentName:"td"},"?Object")),Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"Optional value for ",Object(c.mdx)("inlineCode",{parentName:"td"},"this")," when executing the callback.")))),Object(c.mdx)("hr",null),Object(c.mdx)("a",{name:"SceneNodeList-forEachRight"}),Object(c.mdx)("h3",{id:"scenenodelistforeachrightcallback-thisarg-⇒-void"},"sceneNodeList.forEachRight(callback, thisArg) ⇒ ",Object(c.mdx)("inlineCode",{parentName:"h3"},"void")),Object(c.mdx)("p",null,"Iterate all children in the list, in reverse order (highest z order to lowest)."),Object(c.mdx)("p",null,Object(c.mdx)("strong",{parentName:"p"},"Kind"),": instance method of ",Object(c.mdx)("a",Object(n.a)({parentName:"p"},{href:"#SceneNodeList"}),Object(c.mdx)("inlineCode",{parentName:"a"},"SceneNodeList")),"  "),Object(c.mdx)("table",null,Object(c.mdx)("thead",{parentName:"table"},Object(c.mdx)("tr",{parentName:"thead"},Object(c.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Param"),Object(c.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.mdx)("tbody",{parentName:"table"},Object(c.mdx)("tr",{parentName:"tbody"},Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"callback"),Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.mdx)("inlineCode",{parentName:"td"},"!function(!SceneNode, number)")),Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"Callback, passed each child node and its index.")),Object(c.mdx)("tr",{parentName:"tbody"},Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"thisArg"),Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.mdx)("inlineCode",{parentName:"td"},"?Object")),Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"Optional value for ",Object(c.mdx)("inlineCode",{parentName:"td"},"this")," when executing the callback.")))),Object(c.mdx)("hr",null),Object(c.mdx)("a",{name:"SceneNodeList-filter"}),Object(c.mdx)("h3",{id:"scenenodelistfiltercallback-thisarg-⇒-arrayltscenenodegt"},"sceneNodeList.filter(callback, thisArg) ⇒ ",Object(c.mdx)("inlineCode",{parentName:"h3"},"Array.&lt;!SceneNode&gt;")),Object(c.mdx)("p",null,"Iterates all children and returns an array of just the children that passed the filter function's test."),Object(c.mdx)("p",null,Object(c.mdx)("strong",{parentName:"p"},"Kind"),": instance method of ",Object(c.mdx)("a",Object(n.a)({parentName:"p"},{href:"#SceneNodeList"}),Object(c.mdx)("inlineCode",{parentName:"a"},"SceneNodeList")),"  "),Object(c.mdx)("table",null,Object(c.mdx)("thead",{parentName:"table"},Object(c.mdx)("tr",{parentName:"thead"},Object(c.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Param"),Object(c.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.mdx)("tbody",{parentName:"table"},Object(c.mdx)("tr",{parentName:"tbody"},Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"callback"),Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.mdx)("inlineCode",{parentName:"td"},"!function(!SceneNode, number): boolean")),Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"Filter function, passed each child node and its index.")),Object(c.mdx)("tr",{parentName:"tbody"},Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"thisArg"),Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.mdx)("inlineCode",{parentName:"td"},"?Object")),Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"Optional value for ",Object(c.mdx)("inlineCode",{parentName:"td"},"this")," when executing the callback.")))),Object(c.mdx)("hr",null),Object(c.mdx)("a",{name:"SceneNodeList-map"}),Object(c.mdx)("h3",{id:"scenenodelistmapcallback-thisarg-⇒-arrayltgt"},"sceneNodeList.map(callback, thisArg) ⇒ ",Object(c.mdx)("inlineCode",{parentName:"h3"},"Array.&lt;\\*&gt;")),Object(c.mdx)("p",null,"Iterates all children and returns an array of the map function's result value for each child node."),Object(c.mdx)("p",null,Object(c.mdx)("strong",{parentName:"p"},"Kind"),": instance method of ",Object(c.mdx)("a",Object(n.a)({parentName:"p"},{href:"#SceneNodeList"}),Object(c.mdx)("inlineCode",{parentName:"a"},"SceneNodeList")),"  "),Object(c.mdx)("table",null,Object(c.mdx)("thead",{parentName:"table"},Object(c.mdx)("tr",{parentName:"thead"},Object(c.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Param"),Object(c.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.mdx)("tbody",{parentName:"table"},Object(c.mdx)("tr",{parentName:"tbody"},Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"callback"),Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.mdx)("inlineCode",{parentName:"td"},"!function(!SceneNode, number): *")),Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"Map function, passed each child node and its index.")),Object(c.mdx)("tr",{parentName:"tbody"},Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"thisArg"),Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.mdx)("inlineCode",{parentName:"td"},"?Object")),Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"Optional value for ",Object(c.mdx)("inlineCode",{parentName:"td"},"this")," when executing the callback.")))),Object(c.mdx)("hr",null),Object(c.mdx)("a",{name:"SceneNodeList-some"}),Object(c.mdx)("h3",{id:"scenenodelistsomecallback-thisarg-⇒-boolean"},"sceneNodeList.some(callback, thisArg) ⇒ ",Object(c.mdx)("inlineCode",{parentName:"h3"},"boolean")),Object(c.mdx)("p",null,"Iterates children until the test returns true for at least one child."),Object(c.mdx)("p",null,Object(c.mdx)("strong",{parentName:"p"},"Kind"),": instance method of ",Object(c.mdx)("a",Object(n.a)({parentName:"p"},{href:"#SceneNodeList"}),Object(c.mdx)("inlineCode",{parentName:"a"},"SceneNodeList")),Object(c.mdx)("br",{parentName:"p"}),"\n",Object(c.mdx)("strong",{parentName:"p"},"Returns"),": ",Object(c.mdx)("inlineCode",{parentName:"p"},"boolean")," - True if the test function returned true for at least one child.  "),Object(c.mdx)("table",null,Object(c.mdx)("thead",{parentName:"table"},Object(c.mdx)("tr",{parentName:"thead"},Object(c.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Param"),Object(c.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.mdx)("tbody",{parentName:"table"},Object(c.mdx)("tr",{parentName:"tbody"},Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"callback"),Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.mdx)("inlineCode",{parentName:"td"},"!function(!SceneNode, number): boolean")),Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"Test function, passed each child node and its index.")),Object(c.mdx)("tr",{parentName:"tbody"},Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"thisArg"),Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.mdx)("inlineCode",{parentName:"td"},"?Object")),Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"Optional value for ",Object(c.mdx)("inlineCode",{parentName:"td"},"this")," when executing the callback.")))),Object(c.mdx)("hr",null),Object(c.mdx)("a",{name:"SceneNodeList-at"}),Object(c.mdx)("h3",{id:"scenenodelistat-⇒-scenenode"},"sceneNodeList.at() ⇒ ",Object(c.mdx)("inlineCode",{parentName:"h3"},"SceneNode")),Object(c.mdx)("p",null,"Note: calling ",Object(c.mdx)("inlineCode",{parentName:"p"},"at()")," repeatedly (e.g. in a ",Object(c.mdx)("inlineCode",{parentName:"p"},"for")," loop) is not as fast as using SceneNodeList's iteration methods such as ",Object(c.mdx)("inlineCode",{parentName:"p"},"forEach()"),",\n",Object(c.mdx)("inlineCode",{parentName:"p"},"some()"),", or ",Object(c.mdx)("inlineCode",{parentName:"p"},"map()"),"."),Object(c.mdx)("p",null,Object(c.mdx)("strong",{parentName:"p"},"Kind"),": instance method of ",Object(c.mdx)("a",Object(n.a)({parentName:"p"},{href:"#SceneNodeList"}),Object(c.mdx)("inlineCode",{parentName:"a"},"SceneNodeList")),Object(c.mdx)("br",{parentName:"p"}),"\n",Object(c.mdx)("strong",{parentName:"p"},"Returns"),": ",Object(c.mdx)("inlineCode",{parentName:"p"},"?SceneNode")," - Child node at the specified index in the list, or null if index is out of bounds.  "),Object(c.mdx)("table",null,Object(c.mdx)("thead",{parentName:"table"},Object(c.mdx)("tr",{parentName:"thead"},Object(c.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Param"),Object(c.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"))),Object(c.mdx)("tbody",{parentName:"table"},Object(c.mdx)("tr",{parentName:"tbody"},Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"index"),Object(c.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.mdx)("inlineCode",{parentName:"td"},"number"))))),Object(c.mdx)("hr",null))}b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-develop-reference-scene-node-list-md-381bf68a607875d214c1.js.map