"use strict";(self.webpackChunkuxp_xd=self.webpackChunkuxp_xd||[]).push([[6968],{1951:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return i},default:function(){return s}});var n=a(87462),r=a(63366),d=(a(15007),a(64983)),l=a(91515),o=["components"],i={},m={_frontmatter:i},p=l.Z;function s(e){var t=e.components,a=(0,r.Z)(e,o);return(0,d.mdx)(p,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,d.mdx)("h1",{id:"interactions"},"interactions"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Since"),": XD 19+ (some APIs added later)"),(0,d.mdx)("p",null,"The ",(0,d.mdx)("inlineCode",{parentName:"p"},"interactions")," module and related APIs provide ",(0,d.mdx)("em",{parentName:"p"},"read only")," information about the document's interactive prototype mode, including:"),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("p",{parentName:"li"},'The blue "wires" seen in XD\'s prototyping UI, known as "interactions," which specify gestures/events which trigger actions to\noccur in the prototype. Accessible as a single consolidated global listing via this module\'s ',(0,d.mdx)("a",{parentName:"p",href:"#allinteractions"},"allInteractions")," API,\nor you can access information from specific nodes in the scenegraph via ",(0,d.mdx)("a",{parentName:"p",href:"/uxp-xd/develop/reference/SceneNode/#triggeredinteractions"},"SceneNode.triggeredInteractions"),"\nand ",(0,d.mdx)("a",{parentName:"p",href:"/uxp-xd/develop/reference/Artboard/#incominginteractions"},"Artboard.incomingInteractions"),".")),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("p",{parentName:"li"},"Designers can author multiple prototype or interaction flows in a single document and publish unique shareable links for each flow. Developers can access all document flows using the ",(0,d.mdx)("a",{parentName:"p",href:"#flows"},"flows")," API. With multiple flow support the ",(0,d.mdx)("a",{parentName:"p",href:"#homeartboard"},"homeArtboard")," API is being deprecated as XD no longer has a single home artboard restriction.")),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("p",{parentName:"li"},"Properties that affect Artboard scrolling behavior: Artboard ",(0,d.mdx)("a",{parentName:"p",href:"/uxp-xd/develop/reference/Artboard/#viewportheight"},"viewportHeight")," and\nnode ",(0,d.mdx)("a",{parentName:"p",href:"/uxp-xd/develop/reference/SceneNode/#fixedwhenscrolling"},"fixedWhenScrolling"),"."))),(0,d.mdx)("blockquote",null,(0,d.mdx)("p",{parentName:"blockquote"},(0,d.mdx)("strong",{parentName:"p"},"Tip"),"\nInteractions are a ",(0,d.mdx)("strong",{parentName:"p"},"fast-changing area")," in XD. APIs here have a higher likelihood of becoming deprecated, or lagging behind new XD features, than other parts of XD's plugin APIs.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-js"},'// Get all interactions in the entire document (grouped by triggering node)\nvar allInteractions = require("interactions").allInteractions;\n\n// Get interactions triggered by the selected node\nvar nodeInteractions = selection.items[0].triggeredInteractions;\n\n// Get all interactions leading to a particular artboard\nvar artboard = ...\nvar interactionsToArtboard = artboard.incomingInteractions;\n\n// Print out details of one particular interaction\nvar interaction = ...\nconsole.log("Trigger: " + interaction.trigger.type + " -> Action: " + interaction.action.type);\n')),(0,d.mdx)("h2",{id:"typedefs"},"Typedefs"),(0,d.mdx)("h3",{id:"typedef-interaction"},"Typedef Interaction"),(0,d.mdx)("p",null,"An interaction consists of a Trigger + Action pair and is attached to a single, specific scenenode."),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Property"),(0,d.mdx)("th",{parentName:"tr",align:null},"Type"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"trigger"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"#typedef-trigger"},"Trigger")),(0,d.mdx)("td",{parentName:"tr",align:null},"User gesture or other event which will trigger the action.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"action"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"#typedef-action"},"Action")),(0,d.mdx)("td",{parentName:"tr",align:null},"Action that occurs.")))),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example:")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-js"},'{\n    trigger: {\n        type: "tap"\n    },\n    action: {\n        type: "goToArtboard",\n        destination: /* Artboard node */,\n        preserveScrollPosition: false,\n        transition: {\n            type: "dissolve",\n            duration: 0.4,\n            easing: "ease-out"\n        }\n    }\n}\n')),(0,d.mdx)("blockquote",null,(0,d.mdx)("p",{parentName:"blockquote"},(0,d.mdx)("strong",{parentName:"p"},"Tip"),"\nNote: Interaction objects are ",(0,d.mdx)("em",{parentName:"p"},"not")," plain JSON -- they may reference scenenodes (as seen above) and other strongly-typed objects.")),(0,d.mdx)("hr",null),(0,d.mdx)("h3",{id:"typedef-trigger"},"Typedef Trigger"),(0,d.mdx)("p",null,"Event which triggers an interaction."),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Property"),(0,d.mdx)("th",{parentName:"tr",align:null},"Type"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"type")),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"string")),(0,d.mdx)("td",{parentName:"tr",align:null},"One of the trigger types listed below.")))),(0,d.mdx)("blockquote",null,(0,d.mdx)("p",{parentName:"blockquote"},(0,d.mdx)("strong",{parentName:"p"},"Tip"),"\nNote: Additional trigger types may be added in the future. Always be sure to have a default case for unknown triggers when\nworking with Interaction objects.")),(0,d.mdx)("h4",{id:"tap"},'"tap"'),(0,d.mdx)("p",null,"When the user clicks or taps on a scenenode."),(0,d.mdx)("h4",{id:"drag"},'"drag"'),(0,d.mdx)("p",null,"When the user drags or swipes a scenenode. Can only trigger a ",(0,d.mdx)("inlineCode",{parentName:"p"},"goToArtboard")," action with the ",(0,d.mdx)("inlineCode",{parentName:"p"},"autoAnimate")," transition style."),(0,d.mdx)("h4",{id:"time"},'"time"'),(0,d.mdx)("p",null,"Once a set amount of time elapses (this trigger type only exists on Artboard nodes). Additional Trigger properties:"),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Property"),(0,d.mdx)("th",{parentName:"tr",align:null},"Type"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"delay"),(0,d.mdx)("td",{parentName:"tr",align:null},"number"),(0,d.mdx)("td",{parentName:"tr",align:null},"Delay time in ms.")))),(0,d.mdx)("h4",{id:"voice"},'"voice"'),(0,d.mdx)("p",null,"When the user speaks a specific voice command. Additional Trigger properties:"),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Property"),(0,d.mdx)("th",{parentName:"tr",align:null},"Type"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"speechCommand"),(0,d.mdx)("td",{parentName:"tr",align:null},"string"),(0,d.mdx)("td",{parentName:"tr",align:null},"Phrase the user speaks to trigger this command.")))),(0,d.mdx)("hr",null),(0,d.mdx)("h3",{id:"typedef-action"},"Typedef Action"),(0,d.mdx)("p",null,"Action performed when the trigger occurs."),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Property"),(0,d.mdx)("th",{parentName:"tr",align:null},"Type"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"type"),(0,d.mdx)("td",{parentName:"tr",align:null},"string"),(0,d.mdx)("td",{parentName:"tr",align:null},"One of the action types listed below.")))),(0,d.mdx)("blockquote",null,(0,d.mdx)("p",{parentName:"blockquote"},(0,d.mdx)("strong",{parentName:"p"},"Tip"),"\nNote: Additional action types may be added in the future. Always be sure to have a default case for unknown actions when\nworking with Interaction objects.")),(0,d.mdx)("h4",{id:"gotoartboard"},'"goToArtboard"'),(0,d.mdx)("p",null,"Navigate the entire screen to view a different artboard. Additional Action properties:"),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Property"),(0,d.mdx)("th",{parentName:"tr",align:null},"Type"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"destination"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/uxp-xd/develop/reference/Artboard"},"Artboard")),(0,d.mdx)("td",{parentName:"tr",align:null},"Artboard to navigate to.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"transition"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"#typedef-transition"},"Transition")),(0,d.mdx)("td",{parentName:"tr",align:null},"Animation style with which the view transitions from the old Artboard to the new one.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"preserveScrollPosition"),(0,d.mdx)("td",{parentName:"tr",align:null},"boolean"),(0,d.mdx)("td",{parentName:"tr",align:null},"If both Artboards are ",(0,d.mdx)("a",{parentName:"td",href:"/uxp-xd/develop/reference/Artboard/#viewportheight"},"taller than the viewport"),", attempts to keep the user's current scroll position the same as in the outgoing artboard.")))),(0,d.mdx)("h4",{id:"overlay"},'"overlay"'),(0,d.mdx)("p",null,"Displays a second artboard overlaid on top of the current one. Additional Action properties:"),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Property"),(0,d.mdx)("th",{parentName:"tr",align:null},"Type"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"overlay"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/uxp-xd/develop/reference/Artboard"},"Artboard")),(0,d.mdx)("td",{parentName:"tr",align:null},"Artboard to show on top.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"transition"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"#typedef-transition"},"Transition")),(0,d.mdx)("td",{parentName:"tr",align:null},"Animation style in which the second Artboard transitions into view. Only certain transition types are allowed for overlays.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"overlayTopLeft"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"{x:number, y:number}")),(0,d.mdx)("td",{parentName:"tr",align:null},"Position of the overlay Artboard, in the current/base Artboard's coordinate space.")))),(0,d.mdx)("h4",{id:"goback"},'"goBack"'),(0,d.mdx)("p",null,"Reverse the last ",(0,d.mdx)("inlineCode",{parentName:"p"},'"goToArtboard"')," or ",(0,d.mdx)("inlineCode",{parentName:"p"},'"overlay"')," action, replaying in reverse whatever transition it used."),(0,d.mdx)("h4",{id:"speak"},'"speak"'),(0,d.mdx)("p",null,"Speak with audio output to the user. Additional Action properties:"),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Property"),(0,d.mdx)("th",{parentName:"tr",align:null},"Type"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"speechOutput"),(0,d.mdx)("td",{parentName:"tr",align:null},"string"),(0,d.mdx)("td",{parentName:"tr",align:null},"Phrase to speak to the user.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"locale"),(0,d.mdx)("td",{parentName:"tr",align:null},"string"),(0,d.mdx)("td",{parentName:"tr",align:null},"Locale determines the pronounciation and accent of the digital voice. Includes both language ",(0,d.mdx)("em",{parentName:"td"},"and"),' region (e.g. "en-us").')),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"voice"),(0,d.mdx)("td",{parentName:"tr",align:null},"string"),(0,d.mdx)("td",{parentName:"tr",align:null},'"Persona" of the digital voice to use. Available personas vary by locale.')))),(0,d.mdx)("hr",null),(0,d.mdx)("h3",{id:"typedef-transition"},"Typedef Transition"),(0,d.mdx)("p",null,"Animation style with which ",(0,d.mdx)("inlineCode",{parentName:"p"},'"goToArtboard"')," and ",(0,d.mdx)("inlineCode",{parentName:"p"},'"overlay"')," actions transition from/to Artboards."),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Property"),(0,d.mdx)("th",{parentName:"tr",align:null},"Type"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"type"),(0,d.mdx)("td",{parentName:"tr",align:null},"string"),(0,d.mdx)("td",{parentName:"tr",align:null},"One of: ",(0,d.mdx)("inlineCode",{parentName:"td"},'"autoAnimate"'),", ",(0,d.mdx)("inlineCode",{parentName:"td"},'"dissolve"'),", ",(0,d.mdx)("inlineCode",{parentName:"td"},'"push"'),", ",(0,d.mdx)("inlineCode",{parentName:"td"},'"slide"'),", ",(0,d.mdx)("inlineCode",{parentName:"td"},'"none"'))),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"fromSide"),(0,d.mdx)("td",{parentName:"tr",align:null},"string"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("em",{parentName:"td"},'(If type = "push" or "slide").')," One of: ",(0,d.mdx)("inlineCode",{parentName:"td"},'"L"'),", ",(0,d.mdx)("inlineCode",{parentName:"td"},'"R"'),", ",(0,d.mdx)("inlineCode",{parentName:"td"},'"T"'),", ",(0,d.mdx)("inlineCode",{parentName:"td"},'"B"'))),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"duration"),(0,d.mdx)("td",{parentName:"tr",align:null},"number"),(0,d.mdx)("td",{parentName:"tr",align:null},"Length of animation in seconds.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"easing"),(0,d.mdx)("td",{parentName:"tr",align:null},"string"),(0,d.mdx)("td",{parentName:"tr",align:null},"One of: ",(0,d.mdx)("inlineCode",{parentName:"td"},'"linear"'),", ",(0,d.mdx)("inlineCode",{parentName:"td"},'"ease-in"'),", ",(0,d.mdx)("inlineCode",{parentName:"td"},'"ease-out"'),", ",(0,d.mdx)("inlineCode",{parentName:"td"},'"ease-in-out"'),", ",(0,d.mdx)("inlineCode",{parentName:"td"},'"wind-up"'),", ",(0,d.mdx)("inlineCode",{parentName:"td"},'"bounce"'),", ",(0,d.mdx)("inlineCode",{parentName:"td"},'"snap"'))))),(0,d.mdx)("h3",{id:"typedef-flowinfo"},"Typedef FlowInfo"),(0,d.mdx)("p",null,"Information related to a particular flow"),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Property"),(0,d.mdx)("th",{parentName:"tr",align:null},"Type"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"name"),(0,d.mdx)("td",{parentName:"tr",align:null},"string"),(0,d.mdx)("td",{parentName:"tr",align:null},"Auto-generated or user-defined label for a particular flow.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"homeArtboard"),(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("a",{parentName:"td",href:"/uxp-xd/develop/reference/Artboard"},"Artboard")),(0,d.mdx)("td",{parentName:"tr",align:null},"Artboard from which a particular flow or a prototype experience begins.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"url"),(0,d.mdx)("td",{parentName:"tr",align:null},"string"),(0,d.mdx)("td",{parentName:"tr",align:null},"URL is the latest published link associated with a particular flow and can be ",(0,d.mdx)("inlineCode",{parentName:"td"},"null")," in case no link is published for that flow.")))),(0,d.mdx)("p",null,"NOTE: All ",(0,d.mdx)("inlineCode",{parentName:"p"},"url")," returned via ",(0,d.mdx)("a",{parentName:"p",href:"#flows"},"flows")," are related to published flows and are usually a subset of the URLs returned via ",(0,d.mdx)("a",{parentName:"p",href:"/uxp-xd/develop/reference/cloud/#getsharedartifacts"},"getSharedArtifacts"),". However, the reverse may or may not always hold true."),(0,d.mdx)("h2",{id:"homeartboard"},"homeArtboard"),(0,d.mdx)("p",null,"▸ homeArtboard: ?",(0,d.mdx)("a",{parentName:"p",href:"/uxp-xd/develop/reference/Artboard"},"Artboard")),(0,d.mdx)("p",null,"The starting Artboard seen when the interactive prototype is launched."),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Deprecated"),": XD 33 - Please use ",(0,d.mdx)("a",{parentName:"p",href:"#flows"},"flows")," which supports multple flows."),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Since"),": XD 32"),(0,d.mdx)("p",null,"In case there are multiple interactive prototype experiences (flows), implying multiple home artboards, this API only returns the top-left artboard among all of those home artboards."),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Kind"),": static property of ",(0,d.mdx)("a",{parentName:"p",href:"#module_interactions"},"interactions"),"\n",(0,d.mdx)("strong",{parentName:"p"},"Read only"),": true"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"See"),": ",(0,d.mdx)("a",{parentName:"p",href:"/uxp-xd/develop/reference/Artboard/#ishomeartboard"},"Artboard.isHomeArtboard")),(0,d.mdx)("h2",{id:"flows"},"flows"),(0,d.mdx)("p",null,"▸ flows: ",(0,d.mdx)("inlineCode",{parentName:"p"},"Array<"),(0,d.mdx)("a",{parentName:"p",href:"#typedef-flowinfo"},"FlowInfo"),(0,d.mdx)("inlineCode",{parentName:"p"},">")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Since"),": XD 33"),(0,d.mdx)("p",null,"Returns a collection of information on ",(0,d.mdx)("em",{parentName:"p"},"all")," flows across the entire document."),(0,d.mdx)("p",null,"A ",(0,d.mdx)("inlineCode",{parentName:"p"},"flow")," is a series or set of artboards starting from one artboard (called a home artboard), which are connected to other artboards or screens via wires or interactions. A document can have zero or multiple (one or more than one) flows and can therefore have zero or multiple home artboards. Each entry in the return array represents a ",(0,d.mdx)("inlineCode",{parentName:"p"},"FlowInfo")," object."),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Kind"),": static property of ",(0,d.mdx)("a",{parentName:"p",href:"#module_interactions"},"interactions"),"\n",(0,d.mdx)("strong",{parentName:"p"},"Read only"),": true"),(0,d.mdx)("h2",{id:"allinteractions"},"allInteractions"),(0,d.mdx)("p",null,"▸ allInteractions: ",(0,d.mdx)("inlineCode",{parentName:"p"},"Array<{triggerNode:")," ",(0,d.mdx)("a",{parentName:"p",href:"/uxp-xd/develop/reference/SceneNode"},"SceneNode"),(0,d.mdx)("inlineCode",{parentName:"p"},", interactions: Array<"),(0,d.mdx)("a",{parentName:"p",href:"#typedef-interaction"},"Interaction"),(0,d.mdx)("inlineCode",{parentName:"p"},"}>")),(0,d.mdx)("p",null,"Returns a collection of ",(0,d.mdx)("em",{parentName:"p"},"all")," interactions across the entire document, grouped by triggering scenenode. Each entry in this array\nspecifies a ",(0,d.mdx)("inlineCode",{parentName:"p"},"triggerNode")," and the result of getting ",(0,d.mdx)("a",{parentName:"p",href:"/uxp-xd/develop/reference/SceneNode/#triggeredinteractions"},"triggerNode.triggeredInteractions"),"."),(0,d.mdx)("p",null,"May include interactions that are impossible to trigger because the trigger node (or one of its ancestors) has ",(0,d.mdx)("inlineCode",{parentName:"p"},"visible")," = false."),(0,d.mdx)("blockquote",null,(0,d.mdx)("p",{parentName:"blockquote"},(0,d.mdx)("strong",{parentName:"p"},"Tip"),"\nCurrently, this API excludes some types of interactions: keypress/gamepad, scrolling, hover, component state transitions, or non-speech audio playback.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Kind"),": static property of ",(0,d.mdx)("a",{parentName:"p",href:"#module_interactions"},"interactions"),"\n",(0,d.mdx)("strong",{parentName:"p"},"Read only"),": true"))}s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-develop-reference-interactions-md-91e0aff28176925ebd5b.js.map