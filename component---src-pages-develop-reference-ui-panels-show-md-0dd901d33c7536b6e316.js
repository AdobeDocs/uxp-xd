"use strict";(self.webpackChunkuxp_xd=self.webpackChunkuxp_xd||[]).push([[8493],{7977:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return r},default:function(){return s}});var a=t(87462),o=t(45987),l=(t(15007),t(64983)),p=t(91515);const d=["components"],r={},i={_frontmatter:r},c=p.Z;function s(e){let{components:n}=e,t=(0,o.Z)(e,d);return(0,l.mdx)(c,(0,a.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)("h1",{id:"panel-show-callback"},"Panel show() callback"),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"show()")," function is the one lifecycle method in ",(0,l.mdx)("a",{parentName:"p",href:"/uxp-xd/develop/plugin-development/plugin-structure/handlers/#panel"},"panel objects")," that is ",(0,l.mdx)("strong",{parentName:"p"},"required"),". XD calls ",(0,l.mdx)("inlineCode",{parentName:"p"},"show()")," each time the user opens your panel."),(0,l.mdx)("p",null,"To populate the panel with UI elements, add DOM nodes to the ",(0,l.mdx)("inlineCode",{parentName:"p"},"event.node")," root node that is provided. There are two ways you can use ",(0,l.mdx)("inlineCode",{parentName:"p"},"show()")," to create your panel UI:"),(0,l.mdx)("h3",{id:"recreate-panel-on-each-show"},"Recreate panel on each show()"),(0,l.mdx)("p",null,"For simple panels, you can create the panel UI each time it's shown and throw it away each time it's hidden:"),(0,l.mdx)("p",null,"Here is a simple example:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},'function show(event) {\n  const content = "<p>Hello, World</p>";\n  const panel = document.createElement("div");\n  panel.innerHTML = content;\n\n  event.node.appendChild(panel);\n}\n\nfunction hide(event) {\n  event.node.firstChild.remove();\n}\n')),(0,l.mdx)("h3",{id:"create-panel-on-first-show-then-reuse"},"Create panel on first show(), then reuse"),(0,l.mdx)("p",null,"For panels with more complex state, it may be simpler to continue reusing the same panel DOM nodes:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},'let panel;\n\nfunction show(event) {\n  if (panel) {\n    return;\n  }\n\n  const content = "<p>Hello, World</p>";\n  panel = document.createElement("div");\n  panel.innerHTML = content;\n\n  event.node.appendChild(panel);\n}\n\nfunction hide(event) {\n  // nothing to do here\n}\n')),(0,l.mdx)("p",null,"Note: once the panel has been created you don't need to touch the DOM at all for hide & show to work correctly -- XD takes care of closing and reopening the panel UI's container automatically."),(0,l.mdx)("h3",{id:"panel-content-updating"},"Panel content updating"),(0,l.mdx)("p",null,"Whichever method you use, you'll typically also need to implement the ",(0,l.mdx)("a",{parentName:"p",href:"/uxp-xd/develop/reference/ui/panels/update/"},"update() callback")," in order to update your panel UI if the selection or XD document content changes while the panel is already open."))}s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-develop-reference-ui-panels-show-md-0dd901d33c7536b6e316.js.map