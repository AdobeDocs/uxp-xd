{"version":3,"file":"component---src-pages-develop-tutorials-how-to-style-text-index-md-c82d73bda86f7050acd1.js","mappings":"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","sources":["webpack://uxp-xd/./src/pages/develop/tutorials/how-to-style-text/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"how-to-style-text\"\n    }}>{`How to style text`}</h1>\n    <p>{`Creating styled text in Adobe XD is easy! In this tutorial, we'll show you how to create a text element with a specific color and font size, and also a text element with multiple inline colors.`}</p>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Basic knowledge of HTML, CSS, and JavaScript`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/tutorials/quick-start/\"\n        }}>{`Quick Start Tutorial`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/tutorials/debugging/\"\n        }}>{`Debugging Tutorial`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"development-steps\"\n    }}>{`Development Steps`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Info`}</strong>{`\nComplete code for this plugin can be found `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/AdobeXD/Plugin-Samples/tree/master/how-to-style-text\"\n        }}>{`on GitHub`}</a>{`.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"1-prepare-your-plugin-scaffold\"\n    }}>{`1. Prepare your plugin scaffold`}</h3>\n    <p>{`First, edit the manifest file for the plugin you created in our `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/tutorials/quick-start/\"\n      }}>{`Quick Start Tutorial`}</a>{`.`}</p>\n    <p>{`Replace the `}<inlineCode parentName=\"p\">{`uiEntryPoints`}</inlineCode>{` field of the manifest with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"uiEntryPoints\": [\n    {\n        \"type\": \"menu\",\n        \"label\": \"Create Styled Text\",\n        \"commandId\": \"createStyledTextCommand\"\n    }\n]\n`}</code></pre>\n    <p>{`If you're curious about what each entry means, `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/plugin-structure/manifest/\"\n      }}>{`see the manifest documentation`}</a>{`, where you can also learn about all manifest requirements for a plugin to be published in the XD Plugin Manager.`}</p>\n    <p>{`Then, update your `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file, mapping the manifest's `}<inlineCode parentName=\"p\">{`commandId`}</inlineCode>{` to a handler function.`}</p>\n    <p>{`Replace the content of your `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file with the following code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function createStyledTextHandlerFunction(selection) {\n  // The body of this function is added later\n}\n\nmodule.exports = {\n  commands: {\n    createStyledTextCommand: createStyledTextHandlerFunction,\n  },\n};\n`}</code></pre>\n    <p>{`The remaining steps in this tutorial describe additional edits to the `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file.`}</p>\n    <h3 {...{\n      \"id\": \"2-require-in-xd-api-dependencies\"\n    }}>{`2. Require in XD API dependencies`}</h3>\n    <p>{`For this tutorial, we just need access to two XD scenegraph classes.`}</p>\n    <p>{`Add the following lines to the top of your `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Add this to the top of your main.js file\nconst { Text, Color } = require(\"scenegraph\");\n`}</code></pre>\n    <p>{`Now the `}<inlineCode parentName=\"p\">{`Text`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Color`}</inlineCode>{` classes are required in and ready to be used.`}</p>\n    <h3 {...{\n      \"id\": \"3-create-the-main-function\"\n    }}>{`3. Create the main function`}</h3>\n    <p>{`In this step, we'll build out the main function, `}<inlineCode parentName=\"p\">{`createStyledTextHandlerFunction`}</inlineCode>{`, that we added in the first step. This function will add red text to the user's doucment.`}</p>\n    <p>{`Each of the numbered comments are explained below the code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function createStyledTextHandlerFunction(selection) {\n  const node = new Text(); // [1]\n  node.text = \"This is some red text\"; // [2]\n  node.fill = new Color(\"#FF0000\"); // [3]\n  node.fontSize = 24;\n\n  selection.insertionParent.addChild(node); // [4]\n  node.moveInParentCoordinates(20, 50); // [5]\n}\n`}</code></pre>\n    <ol>\n      <li parentName=\"ol\">{`Create the `}<inlineCode parentName=\"li\">{`Text`}</inlineCode>{` object.`}</li>\n      <li parentName=\"ol\">{`Populate `}<inlineCode parentName=\"li\">{`text`}</inlineCode>{` with a string.`}</li>\n      <li parentName=\"ol\">{`Set the color to red and the font size to 24 for the entire string.`}</li>\n      <li parentName=\"ol\">{`Add `}<inlineCode parentName=\"li\">{`text`}</inlineCode>{` to the scenegraph as a child of the currrently-selected artboard.`}</li>\n      <li parentName=\"ol\">{`Move `}<inlineCode parentName=\"li\">{`text`}</inlineCode>{` to a different position relative to the artboard's coordinate system.`}</li>\n    </ol>\n    <p>{`Character styles such as color and font size can also vary within the text. Read more below for details.`}</p>\n    <h3 {...{\n      \"id\": \"4-test-the-plugin\"\n    }}>{`4. Test the plugin`}</h3>\n    <p>{`If you reload the plugin and run it, you should see the following result:`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"630px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"61.24999999999999%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/uxp-xd/static/5b110c9bcb20738eeed10d1b1b17e204/5530d/red.webp 320w\", \"/uxp-xd/static/5b110c9bcb20738eeed10d1b1b17e204/e59cf/red.webp 630w\"],\n            \"sizes\": \"(max-width: 630px) 100vw, 630px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/uxp-xd/static/5b110c9bcb20738eeed10d1b1b17e204/dd4a7/red.png 320w\", \"/uxp-xd/static/5b110c9bcb20738eeed10d1b1b17e204/984b6/red.png 630w\"],\n            \"sizes\": \"(max-width: 630px) 100vw, 630px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/uxp-xd/static/5b110c9bcb20738eeed10d1b1b17e204/984b6/red.png\",\n            \"alt\": \"Red text\",\n            \"title\": \"Red text\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <p>{`Not bad for a few lines of code! Let's push it a little further.`}</p>\n    <h3 {...{\n      \"id\": \"5-update-the-main-function\"\n    }}>{`5. Update the main function`}</h3>\n    <p>{`All red is ok, but we can make our text more colorful than that. Let's change the code to apply different styles to different parts of the text, resulting in rainbow-colored text.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`styleRanges`}</inlineCode>{` property lets us apply different styles to different ranges of the node's text:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function createStyledTextHandlerFunction(selection) {\n  const node = new Text();\n\n  const textData = [\n    // [1]\n    { text: \"This \", color: \"red\" },\n    { text: \"is \", color: \"orange\" },\n    { text: \"some \", color: \"yellow\" },\n    { text: \"ra\", color: \"green\" },\n    { text: \"in\", color: \"blue\" },\n    { text: \"bow \", color: \"indigo\" },\n    { text: \"text\", color: \"violet\" },\n  ];\n\n  node.text = textData.map((item) => item.text).join(\"\"); // [2]\n\n  node.styleRanges = textData.map((item) => ({\n    // [3]\n    length: item.text.length,\n    fill: new Color(item.color),\n  }));\n\n  node.fontSize = 24; // [4]\n\n  selection.insertionParent.addChild(node);\n  node.moveInParentCoordinates(20, 50);\n}\n`}</code></pre>\n    <p>{`Here's what's changed:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`This data structure stores the text to be displayed, as well as the color to use for each fragment of text.`}</li>\n      <li parentName=\"ol\">{`Just as before, we set `}<inlineCode parentName=\"li\">{`node.text`}</inlineCode>{` equal to the text to be displayed. This time, the text string is created by concatenating together all the `}<inlineCode parentName=\"li\">{`.text`}</inlineCode>{` property values contained in the `}<inlineCode parentName=\"li\">{`textData`}</inlineCode>{` array. The `}<inlineCode parentName=\"li\">{`Array#map`}</inlineCode>{` gets us an array of strings, which we combine into a single string with `}<inlineCode parentName=\"li\">{`Array#join`}</inlineCode>{`.`}</li>\n      <li parentName=\"ol\">{`In this step, we build an array of style objects, applying each style to a few characters of the text string. We use `}<inlineCode parentName=\"li\">{`Array#map`}</inlineCode>{` again, this time converting each item in the `}<inlineCode parentName=\"li\">{`textData`}</inlineCode>{` array into a style object. The `}<inlineCode parentName=\"li\">{`length`}</inlineCode>{` of each style is equal to the length of the text string contained in one element of the `}<inlineCode parentName=\"li\">{`textData`}</inlineCode>{` array. The `}<inlineCode parentName=\"li\">{`fill`}</inlineCode>{` of each style uses the color value contained in one element of the `}<inlineCode parentName=\"li\">{`textData`}</inlineCode>{` array.`}</li>\n      <li parentName=\"ol\">{`We can still apply styles to the entire text node at once, as in the earlier example. Here, the font size will be set to the same value across `}<em parentName=\"li\">{`all`}</em>{` the style ranges we just created.`}</li>\n    </ol>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`tip`}</strong>{`\nThe `}<inlineCode parentName=\"p\">{`Color`}</inlineCode>{` constructor understands some color names, but you have plenty of other options for defining colors precisely, including hex, rgba, and more. `}<a parentName=\"p\" {...{\n          \"href\": \"/uxp-xd/develop/reference/Color/\"\n        }}>{`See the `}<inlineCode parentName=\"a\">{`Color`}</inlineCode>{` reference for more information`}</a>{`.`}</p>\n    </blockquote>\n    <p>{`Here are a few things to notice about the `}<inlineCode parentName=\"p\">{`styleRanges`}</inlineCode>{` property of `}<inlineCode parentName=\"p\">{`Text`}</inlineCode>{` objects:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`styleRanges`}</inlineCode>{` is an array of objects; you can have more than one style for a text node.`}</li>\n      <li parentName=\"ul\">{`Each range is given a `}<inlineCode parentName=\"li\">{`length`}</inlineCode>{` which determines the number of characters to which the style is applied, starting from the end of the previous style range.`}</li>\n      <li parentName=\"ul\">{`Character styles such as `}<inlineCode parentName=\"li\">{`fill`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`fontSize`}</inlineCode>{` can be set to different values in each style range, or they can be set on the `}<inlineCode parentName=\"li\">{`Text`}</inlineCode>{` node overall to apply the setting to `}<em parentName=\"li\">{`all`}</em>{` existing style ranges.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"6-run-the-plugin\"\n    }}>{`6. Run the plugin`}</h3>\n    <p>{`After saving all of your changes, reload the plugin in XD and run it. You'll now have rainbow-colored text:`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"616px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"63.125%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/uxp-xd/static/f49267837a395b1223259785f530271f/5530d/rainbow.webp 320w\", \"/uxp-xd/static/f49267837a395b1223259785f530271f/cec2c/rainbow.webp 616w\"],\n            \"sizes\": \"(max-width: 616px) 100vw, 616px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/uxp-xd/static/f49267837a395b1223259785f530271f/dd4a7/rainbow.png 320w\", \"/uxp-xd/static/f49267837a395b1223259785f530271f/274fb/rainbow.png 616w\"],\n            \"sizes\": \"(max-width: 616px) 100vw, 616px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/uxp-xd/static/f49267837a395b1223259785f530271f/274fb/rainbow.png\",\n            \"alt\": \"Rainbow text\",\n            \"title\": \"Rainbow text\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}