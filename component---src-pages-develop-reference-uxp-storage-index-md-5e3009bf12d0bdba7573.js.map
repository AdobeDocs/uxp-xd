{"version":3,"sources":["webpack://uxp-xd/./src/pages/develop/reference/uxp/storage-index.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kQAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,WADR,YAGA,eACE,GAAM,sBADR,uBAGA,6JACA,oBACE,eAAIC,WAAW,MAAf,iFACA,eAAIA,WAAW,MAAf,+QACA,eAAIA,WAAW,MAAf,0EAA8F,uBAAYA,WAAW,MAAvB,UAA9F,YAA6J,uBAAYA,WAAW,MAAvB,SAA7J,KAAoN,uBAAYA,WAAW,MAAvB,SAApN,gBAEF,eACE,GAAM,2CADR,4CAGA,sEAAuD,cAAGA,WAAW,IACjE,KAAQ,oEAD2C,sBAAvD,0BAEyD,uBAAYA,WAAW,KAAvB,MAFzD,wBAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,0DAIL,sCAAuB,uBAAYA,WAAW,KAAvB,MAAvB,8IACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,+lBAYL,oCAAqB,cAAGA,WAAW,IAC/B,KAAQ,wDADS,UAArB,kBAEqC,cAAGA,WAAW,IAC/C,KAAQ,oEACP,uBAAYA,WAAW,KAAvB,iBAJL,yCAKA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,wGAKL,oCAAqB,cAAGA,WAAW,IAC/B,KAAQ,sDADS,QAArB,mDAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,gFAKL,mFACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,sHAKL,8BAAe,cAAGA,WAAW,IACzB,KAAQ,iDADG,kBAAf,MAOJJ,EAAWK,gBAAiB","file":"component---src-pages-develop-reference-uxp-storage-index-md-5e3009bf12d0bdba7573.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"storage\"\n    }}>{`Storage`}</h1>\n    <h1 {...{\n      \"id\": \"using-the-file-api\"\n    }}>{`Using the File API`}</h1>\n    <p>{`XD provides a simple, cross-platform API surface that makes it easy to read and write text and binary files. Three key things to note:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Instead of working with string paths, you work with File and Folder objects.`}</li>\n      <li parentName=\"ul\">{`Access to the user's files requires showing a file picker UI, but you can access temporary files and any files packaged inside your plugin without needing any user interaction. If you have a File/Folder object, then you have access to the corresponding item on disk.`}</li>\n      <li parentName=\"ul\">{`File APIs are asynchronous, returning Promises which you can use with `}<inlineCode parentName=\"li\">{`then()`}</inlineCode>{` or the `}<inlineCode parentName=\"li\">{`async`}</inlineCode>{`/`}<inlineCode parentName=\"li\">{`await`}</inlineCode>{` keywords.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"getting-access-to-the-local-file-system\"\n    }}>{`Getting access to the local file system`}</h2>\n    <p>{`Start using the file system APIs by obtaining a `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/uxp/module/storage/#filesystemprovider\"\n      }}>{`FileSystemProvider`}</a>{` object (shortened to `}<inlineCode parentName=\"p\">{`fs`}</inlineCode>{` in the code here):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const fs = require(\"uxp\").storage.localFileSystem;\n`}</code></pre>\n    <p>{`You can use the `}<inlineCode parentName=\"p\">{`fs`}</inlineCode>{` object to access a temporary folder or your plugin's own folder immediately, or request access to user folders by showing a file picker:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// These require no user interaction:\nconst tempFolder = await fs.getTemporaryFolder();\nconst pluginFolder = await fs.getPluginFolder(); // read-only access to the plugin's install folder\nconst pluginDataFolder = await fs.getDataFolder(); // folder to store settings\n\n// Display file/folder picker UI to access user files:\nconst userFolder = await fs.getFolder(); // folder picker\nconst aFile = await fs.getFileForOpening(); // \"Open\" file picker, suitable for reading contents\nconst anotherFile = await fs.getFileForSaving(\"hello.txt\"); // \"Save\" file picker, suitable for writing contents\n`}</code></pre>\n    <p>{`If you have a `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/uxp/module/storage/#folder\"\n      }}>{`Folder`}</a>{`, you can use `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/uxp/module/storage/#folder-getentries\"\n      }}><inlineCode parentName=\"a\">{`getEntries()`}</inlineCode></a>{` to enumerate the folder's contents:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const entries = await folder.getEntries();\nentries.forEach((entry) => console.log(entry.name));\n`}</code></pre>\n    <p>{`If you have a `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/uxp/module/storage/#file\"\n      }}>{`File`}</a>{`, you can read and write its contents like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const contents = await aFile.read();\nawait anotherFile.write(contents);\n`}</code></pre>\n    <p>{`You can create new files inside a folder you have access to:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const newFile = await folder.createFile(\"examples.txt\", { overwrite: true });\nnewFile.write(\"Hello, world!\");\n`}</code></pre>\n    <p>{`See the `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/uxp/module/storage/\"\n      }}>{`full reference`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}