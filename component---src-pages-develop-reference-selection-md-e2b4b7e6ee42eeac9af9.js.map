{"version":3,"sources":["webpack://uxp-xd/./src/pages/develop/reference/selection.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-develop-reference-selection-md-e2b4b7e6ee42eeac9af9.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"selection\"\n    }}>{`selection`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`selection`}</inlineCode>{` object represents the currently selected set of nodes in the UI. You can change the selection to use it as input\nfor `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/commands/\"\n      }}>{`commands`}</a>{`, or to control what is left selected for the user when your plugin's edit operation completes.`}</p>\n    <p><strong parentName=\"p\">{`Selected items might not all have the same parent node.`}</strong>{` For example, the selection could be split between two sibling\nGroup nodes, or half the selection could be inside a Group and half inside its parent. Or the selection could be split between\nmultiple different artboards along with items on the pasteboard (immediate children of the root node).`}</p>\n    <p>{`Your plugin can only modify nodes in the \"neighborhood\" of the user's selection, a subset of the scenegraph tree called the\n`}<strong parentName=\"p\"><em parentName=\"strong\"><a parentName=\"em\" {...{\n            \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/edit-context/\"\n          }}>{`edit context`}</a></em></strong>{`. You can only set the selection to other nodes within the edit context.\nThe edit context does not update to reflect any changes to the selection until after a plugin operation completes.`}</p>\n    <p><strong parentName=\"p\">{`Other restrictions on selection`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The selection cannot contain both artboards and non-artboards at the same time.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The selection cannot contain both a node and one of its ancestors at the same time.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Items that are `}<em parentName=\"p\">{`locked`}</em>{` cannot be in the selection. If the user or your plugin attempts to select any locked items, they are\nautomatically filtered into a separate list (`}<a parentName=\"p\" {...{\n            \"href\": \"#selection-itemsIncludingLocked\"\n          }}>{`itemsIncludingLocked`}</a>{`) which is generally only used by the Unlock\ncommand.`}</p>\n      </li>\n    </ul>\n    <p><strong parentName=\"p\">{`Accessing the selection`}</strong></p>\n    <p>{`The current selection state is passed to your `}<em parentName=\"p\">{`command handler function`}</em>{` as an argument:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function myCommand(selection, documentRoot) {\n  console.log(selection.items.length + \" items are selected\");\n}\nmodule.exports = {\n  commands: {\n    myCommandId: myCommand,\n  },\n};\n`}</code></pre>\n    <p>{`You can also access this object from the `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/scenegraph/#module_scenegraph-selection\"\n      }}><inlineCode parentName=\"a\">{`scenegraph.selection`}</inlineCode></a>{` property.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: object`}</p>\n    <h3 {...{\n      \"id\": \"selectionitems--arrayscenenodescenegraphscenenodegt\"\n    }}>{`selection.items : `}<inlineCode parentName=\"h3\">{`!Array<\\\\![SceneNode](scenegraph/#SceneNode)&gt;`}</inlineCode></h3>\n    <p>{`Array representing the current selection. Empty array if nothing is selected (never null). `}<em parentName=\"p\">{`Items might not all have the same\nparent node.`}</em>{` Never includes locked nodes. Never mixes artboards with other nodes: a selection is either all artboards or all\nnon-artboards. Never includes any ancestors of any other item in the selection.`}</p>\n    <p>{`As a convenience, the setter also accepts a single node or null as valid input. However, the getter always returns an array.`}</p>\n    <p>{`If the user selects nodes one-by-one, by Shift-clicking, this array lists the nodes in the order they were added to the selection.\nIf the user selected by other means, e.g. dragging a marquee, the order has no meaning.`}</p>\n    <p>{`Returns a fresh array each time, so modifying the array returned by the getter does not change the selection -- only invoking\nthe 'items' setter changes selection.`}</p>\n    <p>{`The selection can only contain items which are in the current `}<em parentName=\"p\"><a parentName=\"em\" {...{\n          \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/edit-context/\"\n        }}>{`edit context`}</a>{`.`}</em></p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#selection\"\n      }}><inlineCode parentName=\"a\">{`selection`}</inlineCode></a><br parentName=\"p\"></br>{`\n`}<strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`console.log(\n  \"There are \" + selection.items.length + \" nodes currently selected\"\n);\nselection.items = [rectangle, ellipse, path]; // select 3 nodes\nselection.items = rectangle; // select 1 node (convenience)\nselection.items = null; // deselect all (convenience)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"selectionitemsincludinglocked--arrayscenenodescenegraphscenenodegt\"\n    }}>{`selection.itemsIncludingLocked : `}<inlineCode parentName=\"h3\">{`!Array<\\\\![SceneNode](scenegraph/#SceneNode)&gt;`}</inlineCode></h3>\n    <p>{`Array representing the current selection `}<em parentName=\"p\">{`plus`}</em>{` any locked items that the user has attempted to select.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#selection\"\n      }}><inlineCode parentName=\"a\">{`selection`}</inlineCode></a><br parentName=\"p\"></br>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}<br parentName=\"p\"></br>{`\n`}<strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let numUnlockedSelected = selection.items.length;\nlet numLockedSelected =\n  selection.itemsIncludingLocked.length - numUnlockedSelected;\nconsole.log(\n  \"There are \" +\n    numLockedSelected +\n    \" locked nodes 'sort of' currently selected\"\n);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"selectionhasartwork--boolean\"\n    }}>{`selection.hasArtwork : `}<inlineCode parentName=\"h3\">{`boolean`}</inlineCode></h3>\n    <p>{`True if the selection isn’t empty and consists of one or more non-Artboards. Never true at the same time as `}<a parentName=\"p\" {...{\n        \"href\": \"#selection-hasArtboards\"\n      }}>{`hasArtboards`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#selection\"\n      }}><inlineCode parentName=\"a\">{`selection`}</inlineCode></a><br parentName=\"p\"></br>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h3 {...{\n      \"id\": \"selectionhasartboards--boolean\"\n    }}>{`selection.hasArtboards : `}<inlineCode parentName=\"h3\">{`boolean`}</inlineCode></h3>\n    <p>{`True if the selection isn’t empty and consists of one or more Artboards. Never true at the same time as `}<a parentName=\"p\" {...{\n        \"href\": \"#selection-hasArtwork\"\n      }}>{`hasArtwork`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#selection\"\n      }}><inlineCode parentName=\"a\">{`selection`}</inlineCode></a><br parentName=\"p\"></br>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h3 {...{\n      \"id\": \"selectioninsertionparent--scenenodescenegraphscenenode\"\n    }}>{`selection.insertionParent : `}<inlineCode parentName=\"h3\">{`\\\\![SceneNode](scenegraph/#SceneNode)`}</inlineCode></h3>\n    <p>{`The preferred parent to insert newly added content into. Takes into account the current edit context as well as the \"focused artboard\" if in the root context.\nTypically this is the same parent where, for example, XD's shape drawing tools would add items.`}</p>\n    <p><em parentName=\"p\">{`Selected items are not necessarily all immediate children of the `}<inlineCode parentName=\"em\">{`insertionParent`}</inlineCode>{`.`}</em>{` They can be anywhere within the `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/edit-context/\"\n      }}>{`edit context's`}</a>{` scope.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#selection\"\n      }}><inlineCode parentName=\"a\">{`selection`}</inlineCode></a><br parentName=\"p\"></br>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h3 {...{\n      \"id\": \"selectionfocusedartboard--artboardscenegraphartboard\"\n    }}>{`selection.focusedArtboard : `}<inlineCode parentName=\"h3\">{`?[Artboard](scenegraph/#Artboard)`}</inlineCode></h3>\n    <p>{`The artboard the user is currently most focused on (via recent selection or edit operations). May be null, for example if no artboards exist or if the user just deleted an artboard.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#selection\"\n      }}><inlineCode parentName=\"a\">{`selection`}</inlineCode></a><br parentName=\"p\"></br>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h3 {...{\n      \"id\": \"selectioneditcontext--scenenodescenegraphscenenode\"\n    }}>{`selection.editContext : `}<inlineCode parentName=\"h3\">{`\\\\![SceneNode](scenegraph/#SceneNode)`}</inlineCode></h3>\n    <p>{`The common ancestor node of all selected items - also the root node of the subtree containing the \"`}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/edit-context/\"\n      }}>{`edit context`}</a>{`,\"\nwhich is the scope in which selection and edit operations must occur for the current plugin command. The scope does not\nnecessarily cover the entire subtree rooted at the editContext root node -- it may only cover a subset of this tree. See\nedit context documentation page for more details.`}</p>\n    <p>{`If the user hasn't drilled into any container node, this value is the document root.`}</p>\n    <p>{`The value of `}<inlineCode parentName=\"p\">{`editContext`}</inlineCode>{` does not change while your plugin is running. However, the `}<inlineCode parentName=\"p\">{`editContext`}</inlineCode>{` may change after your plugin\noperation ends:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`If your plugin changes the value of `}<inlineCode parentName=\"li\">{`selection.items`}</inlineCode>{` to include fewer nodes, the edit context may be narrowed.`}</li>\n      <li parentName=\"ul\">{`If your plugin has deleted nodes such that the current container is now empty, the edit context will pop up a level and the now-empty\ncontainer is automatically cleaned up.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#selection\"\n      }}><inlineCode parentName=\"a\">{`selection`}</inlineCode></a><br parentName=\"p\"></br>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h3 {...{\n      \"id\": \"selectionisineditcontextnode\"\n    }}><em parentName=\"h3\">{`selection.isInEditContext(node)`}</em></h3>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 28`}</p>\n    <p>{`Returns true if the node is accessible for editing in the scope of the current edit context.\nIf false, the node cannot be edited given the user's current selection.\nNodes that are currently selected are always in the current edit context.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance method of `}<a parentName=\"p\" {...{\n        \"href\": \"#selection\"\n      }}><inlineCode parentName=\"a\">{`selection`}</inlineCode></a><br parentName=\"p\"></br>{`\n`}<strong parentName=\"p\">{`Returns`}</strong>{`: `}<inlineCode parentName=\"p\">{`boolean`}</inlineCode></p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`node`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`!SceneNode`}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}