{"version":3,"file":"component---src-pages-develop-plugin-development-javascript-and-xd-javascript-support-md-47c357f29a2db6f5f549.js","mappings":"wQAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,0CAAwC,2CAEhDA,EAAAA,EAAAA,KAAA,6FACAA,EAAAA,EAAAA,KAAA,4CACAA,EAAAA,EAAAA,KAAA,MACE,GAAM,0BAAwB,4BAEhCA,EAAAA,EAAAA,KAAA,yCAAmCA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,aAA2B,MAAMH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,gBAA8B,gEACtJH,EAAAA,EAAAA,KAAA,+EACAA,EAAAA,EAAAA,KAAA,MACE,GAAM,sCAAoC,2CAE5CA,EAAAA,EAAAA,KAAA,6FACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,sBACnBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,YACnBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,6BAA8BH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,OAAqB,OAAOH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,SAAuB,OAC1JH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,yBACnBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,uBACnBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,sBAAuBH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,OAAqB,OAC1FH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,oBACnBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,6BAA8BH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,SAAuB,OAAOH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,SAAuB,OAC5JH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,cAErBH,EAAAA,EAAAA,KAAA,MACE,GAAM,qBAAmB,uBAE3BA,EAAAA,EAAAA,KAAA,8BAAwBA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,WAAyB,iCAC3EH,EAAAA,EAAAA,KAAA,uBAAiBA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,WAAyB,2MAA2MH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,gBAA8B,UAAUH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,gBAA8B,gBACzYH,EAAAA,EAAAA,KAAA,+CACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,gMAM9BH,EAAAA,EAAAA,KAAA,8CACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,sEAG9BH,EAAAA,EAAAA,KAAA,MACE,GAAM,yCAAuC,4CAE/CA,EAAAA,EAAAA,KAAA,4PAAsPA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,aAA2B,wHAG/S,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://uxp-xd/./src/pages/develop/plugin-development/javascript-and-xd/javascript-support.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"javascript-version-and-feature-support\"\n    }}>{`JavaScript version and feature support`}</h1>\n    <p>{`XD plugin APIs support \"modern JavaScript\"... but what does that mean exactly? `}</p>\n    <p>{`This is the place to find out!`}</p>\n    <h2 {...{\n      \"id\": \"can-i-use-es5-features\"\n    }}>{`Can I use ES5 features?`}</h2>\n    <p>{`Yes! This means you can use `}<inlineCode parentName=\"p\">{`Array#map`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Array#reduce`}</inlineCode>{`, and numerous other language features introduced with ES5.`}</p>\n    <p>{`In fact, you can write your whole plugin in ES5 if you so choose.`}</p>\n    <h2 {...{\n      \"id\": \"what-es2015-es6-features-can-i-use\"\n    }}>{`What ES2015+ (ES6) features can I use?`}</h2>\n    <p>{`XD plugin APIs support most of ES2015 and beyond. You can use features such as:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Template literals`}</li>\n      <li parentName=\"ul\">{`Classes`}</li>\n      <li parentName=\"ul\">{`Block-scoped variables ( `}<inlineCode parentName=\"li\">{`let`}</inlineCode>{` , `}<inlineCode parentName=\"li\">{`const`}</inlineCode>{` )`}</li>\n      <li parentName=\"ul\">{`Object destructuring`}</li>\n      <li parentName=\"ul\">{`Default parameters`}</li>\n      <li parentName=\"ul\">{`Spread and Rest ( `}<inlineCode parentName=\"li\">{`...`}</inlineCode>{` )`}</li>\n      <li parentName=\"ul\">{`Arrow functions`}</li>\n      <li parentName=\"ul\">{`Asynchronous functions ( `}<inlineCode parentName=\"li\">{`async`}</inlineCode>{` / `}<inlineCode parentName=\"li\">{`await`}</inlineCode>{` )`}</li>\n      <li parentName=\"ul\">{`Promises`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"can-i-use-require\"\n    }}>{`Can I use require?`}</h2>\n    <p>{`Yes, you can use `}<inlineCode parentName=\"p\">{`require`}</inlineCode>{` to import additional files.`}</p>\n    <p>{`Note that `}<inlineCode parentName=\"p\">{`require`}</inlineCode>{` in XD does not follow Node.js-style resolution. You can only require files in your plugin directory relative to your file location, but not outside of your plugin directory. There is no lookup in a `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` or a `}<inlineCode parentName=\"p\">{`node_modules`}</inlineCode>{` directory.`}</p>\n    <p>{`For example, the following works:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const aFile = require(\"./aFile\");\nconst someJSON = require(\"./someJSON.json\");\nconst anotherFile = require(\"./path/to/file/file\");\nconst someLib = require(\"./node_modules/somelib\");\n`}</code></pre>\n    <p>{`However, the following will not:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const someLib = require(\"somelib\");  // no package.json lookup\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"can-i-use-npm-packages-or-nodejs-apis\"\n    }}>{`Can I use npm packages or Node.js APIs?`}</h2>\n    <p>{`XD's plugin sandbox does not include most Node.js APIs, such as unrestricted filesystem access or the ability to spawn external processes. Npm packages that only depend on the core JavaScript language APIs can work in XD, but because XD's `}<inlineCode parentName=\"p\">{`require()`}</inlineCode>{` differs (see above), you will likely have to use webpack or rollup in order to generate a single-file bundle first.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}