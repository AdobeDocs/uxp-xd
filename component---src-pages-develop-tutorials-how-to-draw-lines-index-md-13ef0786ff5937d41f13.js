(window.webpackJsonp=window.webpackJsonp||[]).push([[182],{"XtI+":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return r})),n.d(t,"default",(function(){return m}));var a=n("wx14"),i=n("zLVn"),l=(n("q1tI"),n("7ljp")),o=n("ndZU"),r=(n("qKvR"),{}),d={_frontmatter:r},c=o.a;function m(e){var t=e.components,o=Object(i.a)(e,["components"]);return Object(l.mdx)(c,Object(a.a)({},d,o,{components:t,mdxType:"MDXLayout"}),Object(l.mdx)("h1",{id:"how-to-draw-lines"},"How to draw lines"),Object(l.mdx)("p",null,"This sample demonstrates how to create a plugin that adds colored lines to the user's document."),Object(l.mdx)("h2",{id:"prerequisites"},"Prerequisites"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},"Basic knowledge of HTML, CSS, and JavaScript"),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/tutorials/quick-start/"}),"Quick Start Tutorial")),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/tutorials/debugging/"}),"Debugging Tutorial"))),Object(l.mdx)("h2",{id:"development-steps"},"Development Steps"),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},Object(l.mdx)("strong",{parentName:"p"},"Info"),"\nComplete code for this plugin can be found ",Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/AdobeXD/Plugin-Samples/tree/master/how-to-draw-lines"}),"on GitHub"),".")),Object(l.mdx)("h3",{id:"1-prepare-your-plugin-scaffold"},"1. Prepare your plugin scaffold"),Object(l.mdx)("p",null,"First, edit the manifest file for the plugin you created in our ",Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"/uxp-xd/tutorials/quick-start/"}),"Quick Start Tutorial"),"."),Object(l.mdx)("p",null,"Replace the ",Object(l.mdx)("inlineCode",{parentName:"p"},"uiEntryPoints")," field of the manifest with the following:"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'"uiEntryPoints": [\n    {\n        "type": "menu",\n        "label": "Create lines",\n        "commandId": "createLinesCommand"\n    }\n]\n')),Object(l.mdx)("p",null,"If you're curious about what each entry means, ",Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"/uxp-xd/reference/structure/manifest/"}),"see the manifest documentation"),", where you can also learn about all manifest requirements for a plugin to be published in the XD Plugin Manager."),Object(l.mdx)("p",null,"Then, update your ",Object(l.mdx)("inlineCode",{parentName:"p"},"main.js")," file, mapping the manifest's ",Object(l.mdx)("inlineCode",{parentName:"p"},"commandId")," to a handler function."),Object(l.mdx)("p",null,"Replace the content of your ",Object(l.mdx)("inlineCode",{parentName:"p"},"main.js")," file with the following code:"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function createLinesCommand(selection) {\n    // The body of this function is added later\n}\n\nmodule.exports = {\n    commands: {\n        createLinesCommand\n    }\n};\n")),Object(l.mdx)("p",null,"The remaining steps in this tutorial describe additional edits to the ",Object(l.mdx)("inlineCode",{parentName:"p"},"main.js")," file."),Object(l.mdx)("h3",{id:"2-require-in-xd-api-dependencies"},"2. Require in XD API dependencies"),Object(l.mdx)("p",null,"For this tutorial, we just need access to two XD scenegraph classes and one XD module."),Object(l.mdx)("p",null,"Add the following lines to the top of your ",Object(l.mdx)("inlineCode",{parentName:"p"},"main.js")," file:"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// Add this to the top of your main.js file\nconst { Line, Color } = require("scenegraph");\nconst commands = require("commands");\n')),Object(l.mdx)("p",null,"Now the ",Object(l.mdx)("inlineCode",{parentName:"p"},"Line")," and ",Object(l.mdx)("inlineCode",{parentName:"p"},"Color")," classes and ",Object(l.mdx)("inlineCode",{parentName:"p"},"commands")," module are required in and ready to be used."),Object(l.mdx)("h3",{id:"3-create-a-helper-function"},"3. Create a helper function"),Object(l.mdx)("p",null,"Our plugin is going to assigning random colors to the lines we create!"),Object(l.mdx)("p",null,"Add the lines of code below to your file:"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function randomColor() {\n    const hexValues = ['00', '33', '66', '99', 'CC', 'FF'];\n    const color = \"#\" + Array.from({ length: 3 }, _ => hexValues[Math.floor(Math.random() * hexValues.length)]).join(\"\");\n    return color;\n}\n")),Object(l.mdx)("p",null,'This function returns a web-friendly color hex value (e.g., `"#FFFFFF"). This is just straight-up JavaScript; there\'s nothing specific to XD plugin APIs to cover here.'),Object(l.mdx)("h3",{id:"4-create-line-data"},"4. Create line data"),Object(l.mdx)("p",null,"In this step, we're going to add a little more plain-old JavaScript. This time we'll add a data structure that will set us up to draw lines with the XD plugin API in the next step."),Object(l.mdx)("p",null,"Add this code to your file:"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const lineData = [\n    { startX: 100, startY: 110, endX: 210, endY: 233 },\n    { startX: 210, startY: 233, endX: 320, endY: 156 },\n    { startX: 320, startY: 156, endX: 400, endY: 300 },\n    { startX: 400, startY: 300, endX: 500, endY: 120 }\n]\n")),Object(l.mdx)("p",null,"A couple of things to note:"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},"In this example, the each line's ",Object(l.mdx)("inlineCode",{parentName:"li"},"startX")," and ",Object(l.mdx)("inlineCode",{parentName:"li"},"startY")," matches the former line's ",Object(l.mdx)("inlineCode",{parentName:"li"},"endX")," and ",Object(l.mdx)("inlineCode",{parentName:"li"},"endY"),". This ensures lines are connected to each other. But they don't ",Object(l.mdx)("em",{parentName:"li"},"have")," to connect; feel free to modifiy the data as you wish!"),Object(l.mdx)("li",{parentName:"ul"},"The data structure here is important to note:",Object(l.mdx)("ul",{parentName:"li"},Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("inlineCode",{parentName:"li"},"lineData")," is an array. This gives us a way to store coordinates for multiple lines. We'll loop over this array in the next step."),Object(l.mdx)("li",{parentName:"ul"},"The array contains multiple objects that will be passed, one at a time, to the ",Object(l.mdx)("inlineCode",{parentName:"li"},"Line")," API."),Object(l.mdx)("li",{parentName:"ul"},"Since we're drawing lines, each object has a ",Object(l.mdx)("em",{parentName:"li"},"start")," and ",Object(l.mdx)("em",{parentName:"li"},"end")," coordinates for X and Y.")))),Object(l.mdx)("h3",{id:"5-create-the-main-function"},"5. Create the main function"),Object(l.mdx)("p",null,"In this step, we'll build out the main function, ",Object(l.mdx)("inlineCode",{parentName:"p"},"createLinesCommand"),", that we added in the first step. Each of the numbered comments are explained below the code:"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function createLinesCommand(selection) {            // [1]\n\n    let lines = [];                                 // [2]\n\n    lineData.forEach(data => {                      // [3]\n        const line = new Line();                    // [4.i]\n\n        line.setStartEnd(                           // [4.ii]\n            data.startX,\n            data.startY,\n            data.endX,\n            data.endY\n        );\n\n        line.strokeEnabled = true;                  // [4.iii]\n        line.stroke = new Color(randomColor());     // [4.iv]\n        line.strokeWidth = 3;                       // [4.v]\n\n        lines.push(line);                           // [4.vi]\n\n        selection.editContext.addChild(line)        // [4.vii]\n    });\n\n    selection.items = lines;                        // [5]\n    commands.group();                               // [6]\n}\n")),Object(l.mdx)("ol",null,Object(l.mdx)("li",{parentName:"ol"},"This function only needs the first ",Object(l.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/reference/structure/handlers/#contextual-arguments"}),"contextual argument"),", ",Object(l.mdx)("inlineCode",{parentName:"li"},"selection"),", which gives access to the selection object inside XD."),Object(l.mdx)("li",{parentName:"ol"},"Create an empty array to contain all the ",Object(l.mdx)("inlineCode",{parentName:"li"},"Line")," objects we'll create. This array will be used in a later step."),Object(l.mdx)("li",{parentName:"ol"},"Loop over the ",Object(l.mdx)("inlineCode",{parentName:"li"},"lineData")," array, getting an individual ",Object(l.mdx)("inlineCode",{parentName:"li"},"data")," object each time through the loop."),Object(l.mdx)("li",{parentName:"ol"},"For each ",Object(l.mdx)("inlineCode",{parentName:"li"},"data")," object:",Object(l.mdx)("ol",{parentName:"li"},Object(l.mdx)("li",{parentName:"ol"},"Create a new instance of ",Object(l.mdx)("inlineCode",{parentName:"li"},"Line"),"."),Object(l.mdx)("li",{parentName:"ol"},"Use the ",Object(l.mdx)("inlineCode",{parentName:"li"},"Line")," object's setter, ",Object(l.mdx)("inlineCode",{parentName:"li"},".setStartEnd"),", to set the line data from our ",Object(l.mdx)("inlineCode",{parentName:"li"},"data")," object."),Object(l.mdx)("li",{parentName:"ol"},"Set the ",Object(l.mdx)("inlineCode",{parentName:"li"},"strokeEnabled")," property to ",Object(l.mdx)("inlineCode",{parentName:"li"},"true")," in order to draw a stroke for the line."),Object(l.mdx)("li",{parentName:"ol"},"Set the stroke color using the ",Object(l.mdx)("inlineCode",{parentName:"li"},"randomColor")," helper function."),Object(l.mdx)("li",{parentName:"ol"},"Set the width of the stroke using ",Object(l.mdx)("inlineCode",{parentName:"li"},"strokeWidth")," property."),Object(l.mdx)("li",{parentName:"ol"},"Append the line object into the ",Object(l.mdx)("inlineCode",{parentName:"li"},"lines")," array."),Object(l.mdx)("li",{parentName:"ol"},"Insert the line into the edit context using the ",Object(l.mdx)("inlineCode",{parentName:"li"},"selection.editContext.addChild")," method.  This step adds the line to the document's scenegraph."))),Object(l.mdx)("li",{parentName:"ol"},"Now that all of the ",Object(l.mdx)("inlineCode",{parentName:"li"},"Line")," objects have been added to the scenegraph, set the document's current selection to be those ",Object(l.mdx)("inlineCode",{parentName:"li"},"Line")," objects."),Object(l.mdx)("li",{parentName:"ol"},"Use the ",Object(l.mdx)("inlineCode",{parentName:"li"},"group")," command to combine all of the currently-selected objects (the ",Object(l.mdx)("inlineCode",{parentName:"li"},"Line")," objects) into a single group object.")),Object(l.mdx)("h3",{id:"6-run-the-plugin"},"6. Run the plugin"),Object(l.mdx)("p",null,"After saving all of your changes, reload the plugin in XD and run it. The result should be similar to the following:"),Object(l.mdx)("p",null,Object(l.mdx)("img",{alt:"Created lines",src:n("sO/0")})),Object(l.mdx)("h2",{id:"next-steps"},"Next Steps"),Object(l.mdx)("p",null,"Want to expand on what you learned here? Have a look at these references to see options for customizing this sample plugin:"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/reference/scenegraph/"}),"Line")),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/reference/Color/"}),"Color")),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/reference/commands/"}),"Commands"))),Object(l.mdx)("p",null,"Ready to explore further? Take a look at our other resources:"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/tutorials/"}),"Tutorials")),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/AdobeXD/plugin-samples"}),"Sample code repos"))))}m.isMDXComponent=!0},"sO/0":function(e,t,n){e.exports=n.p+"static/lines-cef4618cea5ffd9218a660fea144dd55.png"}}]);
//# sourceMappingURL=component---src-pages-develop-tutorials-how-to-draw-lines-index-md-13ef0786ff5937d41f13.js.map