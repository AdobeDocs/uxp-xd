{"version":3,"sources":["webpack:///./src/pages/develop/tutorials/how-to-read-a-file/index.md","webpack:///./src/pages/develop/images/filepicker.png","webpack:///./src/pages/develop/images/displayed-results.png"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","alt","src","require","isMDXComponent","module","exports"],"mappings":"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","file":"component---src-pages-develop-tutorials-how-to-read-a-file-index-md-f872c5ae4820dc99061a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"how-to-read-a-file\"\n    }}>{`How to read a file`}</h1>\n    <p>{`This tutorial will show you how an XD plugin can read in a file from the file system. As one of example of what you can do with a file, we'll extract text from the file and add that text to the scenegraph.`}</p>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Basic knowledge of HTML, CSS, and JavaScript.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/tutorials/quick-start/\"\n        }}>{`Quick Start Tutorial`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/tutorials/debugging/\"\n        }}>{`Debugging Tutorial`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"development-steps\"\n    }}>{`Development Steps`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Info`}</strong>{`\nComplete code for this plugin can be found `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/AdobeXD/Plugin-Samples/tree/master/how-to-read-a-file\"\n        }}>{`on GitHub`}</a>{`.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"1-prepare-your-plugin-scaffold\"\n    }}>{`1. Prepare your plugin scaffold`}</h3>\n    <p>{`First, edit the manifest file for the plugin you created in our `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/tutorials/quick-start\"\n      }}>{`Quick Start Tutorial`}</a>{`.`}</p>\n    <p>{`Replace the `}<inlineCode parentName=\"p\">{`uiEntryPoints`}</inlineCode>{` field of the manifest with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"uiEntryPoints\": [\n    {\n        \"type\": \"menu\",\n        \"label\": \"Insert Text From File\",\n        \"commandId\": \"insertTextFromFileCommand\"\n    }\n]\n`}</code></pre>\n    <p>{`If you're curious about what each entry means, `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/reference/structure/manifest/\"\n      }}>{`see the manifest documentation`}</a>{`, where you can also learn about all manifest requirements for a plugin to be published in the XD Plugin Manager. `}</p>\n    <p>{`Then, update your `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file, mapping the manifest's `}<inlineCode parentName=\"p\">{`commandId`}</inlineCode>{` to a handler function.`}</p>\n    <p>{`Replace the content of your `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file with the following code (note the presence of the `}<inlineCode parentName=\"p\">{`async`}</inlineCode>{` keyword, which we'll look at in a later step):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function insertTextFromFileHandler(selection) {\n    // The body of this function is added later\n}\n\nmodule.exports = {\n    commands: {\n        \"insertTextFromFileCommand\": insertTextFromFileHandler\n    }\n};\n`}</code></pre>\n    <p>{`The remaining steps in this tutorial describe additional edits to the `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file.`}</p>\n    <h3 {...{\n      \"id\": \"2-require-in-xd-api-dependencies\"\n    }}>{`2. Require in XD API dependencies`}</h3>\n    <p>{`For this tutorial, we need access to two XD scenegraph dependencies and one UXP dependency.`}</p>\n    <p>{`Add the following lines to the top of your `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Add this to the top of your main.js file\nconst { Text, Color } = require(\"scenegraph\");\nconst fs = require(\"uxp\").storage.localFileSystem;\n`}</code></pre>\n    <p>{`Now the `}<inlineCode parentName=\"p\">{`Text`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Color`}</inlineCode>{` classes are required in and ready to be used, as well as UXP's local file system provider.`}</p>\n    <h3 {...{\n      \"id\": \"3-create-a-handler-function\"\n    }}>{`3. Create a handler function`}</h3>\n    <p>{`Our plugin will allow the user to pick a file from the system file picker, read that file's contents, and add the contents to a text object on the scenegraph.`}</p>\n    <p>{`Each of the numbered comments are explained below the code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function insertTextFromFileHandler(selection) {               // [1]\n    const aFile = await fs.getFileForOpening({ types: [\"txt\"] });   // [2]\n    if (!aFile) return;                                             // [3]\n\n    const contents = await aFile.read();                            // [4]\n\n    const text = new Text();                                        // [5]\n    text.text = contents;\n    text.styleRanges = [{\n        length: contents.length,\n        fill: new Color(\"#0000ff\"),\n        fontSize: 12\n    }];\n\n    selection.insertionParent.addChild(text);                       // [6]\n    text.moveInParentCoordinates(10, 30);\n}\n`}</code></pre>\n    <ol>\n      <li parentName=\"ol\">{`This example uses XD's asynchronous Filo I/O APIs, so the handler function must be declared as an async method. To learn more about async support in XD plugin APIs, see `}<a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/reference/javascript/sync-async/\"\n        }}>{`our document on sync and async support`}</a>{`.`}</li>\n      <li parentName=\"ol\">{`A file picker dialog is displayed, and the function waits for the user to select a text file. The selected file is assigned to `}<inlineCode parentName=\"li\">{`aFile`}</inlineCode>{`. The `}<inlineCode parentName=\"li\">{`#getFileForOpening`}</inlineCode>{` method is asynchronous, so the `}<inlineCode parentName=\"li\">{`await`}</inlineCode>{` keyword is used.`}</li>\n      <li parentName=\"ol\">{`If `}<inlineCode parentName=\"li\">{`aFile`}</inlineCode>{` is undefined (because the user did not select a file), then plugin exits.`}</li>\n      <li parentName=\"ol\">{`The contents of the file is read in, and returned as a string. See below for more detail. The `}<inlineCode parentName=\"li\">{`#read`}</inlineCode>{` method is asynchronous, so the `}<inlineCode parentName=\"li\">{`await`}</inlineCode>{` keyword is used.`}</li>\n      <li parentName=\"ol\">{`The contents of the string is added to a `}<inlineCode parentName=\"li\">{`Text`}</inlineCode>{` object. For details on `}<inlineCode parentName=\"li\">{`Text`}</inlineCode>{` properties, see the \"`}<a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/tutorials/how-to-style-text\"\n        }}>{`How to style text`}</a>{`\" tutorial.`}</li>\n      <li parentName=\"ol\">{`The `}<inlineCode parentName=\"li\">{`text`}</inlineCode>{` object is added to and positioned on the selected artboard.`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"4-run-the-plugin\"\n    }}>{`4. Run the plugin`}</h3>\n    <p>{`After saving all of your changes, reload the plugin in XD and run it. First you'll see a file picker:`}</p>\n    <p><img alt=\"System file picker\" src={require(\"../../images/filepicker.png\")} /></p>\n    <p>{`If you select a file containing text, the text should be added to the currently-selected artboard:`}</p>\n    <p><img alt=\"blue text added to the artboard\" src={require(\"../../images/displayed-results.png\")} /></p>\n    <h2 {...{\n      \"id\": \"next-steps\"\n    }}>{`Next Steps`}</h2>\n    <p>{`Want to expand on what you learned here? Have a look at these references to see options for customizing this sample plugin:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/reference/uxp/storage-index/\"\n        }}>{`File I/O`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/reference/scenegraph/#text\"\n        }}>{`Text`}</a></li>\n    </ul>\n    <p>{`Ready to explore further? Take a look at our other resources:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/tutorials/\"\n        }}>{`Tutorials`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/AdobeXD/plugin-samples\"\n        }}>{`Sample code repos`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = __webpack_public_path__ + \"static/filepicker-26e6e122afec101732dad4513ebc442c.png\";","module.exports = __webpack_public_path__ + \"static/displayed-results-c0fdacb45719284625c351b7f1bb3576.png\";"],"sourceRoot":""}