{"version":3,"sources":["webpack:///./src/pages/develop/images/export-rendition-pick-file.png","webpack:///./src/pages/develop/tutorials/how-to-export-a-rendition/index.md"],"names":["module","exports","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","alt","src","require","isMDXComponent"],"mappings":"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","file":"component---src-pages-develop-tutorials-how-to-export-a-rendition-index-md-23406ffcf8c8284eb85f.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/export-rendition-pick-file-3a2546acc11cbbba17f822289240a2c3.png\";","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"how-to-export-a-rendition\"\n    }}>{`How to export a rendition`}</h1>\n    <p>{`This sample describes how an XD plugin can invoke the default folder picker and generate a rendition of the selected artboard for export.`}</p>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Basic knowledge of HTML, CSS, and JavaScript.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/tutorials/quick-start/\"\n        }}>{`Quick Start Tutorial`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/tutorials/debugging/\"\n        }}>{`Debugging Tutorial`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"development-steps\"\n    }}>{`Development Steps`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Info`}</strong>{`\nComplete code for this plugin can be found `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/AdobeXD/Plugin-Samples/tree/master/how-to-export-a-rendition\"\n        }}>{`on GitHub`}</a>{`.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"1-prepare-your-plugin-scaffold\"\n    }}>{`1. Prepare your plugin scaffold`}</h3>\n    <p>{`First, edit the manifest file for the plugin you created in our `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/tutorials/quick-start\"\n      }}>{`Quick Start Tutorial`}</a>{`.`}</p>\n    <p>{`Replace the `}<inlineCode parentName=\"p\">{`uiEntryPoints`}</inlineCode>{` field of the manifest with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"uiEntryPoints\": [\n    {\n        \"type\": \"menu\",\n        \"label\": \"Export Rendition\",\n        \"commandId\": \"exportRendition\"\n    }\n]\n`}</code></pre>\n    <p>{`If you're curious about what each entry means, `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/plugin-structure/manifest/\"\n      }}>{`see the manifest documentation`}</a>{`, where you can also learn about all manifest requirements for a plugin to be published in the XD Plugin Manager.`}</p>\n    <p>{`Then, update your `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file, mapping the manifest's `}<inlineCode parentName=\"p\">{`commandId`}</inlineCode>{` to a handler function.`}</p>\n    <p>{`Replace the content of your `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file with the following code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function exportRendition(selection) {\n  if (selection.items.length > 0) {\n    // The body of this function is added later\n  }\n}\n\nmodule.exports = {\n  commands: {\n    exportRendition,\n  },\n};\n`}</code></pre>\n    <p>{`A couple of notes about the handler function shell above:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`This function will run `}<em parentName=\"li\">{`asynchronously`}</em>{`, as indicated by the `}<inlineCode parentName=\"li\">{`async`}</inlineCode>{` keyword at the beginning of the line. To learn more about what this means, see `}<a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/plugin-development/javascript-and-xd/sync-async/\"\n        }}>{`our document on sync and async support`}</a>{`.`}</li>\n      <li parentName=\"ol\">{`Since this plugin will require user to select an object, we use an `}<inlineCode parentName=\"li\">{`if`}</inlineCode>{` statement to check if there is an XD object selected.`}</li>\n    </ol>\n    <p>{`The remaining steps in this tutorial describe additional edits to the `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file.`}</p>\n    <h3 {...{\n      \"id\": \"2-require-in-xd-api-dependencies\"\n    }}>{`2. Require in XD API dependencies`}</h3>\n    <p>{`For this tutorial, we just need access to one XD module and one UXP class.`}</p>\n    <p>{`Add the following lines to the top of your `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Add this to the top of your main.js file\nconst application = require(\"application\");\nconst fs = require(\"uxp\").storage.localFileSystem;\n`}</code></pre>\n    <p>{`Now the `}<inlineCode parentName=\"p\">{`application`}</inlineCode>{` module and `}<inlineCode parentName=\"p\">{`localFileSystem`}</inlineCode>{` class are required in and ready to be used. These modules are required to invoke the folder picker and export renditions.`}</p>\n    <h3 {...{\n      \"id\": \"3-invoke-the-folder-picker\"\n    }}>{`3. Invoke the folder picker`}</h3>\n    <p>{`Here, we'll use `}<inlineCode parentName=\"p\">{`uxp.storage.localFileSystem`}</inlineCode>{` (our `}<inlineCode parentName=\"p\">{`fs`}</inlineCode>{` constant) to invoke the folder picker:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const folder = await fs.getFolder();\nconst file = await folder.createFile(\"rendition.png\");\n`}</code></pre>\n    <p>{`This will invoke the default folder picker for user to choose the save directory and create a file named `}<inlineCode parentName=\"p\">{`rendition.png`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"4-define-your-rendition-settings\"\n    }}>{`4. Define your rendition settings`}</h3>\n    <p>{`Next, we'll define the settings for our desired renditions.`}</p>\n    <p>{`Note the data structure in the code below: an array of objects (in this case, one object).`}</p>\n    <p>{`Each of the numbered comments are explained below the code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let renditionSettings = [\n  {\n    node: selection.items[0], // [1]\n    outputFile: file, // [2]\n    type: application.RenditionType.PNG, // [3]\n    scale: 2, // [4]\n  },\n];\n`}</code></pre>\n    <ol>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`selection.items[0]`}</inlineCode>{` refers to the first user-selected item in the document`}</li>\n      <li parentName=\"ol\">{`Set the `}<inlineCode parentName=\"li\">{`outputFile`}</inlineCode>{` property to the `}<inlineCode parentName=\"li\">{`file`}</inlineCode>{` constant we created in step #3`}</li>\n      <li parentName=\"ol\">{`Set the `}<inlineCode parentName=\"li\">{`type`}</inlineCode>{` property to `}<inlineCode parentName=\"li\">{`application.RenditionType.PNG`}</inlineCode></li>\n      <li parentName=\"ol\">{`Set the desired scale of the exported rendition`}</li>\n    </ol>\n    <p>{`We'll use this data structure containing our settings in the next step.`}</p>\n    <h3 {...{\n      \"id\": \"5-create-renditions\"\n    }}>{`5. Create renditions`}</h3>\n    <p>{`This is where we attempt to create the renditions:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`application\n  .createRenditions(renditionSettings) // [1]\n  .then((results) => {\n    // [2]\n    console.log(\n      \\`PNG rendition has been saved at \\${results[0].outputFile.nativePath}\\`\n    );\n  })\n  .catch((error) => {\n    // [3]\n    console.log(error);\n  });\n`}</code></pre>\n    <ol>\n      <li parentName=\"ol\">{`The `}<inlineCode parentName=\"li\">{`application#createRenditions`}</inlineCode>{` method accepts as an argument the `}<inlineCode parentName=\"li\">{`renditionSettings`}</inlineCode>{` data structure that we created in step #4.`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`createRenditions`}</inlineCode>{` returns a Promise. We log success to the developer console.`}</li>\n      <li parentName=\"ol\">{`Any errors will land in `}<inlineCode parentName=\"li\">{`.catch`}</inlineCode>{`, which we also log to the developer console.`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"6-run-the-plugin\"\n    }}>{`6. Run the plugin`}</h3>\n    <p>{`After saving all of your changes, reload the plugin in XD. Make sure to select an artboard and run the plugin command.`}</p>\n    <p>{`You should see a folder picker like this one:`}</p>\n    <p><img alt=\"System folder picker screen\" src={require(\"../../images/export-rendition-pick-file.png\")} /></p>\n    <p>{`The rendition will be saved at the specified location.`}</p>\n    <p>{`Open the developer console to see your success or error message from the previous step.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}