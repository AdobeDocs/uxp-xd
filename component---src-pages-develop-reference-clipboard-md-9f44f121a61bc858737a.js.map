{"version":3,"file":"component---src-pages-develop-reference-clipboard-md-9f44f121a61bc858737a.js","mappings":"kQAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGC,GAAK,YAER,OAAO,SAACJ,GAAS,UAAKD,EAAiBK,EAAK,CAAED,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,aAAW,cAEnB,sJACA,mBAAG,mBAAQC,WAAW,KAAG,aACzB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eAAa,yJAK9B,eACE,GAAM,YAAU,eAElB,wBAAS,mBAAQA,WAAW,KAAG,YAAsB,KAAK,uBAAYA,WAAW,KAAG,QAAsB,MAC1G,yDACA,uBACE,kBAAOA,WAAW,UAChB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MAAI,UAEf,eAAIA,WAAW,KACb,MAAS,MAAI,SAEf,eAAIA,WAAW,KACb,MAAS,MAAI,kBAInB,kBAAOA,WAAW,UAChB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MAAI,SAEf,eAAIA,WAAW,KACb,MAAS,MAAI,WAEf,eAAIA,WAAW,KACb,MAAS,MAAI,+EAKrB,mBAAG,mBAAQA,WAAW,KAAG,QAAkB,uBAAuB,cAAGA,WAAW,IAC5E,KAAQ,qBAAmB,cAInC,CAEAJ,EAAWK,gBAAiB,C","sources":["webpack://uxp-xd/./src/pages/develop/reference/clipboard.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"clipboard\"\n    }}>{`clipboard`}</h1>\n    <p>{`This module lets you copy text to the clipboard. It is not yet possible to copy other content types, or to handle paste events.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Copy the layer name of the selected item to the clipboard\nlet clipboard = require(\"clipboard\");\nclipboard.copyText(selection.items[0].name);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"copytext\"\n    }}>{`copyText()`}</h2>\n    <p>{`â–¸ `}<strong parentName=\"p\">{`copyText`}</strong>{`(`}<inlineCode parentName=\"p\">{`text`}</inlineCode>{`)`}</p>\n    <p>{`Write plain text to the clipboard.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`text`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Will be automatically converted to string if a different type is passed`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: static method of `}<a parentName=\"p\" {...{\n        \"href\": \"#module_clipboard\"\n      }}>{`clipboard`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}