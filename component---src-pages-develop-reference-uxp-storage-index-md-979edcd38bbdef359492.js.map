{"version":3,"file":"component---src-pages-develop-reference-uxp-storage-index-md-979edcd38bbdef359492.js","mappings":"wQAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,WAAS,YAEjBA,EAAAA,EAAAA,KAAA,MACE,GAAM,sBAAoB,uBAE5BA,EAAAA,EAAAA,KAAA,oJACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,iFACnBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,+QACnBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,0EAA2EH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,UAAwB,YAAYH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,SAAuB,KAAKH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,SAAuB,gBAExQH,EAAAA,EAAAA,KAAA,MACE,GAAM,2CAAyC,4CAEjDA,EAAAA,EAAAA,KAAA,6DAAuDA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACjE,KAAQ,oEAAkE,sBAC/C,0BAA0BH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,MAAoB,wBACvGH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,0DAG9BH,EAAAA,EAAAA,KAAA,6BAAuBA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,MAAoB,8IACrEH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,+lBAW9BH,EAAAA,EAAAA,KAAA,2BAAqBA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAC/B,KAAQ,wDAAsD,UAC/C,kBAAkBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAC/C,KAAQ,oEACPH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,iBAAkC,yCACjEH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,wGAI9BH,EAAAA,EAAAA,KAAA,2BAAqBA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAC/B,KAAQ,sDAAoD,QAC/C,mDACjBH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,gFAI9BH,EAAAA,EAAAA,KAAA,0EACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,sHAI9BH,EAAAA,EAAAA,KAAA,qBAAeA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACzB,KAAQ,iDAA+C,kBAChC,KAG/B,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://uxp-xd/./src/pages/develop/reference/uxp/storage-index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"storage\"\n    }}>{`Storage`}</h1>\n    <h1 {...{\n      \"id\": \"using-the-file-api\"\n    }}>{`Using the File API`}</h1>\n    <p>{`XD provides a simple, cross-platform API surface that makes it easy to read and write text and binary files. Three key things to note:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Instead of working with string paths, you work with File and Folder objects.`}</li>\n      <li parentName=\"ul\">{`Access to the user's files requires showing a file picker UI, but you can access temporary files and any files packaged inside your plugin without needing any user interaction. If you have a File/Folder object, then you have access to the corresponding item on disk.`}</li>\n      <li parentName=\"ul\">{`File APIs are asynchronous, returning Promises which you can use with `}<inlineCode parentName=\"li\">{`then()`}</inlineCode>{` or the `}<inlineCode parentName=\"li\">{`async`}</inlineCode>{`/`}<inlineCode parentName=\"li\">{`await`}</inlineCode>{` keywords.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"getting-access-to-the-local-file-system\"\n    }}>{`Getting access to the local file system`}</h2>\n    <p>{`Start using the file system APIs by obtaining a `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/uxp/module/storage/#filesystemprovider\"\n      }}>{`FileSystemProvider`}</a>{` object (shortened to `}<inlineCode parentName=\"p\">{`fs`}</inlineCode>{` in the code here):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const fs = require(\"uxp\").storage.localFileSystem;\n`}</code></pre>\n    <p>{`You can use the `}<inlineCode parentName=\"p\">{`fs`}</inlineCode>{` object to access a temporary folder or your plugin's own folder immediately, or request access to user folders by showing a file picker:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// These require no user interaction:\nconst tempFolder = await fs.getTemporaryFolder();\nconst pluginFolder = await fs.getPluginFolder(); // read-only access to the plugin's install folder\nconst pluginDataFolder = await fs.getDataFolder(); // folder to store settings\n\n// Display file/folder picker UI to access user files:\nconst userFolder = await fs.getFolder(); // folder picker\nconst aFile = await fs.getFileForOpening(); // \"Open\" file picker, suitable for reading contents\nconst anotherFile = await fs.getFileForSaving(\"hello.txt\"); // \"Save\" file picker, suitable for writing contents\n`}</code></pre>\n    <p>{`If you have a `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/uxp/module/storage/#folder\"\n      }}>{`Folder`}</a>{`, you can use `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/uxp/module/storage/#folder-getentries\"\n      }}><inlineCode parentName=\"a\">{`getEntries()`}</inlineCode></a>{` to enumerate the folder's contents:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const entries = await folder.getEntries();\nentries.forEach((entry) => console.log(entry.name));\n`}</code></pre>\n    <p>{`If you have a `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/uxp/module/storage/#file\"\n      }}>{`File`}</a>{`, you can read and write its contents like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const contents = await aFile.read();\nawait anotherFile.write(contents);\n`}</code></pre>\n    <p>{`You can create new files inside a folder you have access to:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const newFile = await folder.createFile(\"examples.txt\", { overwrite: true });\nnewFile.write(\"Hello, world!\");\n`}</code></pre>\n    <p>{`See the `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/uxp/module/storage/\"\n      }}>{`full reference`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}