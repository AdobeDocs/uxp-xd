{"version":3,"sources":["webpack://uxp-xd/./src/pages/develop/plugin-development/plugin-structure/handlers.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","name","isMDXComponent"],"mappings":"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","file":"component---src-pages-develop-plugin-development-plugin-structure-handlers-md-059aa6a11fec096330c1.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"the-mainjs-file\"\n    }}>{`The `}<inlineCode parentName=\"h1\">{`main.js`}</inlineCode>{` file`}</h1>\n    <p>{`Every `}<em parentName=\"p\">{`UI entry point`}</em>{` you declare in `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/plugin-structure/manifest/\"\n      }}><inlineCode parentName=\"a\">{`manifest.json`}</inlineCode></a>{` must be fulfilled by a definition exported from your `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` module.`}</p>\n    <p><em parentName=\"p\">{`Exporting`}</em>{` happens by setting the value of `}<inlineCode parentName=\"p\">{`module.exports`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`module.exports = {\n  commands: {\n    // definitions for each commandId in manifest go here\n  },\n  panels: {\n    // definitions for each panelId in manifest go here\n  },\n};\n`}</code></pre>\n    <p>{`The details of what you need to export are different depending on the type of UI entry point. One plugin may use multiple types of UI entry points.`}</p>\n    <a name=\"command\"></a>\n    <h2 {...{\n      \"id\": \"direct-action-commands-commandid\"\n    }}>{`Direct-action commands (`}<inlineCode parentName=\"h2\">{`commandId`}</inlineCode>{`)`}</h2>\n    <p><inlineCode parentName=\"p\">{`exports.commands`}</inlineCode>{` is a map linking each `}<inlineCode parentName=\"p\">{`commandId`}</inlineCode>{` from the manifest to a JS `}<em parentName=\"p\">{`handler function`}</em>{` in your code.`}</p>\n    <p>{`Manifest:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"uiEntryPoints\": [\n    {\n        \"type\": \"menu\",\n        \"label\": \"Hello World Command\",\n        \"commandId\": \"helloCommand\"\n    }\n]\n`}</code></pre>\n    <p>{`main.js:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function sayHello(selection, documentRoot) {\n  console.log(\"Hello, world!\");\n}\n\nmodule.exports = {\n  commands: {\n    helloCommand: sayHello,\n  },\n};\n`}</code></pre>\n    <p>{`Notice how the exported map object makes the connection from manifest to code:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The `}<inlineCode parentName=\"li\">{`commandId`}</inlineCode>{` from the manifest, `}<inlineCode parentName=\"li\">{`helloCommand`}</inlineCode>{`, is the `}<em parentName=\"li\">{`key`}</em></li>\n      <li parentName=\"ol\">{`The handler function, `}<inlineCode parentName=\"li\">{`sayHello`}</inlineCode>{`, is the `}<em parentName=\"li\">{`value`}</em>{` that the key maps to`}</li>\n    </ol>\n    <p>{`The handler is called each time the command is invoked, and XD passes it `}<a parentName=\"p\" {...{\n        \"href\": \"#contextual-arguments\"\n      }}>{`two arguments providing useful context`}</a>{`. Your handler function can `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/ui/dialogs/\"\n      }}>{`show UI in a dialog box`}</a>{` and/or `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/lifecycle/#edit-operations\"\n      }}>{`edit the XD document`}</a>{`.`}</p>\n    <a name=\"panel\"></a>\n    <h2 {...{\n      \"id\": \"panel-ui-panelid\"\n    }}>{`Panel UI (`}<inlineCode parentName=\"h2\">{`panelId`}</inlineCode>{`)`}</h2>\n    <p><inlineCode parentName=\"p\">{`exports.panels`}</inlineCode>{` is a map linking each `}<inlineCode parentName=\"p\">{`panelId`}</inlineCode>{` from the manifest to a JS `}<em parentName=\"p\">{`panel object`}</em>{` in your code.`}</p>\n    <p>{`Manifest:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"uiEntryPoints\": [\n    {\n        \"type\": \"panel\",\n        \"label\": \"Hello World Panel\",\n        \"panelId\": \"helloPanel\"\n    }\n]\n`}</code></pre>\n    <p>{`main.js:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function show(event) {\n  let dom = document.createElement(\"panel\");\n  dom.innerHTML = \\`\n        <form method=\"dialog\" id=\"main\">\n        </form>\n    \\`;\n  event.node.appendChild(dom);\n}\n\nfunction hide(event) {\n  event.node.firstChild.remove();\n}\n\nfunction update(selection, documentRoot) {\n  // ...update panel DOM based on selection...\n}\n\nmodule.exports = {\n  panels: {\n    helloPanel: {\n      show,\n      hide,\n      update,\n    },\n  },\n};\n`}</code></pre>\n    <p>{`Notice how the exported map object makes the connection from manifest to code:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The `}<inlineCode parentName=\"li\">{`panelId`}</inlineCode>{` from the manifest, `}<inlineCode parentName=\"li\">{`helloPanel`}</inlineCode>{`, is the `}<em parentName=\"li\">{`key`}</em></li>\n      <li parentName=\"ol\">{`An object with three methods (`}<inlineCode parentName=\"li\">{`show()`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`hide()`}</inlineCode>{`, and `}<inlineCode parentName=\"li\">{`update()`}</inlineCode>{`) is the `}<em parentName=\"li\">{`value`}</em>{` that the key maps to`}</li>\n    </ol>\n    <p>{`The panel object implements this interface:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"/uxp-xd/develop/reference/ui/panels/show/\"\n          }}><inlineCode parentName=\"a\">{`show()`}</inlineCode>{` (required)`}</a>{`: called when your panel is made visible to the user. To populate the panel with UI elements, add DOM nodes to the `}<inlineCode parentName=\"p\">{`event.node`}</inlineCode>{` root node that is provided.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"/uxp-xd/develop/reference/ui/panels/hide/\"\n          }}><inlineCode parentName=\"a\">{`hide()`}</inlineCode>{` (optional)`}</a>{`: called when your panel is hidden/closed.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"/uxp-xd/develop/reference/ui/panels/update/\"\n          }}><inlineCode parentName=\"a\">{`update`}</inlineCode>{` (optional)`}</a>{`: called whenever panel UI content should be updated. This includes when the panel is is shown, when the selection changes, or when the selected objects are mutated (move, resize, fill color change, etc.). This function should execute quickly since it's triggered for essentially every user action in XD while your panel is open. XD passes `}<inlineCode parentName=\"p\">{`update()`}</inlineCode>{` `}<a parentName=\"p\" {...{\n            \"href\": \"#contextual-arguments\"\n          }}>{`two arguments providing useful context`}</a>{`.`}</p>\n      </li>\n    </ul>\n    <p>{`Typically, you'll attach UI event listeners to the DOM nodes in your panel, and these event listeners may `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/lifecycle/#edit-operations\"\n      }}>{`edit the XD document using an `}<inlineCode parentName=\"a\">{`application.editDocument()`}</inlineCode>{` operation`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"contextual-arguments\"\n    }}>{`Contextual arguments`}</h2>\n    <p>{`The handler function for commands (`}<inlineCode parentName=\"p\">{`sayHello()`}</inlineCode>{` above) and the `}<inlineCode parentName=\"p\">{`update()`}</inlineCode>{` function for panels are both called with two arguments that provide useful context about XD's current state:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The current `}<a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/reference/selection/\"\n        }}>{`selection state`}</a></li>\n      <li parentName=\"ul\">{`The `}<a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/reference/scenegraph/#rootnode\"\n        }}>{`root node of the document's scenegraph`}</a></li>\n    </ul>\n    <p>{`The argument names `}<inlineCode parentName=\"p\">{`selection`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`documentRoot`}</inlineCode>{` seen in the code samples above are arbitrary, but you'll see this naming convention used throughout our documentation.`}</p>\n    <h2 {...{\n      \"id\": \"accessing-app-apis\"\n    }}>{`Accessing app APIs`}</h2>\n    <p>{`XD calls `}<em parentName=\"p\">{`into`}</em>{` your plugin code via the above exports. To call into XD's APIs from your plugin code, see `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/apis/\"\n      }}>{`Accessing APIs`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}