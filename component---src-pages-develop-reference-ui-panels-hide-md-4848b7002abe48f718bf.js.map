{"version":3,"file":"component---src-pages-develop-reference-ui-panels-hide-md-4848b7002abe48f718bf.js","mappings":"kQAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGC,GAAK,YAER,OAAO,SAACJ,GAAS,UAAKD,EAAiBK,EAAK,CAAED,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,uBAAqB,0BAE7B,0BAAW,uBAAYC,WAAW,KAAG,UAAwB,oBAAoB,eAAIA,WAAW,KAAG,YAAkB,yBAAyB,cAAGA,WAAW,IACxJ,KAAQ,uEAAqE,iBACvD,eAAe,uBAAYA,WAAW,KAAG,UAAwB,sMAAsM,uBAAYA,WAAW,KAAG,UAAwB,0EACnV,0BAAW,uBAAYA,WAAW,KAAG,SAAuB,gCAAgC,uBAAYA,WAAW,KAAG,cAA4B,kCAAkC,uBAAYA,WAAW,KAAG,UAAwB,uBACtO,mEAAoD,uBAAYA,WAAW,KAAG,QAAsB,sFAAsF,cAAGA,WAAW,IACpM,KAAQ,8CACP,uBAAYA,WAAW,KAAG,UAAwB,uBAA2B,qCAGtF,CAEAJ,EAAWK,gBAAiB,C","sources":["webpack://uxp-xd/./src/pages/develop/reference/ui/panels/hide.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"panel-hide-callback\"\n    }}>{`Panel hide() callback`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`hide()`}</inlineCode>{` function is an `}<em parentName=\"p\">{`optional`}</em>{` lifecycle method in `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/plugin-structure/handlers/#panel\"\n      }}>{`panel objects`}</a>{`. XD calls `}<inlineCode parentName=\"p\">{`hide()`}</inlineCode>{` each time your plugin panel is hidden -- if the user navigates back to the overall plugin list view, toggles to show a different plugin's panel UI, or closes the left-land sidebar altogether. (`}<inlineCode parentName=\"p\">{`hide()`}</inlineCode>{` is not called when the window is closed or XD is quitting, however).`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`event`}</inlineCode>{` argument provides the same `}<inlineCode parentName=\"p\">{`event.node`}</inlineCode>{` object as was passed to your `}<inlineCode parentName=\"p\">{`show()`}</inlineCode>{` callback earlier.`}</p>\n    <p>{`You can choose to remove your UI at the time `}<inlineCode parentName=\"p\">{`hide`}</inlineCode>{` is called, or if you prefer to reuse your UI, you can leave it attached. See the `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/ui/panels/show/\"\n      }}><inlineCode parentName=\"a\">{`show()`}</inlineCode>{` documentation page`}</a>{` for examples of both approaches.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}