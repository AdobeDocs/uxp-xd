(window.webpackJsonp=window.webpackJsonp||[]).push([[185],{oinF:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return i})),n.d(t,"default",(function(){return s}));var a=n("wx14"),l=n("zLVn"),r=(n("q1tI"),n("7ljp")),o=n("ndZU"),i=(n("qKvR"),{}),m={_frontmatter:i},c=o.a;function s(e){var t=e.components,n=Object(l.a)(e,["components"]);return Object(r.mdx)(c,Object(a.a)({},m,n,{components:t,mdxType:"MDXLayout"}),Object(r.mdx)("h1",{id:"how-to-make-network-requests"},"How to make network requests"),Object(r.mdx)("p",null,"This sample app will show you how to load an image in an XD object (Rectangle or Artboard) by making network requests using ",Object(r.mdx)("inlineCode",{parentName:"p"},"XHR")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"fetch"),"."),Object(r.mdx)("h2",{id:"prerequisites"},"Prerequisites"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"Basic knowledge of HTML, CSS, and JavaScript"),Object(r.mdx)("li",{parentName:"ul"},"Basic knowledge of ",Object(r.mdx)("inlineCode",{parentName:"li"},"XMLHttpRequest")," and ",Object(r.mdx)("inlineCode",{parentName:"li"},"fetch")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/tutorials/quick-start/"}),"Quick Start Tutorial")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/tutorials/debugging/"}),"Debugging Tutorial"))),Object(r.mdx)("h2",{id:"development-steps"},"Development Steps"),Object(r.mdx)("blockquote",null,Object(r.mdx)("p",{parentName:"blockquote"},Object(r.mdx)("strong",{parentName:"p"},"Info"),"\nComplete code for this plugin can be found ",Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/AdobeXD/Plugin-Samples/tree/master/how-to-make-network-requests"}),"on GitHub"),".")),Object(r.mdx)("h3",{id:"1-create-plugin-scaffold"},"1. Create plugin scaffold"),Object(r.mdx)("p",null,"First, edit the manifest file for the plugin you created in our ",Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"/uxp-xd/tutorials/quick-start"}),"Quick Start Tutorial"),"."),Object(r.mdx)("p",null,"Replace the ",Object(r.mdx)("inlineCode",{parentName:"p"},"uiEntryPoints")," field of the manifest with the following:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'"uiEntryPoints": [\n    {\n        "type": "menu",\n        "label": "How to make network requests",\n        "commandId": "applyImage"\n    }\n]\n')),Object(r.mdx)("p",null,"If you're curious about what each entry means, ",Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"/uxp-xd/reference/structure/manifest/"}),"see the manifest documentation"),", where you can also learn about all manifest requirements for a plugin to be published in the XD Plugin Manager. "),Object(r.mdx)("p",null,"Then, update your ",Object(r.mdx)("inlineCode",{parentName:"p"},"main.js")," file, mapping the manifest's ",Object(r.mdx)("inlineCode",{parentName:"p"},"commandId")," to a handler function."),Object(r.mdx)("p",null,"Replace the content of your ",Object(r.mdx)("inlineCode",{parentName:"p"},"main.js")," file with the following code:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function applyImage(selection) {\n    // The body of this function is added later\n}\n\nmodule.exports = {\n    commands: {\n        applyImage\n    }\n};\n")),Object(r.mdx)("p",null,"The remaining steps in this tutorial describe additional edits to the ",Object(r.mdx)("inlineCode",{parentName:"p"},"main.js")," file."),Object(r.mdx)("h3",{id:"2-require-in-xd-api-dependencies"},"2. Require in XD API dependencies"),Object(r.mdx)("p",null,"For this tutorial, we just need access to one XD scenegraph class."),Object(r.mdx)("p",null,"Add the following lines to the top of your ",Object(r.mdx)("inlineCode",{parentName:"p"},"main.js")," file:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// Add this to the top of your main.js file\nconst { ImageFill } = require("scenegraph");\n')),Object(r.mdx)("p",null,"Now the ",Object(r.mdx)("inlineCode",{parentName:"p"},"ImageFill")," class is imported and ready to be used."),Object(r.mdx)("h3",{id:"3-write-a-helper-function-to-make-xhr-requests"},"3. Write a helper function to make XHR requests"),Object(r.mdx)("p",null,"Our XHR helper ",Object(r.mdx)("inlineCode",{parentName:"p"},"xhrBinary")," will make an HTTP GET request to any URL it is passed, and a return a Promise with an ",Object(r.mdx)("inlineCode",{parentName:"p"},"arraybuffer"),"."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function xhrBinary(url) {                                       // [1]\n    return new Promise((resolve, reject) => {                   // [2]\n        const req = new XMLHttpRequest();                       // [3]\n        req.onload = () => {\n            if (req.status === 200) {\n                try {\n                    const arr = new Uint8Array(req.response);   // [4]\n                    resolve(arr);                               // [5]\n                } catch (err) {\n                    reject(`Couldnt parse response. ${err.message}, ${req.response}`);\n                }\n            } else {\n                reject(`Request had an error: ${req.status}`);\n            }\n        }\n        req.onerror = reject;\n        req.onabort = reject;\n        req.open('GET', url, true);\n        req.responseType = \"arraybuffer\";                       // [6]\n        req.send();\n    });\n}\n")),Object(r.mdx)("ol",null,Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("inlineCode",{parentName:"li"},"xhrBinary")," function takes a url as a parameter"),Object(r.mdx)("li",{parentName:"ol"},"The function returns a Promise"),Object(r.mdx)("li",{parentName:"ol"},"The function uses ",Object(r.mdx)("inlineCode",{parentName:"li"},"XMLHttpRequest")," to make network requests"),Object(r.mdx)("li",{parentName:"ol"},"Once the correct response comes back, the function uses ",Object(r.mdx)("inlineCode",{parentName:"li"},"Unit8Array")," method to convert the response to an ",Object(r.mdx)("inlineCode",{parentName:"li"},"arraybuffer")),Object(r.mdx)("li",{parentName:"ol"},"After the conversion, the promise is resolved"),Object(r.mdx)("li",{parentName:"ol"},"Make sure the set the ",Object(r.mdx)("inlineCode",{parentName:"li"},"responseType")," as ",Object(r.mdx)("inlineCode",{parentName:"li"},"arraybuffer"))),Object(r.mdx)("h3",{id:"4-write-a-helper-to-apply-imagefill"},"4. Write a helper to apply ",Object(r.mdx)("inlineCode",{parentName:"h3"},"ImageFill")),Object(r.mdx)("p",null,"This helper function will create an ",Object(r.mdx)("inlineCode",{parentName:"p"},"ImageFill")," instance that can be applied to a user-selected XD scengraph object:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function applyImagefill(selection, file) {                             // [1]\n    const imageFill = new ImageFill(file);                             // [2]\n    selection.items[0].fill = imageFill;                               // [3]\n}\n")),Object(r.mdx)("ol",null,Object(r.mdx)("li",{parentName:"ol"},"The function accepts the ",Object(r.mdx)("inlineCode",{parentName:"li"},"selection")," and a ",Object(r.mdx)("inlineCode",{parentName:"li"},"file")," as parameters"),Object(r.mdx)("li",{parentName:"ol"},"Use the ",Object(r.mdx)("inlineCode",{parentName:"li"},"ImageFill")," class to create the fill"),Object(r.mdx)("li",{parentName:"ol"},"Apply the image to the user-selected XD object")),Object(r.mdx)("p",null,"We'll use this function in the next step."),Object(r.mdx)("h3",{id:"5-write-a-helper-function-to-download-the-image"},"5. Write a helper function to download the image"),Object(r.mdx)("p",null,"Ok, you've just made three helper functions. Now we're going to tie them all together!"),Object(r.mdx)("p",null,"Note the use of the ",Object(r.mdx)("inlineCode",{parentName:"p"},"async")," keyword at the beginning of the function."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'async function downloadImage(selection, jsonResponse) {                            // [1]\n    try {\n        const photoUrl = jsonResponse.message;                                     // [2]\n        const photoObj = await xhrBinary(photoUrl);                                // [3]\n        const tempFolder = await fs.getTemporaryFolder();                          // [4]\n        const tempFile = await tempFolder.createFile("tmp", { overwrite: true });  // [5]\n        await tempFile.write(photoObj, { format: uxp.formats.binary });            // [6]\n        applyImagefill(selection, tempFile);                                       // [7]\n    } catch (err) {\n        console.log("error")\n        console.log(err.message);\n    }\n}\n')),Object(r.mdx)("ol",null,Object(r.mdx)("li",{parentName:"ol"},"This helper function accepts the ",Object(r.mdx)("inlineCode",{parentName:"li"},"selection")," and a JSON response object as parameters"),Object(r.mdx)("li",{parentName:"ol"},"Gets the URL from the JSON response"),Object(r.mdx)("li",{parentName:"ol"},"Uses our async ",Object(r.mdx)("inlineCode",{parentName:"li"},"xhrBinary")," function to get an ",Object(r.mdx)("inlineCode",{parentName:"li"},"arraybuffer")),Object(r.mdx)("li",{parentName:"ol"},"Uses the ",Object(r.mdx)("inlineCode",{parentName:"li"},"fs")," module and its ",Object(r.mdx)("inlineCode",{parentName:"li"},"getTemporaryFolder")," method to create a temp folder"),Object(r.mdx)("li",{parentName:"ol"},"Uses the ",Object(r.mdx)("inlineCode",{parentName:"li"},"createFile")," method to create a temp file"),Object(r.mdx)("li",{parentName:"ol"},"Uses the ",Object(r.mdx)("inlineCode",{parentName:"li"},"write")," method to write the binary file to store"),Object(r.mdx)("li",{parentName:"ol"},"Uses ",Object(r.mdx)("inlineCode",{parentName:"li"},"applyImagefill")," to place the image into a user-selected XD object")),Object(r.mdx)("h3",{id:"6-write-the-main-handler-function"},"6. Write the main handler function"),Object(r.mdx)("p",null,"This is the function that will be called with the user runs our plugin command."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'function applyImage(selection) {\n    if (selection.items.length) {                                   // [1]\n        const url = "https://dog.ceo/api/breeds/image/random";      // [2]\n        return fetch(url)                                           // [3]\n            .then(function (response) {\n                return response.json();                             // [4]\n            })\n            .then(function (jsonResponse) {\n                return downloadImage(selection, jsonResponse);      // [5]\n            });\n    } else {\n        console.log("Please select a shape to apply the downloaded image.");\n    }\n}\n')),Object(r.mdx)("ol",null,Object(r.mdx)("li",{parentName:"ol"},"Checks if user has selected at least one object"),Object(r.mdx)("li",{parentName:"ol"},"This is an example public URL to an image"),Object(r.mdx)("li",{parentName:"ol"},"Pass the URL to ",Object(r.mdx)("inlineCode",{parentName:"li"},"fetch")),Object(r.mdx)("li",{parentName:"ol"},"The first ",Object(r.mdx)("inlineCode",{parentName:"li"},".then")," block returns the response JSON object"),Object(r.mdx)("li",{parentName:"ol"},"The second ",Object(r.mdx)("inlineCode",{parentName:"li"},".then")," block passes the ",Object(r.mdx)("inlineCode",{parentName:"li"},"selection")," and our JSON reponse to our  ",Object(r.mdx)("inlineCode",{parentName:"li"},"downloadImage")," function, ultimately placing it in the document")),Object(r.mdx)("h2",{id:"next-steps"},"Next Steps"),Object(r.mdx)("p",null,"Want to expand on what you learned here? Have a look at these references to see options for customizing this sample plugin:"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/reference/uxp/network-index/"}),"Network I/O")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/reference/uxp/network-index/#xmlhttprequest-support"}),"XMLHttpRequest")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/reference/uxp/network-index/#fetch-support"}),"fetch"))),Object(r.mdx)("p",null,"Ready to explore further? Take a look at our other resources:"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/tutorials/"}),"Tutorials")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/AdobeXD/plugin-samples"}),"Sample code repos"))))}s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-develop-tutorials-how-to-make-network-requests-index-md-360c942b5fc6ffcea32b.js.map