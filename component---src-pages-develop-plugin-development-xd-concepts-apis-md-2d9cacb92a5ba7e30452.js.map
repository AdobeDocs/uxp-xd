{"version":3,"sources":["webpack:///./src/pages/develop/plugin-development/xd-concepts/apis.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-develop-plugin-development-xd-concepts-apis-md-2d9cacb92a5ba7e30452.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"available-apis\"\n    }}>{`Available APIs`}</h1>\n    <p>{`Adobe XD provides several categories of APIs:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\"><a parentName=\"strong\" {...{\n              \"href\": \"#xd-specific-apis\"\n            }}>{`APIs for interacting with XD itself`}</a></strong>{`, especially its document model, the `}<strong parentName=\"p\">{`scenegraph`}</strong></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The `}<strong parentName=\"p\">{`UXP runtime`}</strong>{`, which provides all the capabilities that aren't XD-specific:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`A `}<a parentName=\"li\" {...{\n              \"href\": \"../uxp/ui-index/\"\n            }}><em parentName=\"a\">{`browser-like`}</em>{` HTML and CSS engine`}</a>{` which drives actual XD `}<em parentName=\"li\">{`native UI components`}</em>{` -- it is `}<strong parentName=\"li\">{`not`}</strong>{` a complete browser engine, but lets you build your UI using familiar web APIs and frameworks.`}</li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"../uxp/network-index/\"\n            }}>{`Network APIs`}</a>{` similar to the web standard XHR, `}<inlineCode parentName=\"li\">{`fetch`}</inlineCode>{`, and WebSocket found in browsers.`}</li>\n          <li parentName=\"ul\">{`The `}<a parentName=\"li\" {...{\n              \"href\": \"../uxp/storage-index/\"\n            }}><inlineCode parentName=\"a\">{`storage`}</inlineCode>{` API`}</a>{`, offering sandboxed filesystem access.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The usual `}<strong parentName=\"p\"><a parentName=\"strong\" {...{\n              \"href\": \"../javascript/javascript-support/\"\n            }}>{`core JavaScript language APIs`}</a></strong>{` you see in all JS runtimes, such as `}<inlineCode parentName=\"p\">{`setTimeout()`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Date`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`A simple `}<strong parentName=\"p\"><a parentName=\"strong\" {...{\n              \"href\": \"../javascript/javascript-support/#can-i-use-require\"\n            }}>{`module-loader `}<inlineCode parentName=\"a\">{`require()`}</inlineCode>{` API`}</a></strong></p>\n      </li>\n    </ul>\n    <p>{`Read below for `}<strong parentName=\"p\">{`how to access`}</strong>{` XD and UXP APIs...`}</p>\n    <h2 {...{\n      \"id\": \"xd-specific-apis\"\n    }}>{`XD-specific APIs`}</h2>\n    <p>{`Most XD APIs are accessed by loading a module via `}<inlineCode parentName=\"p\">{`require()`}</inlineCode>{`, but some are passed directly to your plugin's handler functions. See the `}<a parentName=\"p\" {...{\n        \"href\": \"../xd-index/\"\n      }}>{`XD specific APIs page`}</a>{` for a full list of modules. Below are some examples of modules available via the API:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../selection/\"\n        }}>{`selection`}</a>{` - Indicates the selected nodes and related context`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`This object is passed as an argument to your command handler function (see above)`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../scenegraph/\"\n        }}>{`scenegraph`}</a>{` - APIs available on document nodes`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Typically you use scenegraph objects by simply accessing the arguments passed to your command's handler function\n(`}<inlineCode parentName=\"li\">{`selection`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`documentRoot`}</inlineCode>{`).`}</li>\n          <li parentName=\"ul\">{`To create `}<em parentName=\"li\">{`new`}</em>{` nodes in the document, load this module explicitly to access the constructor functions:`}\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-js\"\n              }}>{`let Rectangle = require(\"scenegraph\").Rectangle;\nlet node = new Rectangle();\n`}</code></pre>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../commands/\"\n        }}>{`commands`}</a>{` - Invoke commands to change the document structure and perform other complex operations.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`let commands = require(\"commands\");`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../interactions/\"\n        }}>{`interactions`}</a>{` - Data model for interactive prototyping features (also accessible from scenegraph nodes).`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`let interactions = require(\"interactions\");`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../application/\"\n        }}>{`application`}</a>{` - APIs for exporting content, initiating edits from panel UI, and getting version / locale info.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`let application = require(\"application\");`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../clipboard/\"\n        }}>{`clipboard`}</a>{` - Copy text to the clipboard.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`let clipboard = require(\"clipboard\");`}</inlineCode></li>\n        </ul>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"uxp\"\n    }}>{`UXP`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`HTML DOM APIs -- access just as in a browser, via the global `}<inlineCode parentName=\"p\">{`document`}</inlineCode>{`. Each plugin in XD gets its own `}<inlineCode parentName=\"p\">{`document`}</inlineCode>{` tree.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Network APIs -- access just as in a browser, via the global classes `}<inlineCode parentName=\"p\">{`XMLHttpRequest`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`WebSocket`}</inlineCode>{`, and the global function `}<inlineCode parentName=\"p\">{`fetch()`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Storage APIs -- access via `}<inlineCode parentName=\"p\">{`const fs = require(\"uxp\").storage.localFileSystem;`}</inlineCode></p>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}