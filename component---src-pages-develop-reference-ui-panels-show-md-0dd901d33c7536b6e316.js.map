{"version":3,"file":"component---src-pages-develop-reference-ui-panels-show-md-0dd901d33c7536b6e316.js","mappings":"uQAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,uBAAqB,0BAE7BA,EAAAA,EAAAA,KAAA,iBAAWA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,UAAwB,6CAA6CH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACpH,KAAQ,uEAAqE,iBACvD,aAAaH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,YAAsB,eAAeH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,UAAwB,0CACpJH,EAAAA,EAAAA,KAAA,0EAAoEA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,cAA4B,gEAAgEH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,UAAwB,8BAC5OH,EAAAA,EAAAA,KAAA,MACE,GAAM,+BAA6B,kCAErCA,EAAAA,EAAAA,KAAA,0HACAA,EAAAA,EAAAA,KAAA,uCACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,6PAa9BH,EAAAA,EAAAA,KAAA,MACE,GAAM,yCAAuC,6CAE/CA,EAAAA,EAAAA,KAAA,iHACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,+RAmB9BH,EAAAA,EAAAA,KAAA,8MACAA,EAAAA,EAAAA,KAAA,MACE,GAAM,0BAAwB,2BAEhCA,EAAAA,EAAAA,KAAA,mFAA6EA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACvF,KAAQ,+CAA6C,qBAC3B,sHAGlC,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://uxp-xd/./src/pages/develop/reference/ui/panels/show.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"panel-show-callback\"\n    }}>{`Panel show() callback`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`show()`}</inlineCode>{` function is the one lifecycle method in `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/plugin-structure/handlers/#panel\"\n      }}>{`panel objects`}</a>{` that is `}<strong parentName=\"p\">{`required`}</strong>{`. XD calls `}<inlineCode parentName=\"p\">{`show()`}</inlineCode>{` each time the user opens your panel.`}</p>\n    <p>{`To populate the panel with UI elements, add DOM nodes to the `}<inlineCode parentName=\"p\">{`event.node`}</inlineCode>{` root node that is provided. There are two ways you can use `}<inlineCode parentName=\"p\">{`show()`}</inlineCode>{` to create your panel UI:`}</p>\n    <h3 {...{\n      \"id\": \"recreate-panel-on-each-show\"\n    }}>{`Recreate panel on each show()`}</h3>\n    <p>{`For simple panels, you can create the panel UI each time it's shown and throw it away each time it's hidden:`}</p>\n    <p>{`Here is a simple example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function show(event) {\n  const content = \"<p>Hello, World</p>\";\n  const panel = document.createElement(\"div\");\n  panel.innerHTML = content;\n\n  event.node.appendChild(panel);\n}\n\nfunction hide(event) {\n  event.node.firstChild.remove();\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"create-panel-on-first-show-then-reuse\"\n    }}>{`Create panel on first show(), then reuse`}</h3>\n    <p>{`For panels with more complex state, it may be simpler to continue reusing the same panel DOM nodes:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let panel;\n\nfunction show(event) {\n  if (panel) {\n    return;\n  }\n\n  const content = \"<p>Hello, World</p>\";\n  panel = document.createElement(\"div\");\n  panel.innerHTML = content;\n\n  event.node.appendChild(panel);\n}\n\nfunction hide(event) {\n  // nothing to do here\n}\n`}</code></pre>\n    <p>{`Note: once the panel has been created you don't need to touch the DOM at all for hide & show to work correctly -- XD takes care of closing and reopening the panel UI's container automatically.`}</p>\n    <h3 {...{\n      \"id\": \"panel-content-updating\"\n    }}>{`Panel content updating`}</h3>\n    <p>{`Whichever method you use, you'll typically also need to implement the `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/ui/panels/update/\"\n      }}>{`update() callback`}</a>{` in order to update your panel UI if the selection or XD document content changes while the panel is already open.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}