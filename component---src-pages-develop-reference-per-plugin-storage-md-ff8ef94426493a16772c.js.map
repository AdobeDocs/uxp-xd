{"version":3,"file":"component---src-pages-develop-reference-per-plugin-storage-md-ff8ef94426493a16772c.js","mappings":"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","sources":["webpack://uxp-xd/./src/pages/develop/reference/PerPluginStorage.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"perpluginstorage\"\n    }}>{`PerPluginStorage`}</h1>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: interface\n`}<strong parentName=\"p\">{`Since`}</strong>{`: XD 29`}</p>\n    <p>{`Stores metadata accessible to multiple plugins, separated into silos by plugin ID. Your plugin can read & write the storage for its own plugin ID, but storage for other plugin IDs is `}<em parentName=\"p\">{`read-only`}</em>{`.`}</p>\n    <p>{`Each per-plugin storage silo is a collection of key-value pairs. Keys and values must both be strings.`}</p>\n    <p><em parentName=\"p\">{`Each`}</em>{` scenenode has its own metadata storage, accessed via `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/SceneNode/#sharedplugindata\"\n      }}>{`SceneNode.sharedPluginData`}</a>{`. To store general metadata that is not specific to one scenenode, use `}<inlineCode parentName=\"p\">{`sharedPluginData`}</inlineCode>{` on the `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/RootNode\"\n      }}>{`document's scenegraph root`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// This example shows how to save & retrieve rich JSON data in shared metadata storage.\n// See below for simpler examples of using individual APIs.\nconst PLUGIN_ID = \"<your manifest's plugin ID here>\";\n\nlet richObject = {\n  list: [2, 4, 6],\n  name: \"Hello world\",\n};\nnode.sharedPluginData.setItem(\n  PLUGIN_ID,\n  \"richData\",\n  JSON.stringify(richObject)\n);\n\n// Later on...\n// (This could be in a different plugin, if it passes the original plugin's ID here)\nlet jsonString = node.sharedPluginData.getItem(PLUGIN_ID, \"richData\");\nif (jsonString) {\n  // may be undefined\n  let richObjectCopy = JSON.parse(jsonString);\n  console.log(richObjectCopy.list.length); // 3\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"getall\"\n    }}>{`getAll()`}</h2>\n    <p>{`â–¸ `}<strong parentName=\"p\">{`getAll`}</strong>{`(): `}<inlineCode parentName=\"p\">{`Object< string`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Object<string`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`string> >`}</inlineCode></p>\n    <p>{`Returns a map where key is plugin ID and value is a nested map containing all the shared metadata for that plugin ID (i.e. the result of calling `}<inlineCode parentName=\"p\">{`getForPluginId()`}</inlineCode>{` with that ID).`}</p>\n    <p>{`This map is a clone of the stored metadata, so modifying it has no effect.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let allSharedMetadata = node.sharedPluginData.getAll();\nconsole.log(\n  \"Plugin A's 'foo' value:\",\n  allSharedMetadata[\"A\"] && allSharedMetadata[\"A\"].foo\n);\nconsole.log(\n  \"All of plugin B's shared metadata on this node:\",\n  allSharedMetadata[\"B\"]\n);\nconsole.log(\n  \"List of plugins storing shared metadata on this node:\",\n  Object.keys(allSharedMetadata)\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"getforpluginid\"\n    }}>{`getForPluginId()`}</h2>\n    <p>{`â–¸ `}<strong parentName=\"p\">{`getForPluginId`}</strong>{`(`}<inlineCode parentName=\"p\">{`pluginId`}</inlineCode>{`): `}<inlineCode parentName=\"p\">{`Object<string`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`string>`}</inlineCode></p>\n    <p>{`Returns a map of key-value string pairs containing all shared metadata stored on this node by the given plugin. May be an empty object (zero keys), but is never null.`}</p>\n    <p>{`This map is a clone of the stored metadata, so modifying it has no effect.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pluginId`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const MY_PLUGIN_ID = \"<your manifest's plugin ID here>\";\nlet mySharedMetadata = node.sharedPluginData.getForPluginId(MY_PLUGIN_ID);\nconsole.log(\n  \"My shared 'foo' & 'bar' values:\",\n  mySharedMetadata.foo,\n  mySharedMetadata.bar\n);\n\nconsole.log(\n  \"Plugin B's shared 'foo' value:\",\n  node.sharedPluginData.getForPluginId(\"B\").foo\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"keys\"\n    }}>{`keys()`}</h2>\n    <p>{`â–¸ `}<strong parentName=\"p\">{`keys`}</strong>{`(`}<inlineCode parentName=\"p\">{`pluginId`}</inlineCode>{`): `}<inlineCode parentName=\"p\">{`Array<string>`}</inlineCode></p>\n    <p>{`Returns a list of all keys stored on this node by the given plugin. May be empty (length zero), but is never null.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pluginId`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`console.log(\n  \"All properties stored by plugin A on this node:\",\n  node.sharedPluginData.keys(\"A\")\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"getitem\"\n    }}>{`getItem()`}</h2>\n    <p>{`â–¸ `}<strong parentName=\"p\">{`getItem`}</strong>{`(`}<inlineCode parentName=\"p\">{`pluginId`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`key`}</inlineCode>{`): `}<inlineCode parentName=\"p\">{`?string`}</inlineCode></p>\n    <p>{`Returns the value stored under the given key on this node by the given plugin, or undefined if the plugin hasn't stored anything under the given key.`}</p>\n    <p>{`Because metadata is stored separately per plugin, two plugins can store two different values under the same key.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pluginId`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`key`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// These are two different values, stored independently per plugin\nconsole.log(\n  \"Plugin A's 'foo' value:\",\n  node.sharedPluginData.getItem(\"A\", \"foo\")\n);\nconsole.log(\n  \"Plugin B's 'foo' value:\",\n  node.sharedPluginData.getItem(\"B\", \"foo\")\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setitem\"\n    }}>{`setItem()`}</h2>\n    <p>{`â–¸ `}<strong parentName=\"p\">{`setItem`}</strong>{`(`}<inlineCode parentName=\"p\">{`pluginId`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`key`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{`)`}</p>\n    <p>{`Set a metadata key which can be read by any other plugin.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pluginId`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><em parentName=\"td\">{`Must`}</em>{` be equal to your plugin's ID.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`key`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`value`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`If undefined, behaves as if you'd called `}<inlineCode parentName=\"td\">{`removeItem()`}</inlineCode>{` instead.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const MY_PLUGIN_ID = \"<your manifest's plugin ID here>\";\nnode.sharedPluginData.setItem(MY_PLUGIN_ID, \"foo\", \"42\");\n\nnode.sharedPluginData.setItem(\"other_plugin_id\", \"foo\", \"42\");\n// ^ ERROR: other plugin's metadata is read-only\n\nconsole.log(node.sharedPluginData.getItem(MY_PLUGIN_ID, \"foo\")); // \"42\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"removeitem\"\n    }}>{`removeItem()`}</h2>\n    <p>{`â–¸ `}<strong parentName=\"p\">{`removeItem`}</strong>{`(`}<inlineCode parentName=\"p\">{`pluginId`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`key`}</inlineCode>{`)`}</p>\n    <p>{`Clears a shared metadata key stored by your plugin.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pluginId`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><em parentName=\"td\">{`Must`}</em>{` be equal to your plugin's ID.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`key`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Â `}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const MY_PLUGIN_ID = \"<your manifest's plugin ID here>\";\nnode.sharedPluginData.setItem(MY_PLUGIN_ID, \"foo\", \"42\");\nconsole.log(node.sharedPluginData.getItem(MY_PLUGIN_ID, \"foo\")); // \"42\"\n\nnode.sharedPluginData.removeItem(MY_PLUGIN_ID, \"foo\");\nconsole.log(node.sharedPluginData.getItem(MY_PLUGIN_ID, \"foo\")); // undefined\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"tostring\"\n    }}>{`toString()`}</h2>\n    <p>{`â–¸ `}<strong parentName=\"p\">{`toString`}</strong>{`(): `}<inlineCode parentName=\"p\">{`string`}</inlineCode></p>\n    <p>{`Provided for convenience: you can `}<inlineCode parentName=\"p\">{`console.log(node.sharedPluginData)`}</inlineCode>{` to see the value of `}<inlineCode parentName=\"p\">{`getAll()`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"tojson\"\n    }}>{`toJSON()`}</h2>\n    <p>{`â–¸ `}<strong parentName=\"p\">{`toJSON`}</strong>{`(): `}<inlineCode parentName=\"p\">{`Object`}</inlineCode></p>\n    <p>{`Provided for convenience: you can include a PerPluginStorage object inside data you are going to convert to JSON, even though it is not a plain JavaScript object. Returns the same value as `}<inlineCode parentName=\"p\">{`getAll()`}</inlineCode>{`.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let myData = {\n  foo: 42,\n  bar: \"Some other data\",\n  metadata: node.sharedPluginData,\n};\nlet jsonString = JSON.stringify(myData);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}