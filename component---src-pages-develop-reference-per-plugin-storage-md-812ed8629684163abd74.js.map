{"version":3,"sources":["webpack:///./src/pages/develop/reference/PerPluginStorage.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","name","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-develop-reference-per-plugin-storage-md-812ed8629684163abd74.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <a name=\"PerPluginStorage\"></a>\n    <h2 {...{\n      \"id\": \"perpluginstorage\"\n    }}>{`PerPluginStorage`}</h2>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: interface`}</p>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 29`}</p>\n    <p>{`Stores metadata accessible to multiple plugins, separated into silos by plugin ID. Your plugin can read & write the storage for its own plugin ID, but storage for other plugin IDs is `}<em parentName=\"p\">{`read-only`}</em>{`.`}</p>\n    <p>{`Each per-plugin storage silo is a collection of key-value pairs. Keys and values must both be strings.`}</p>\n    <p><em parentName=\"p\">{`Each`}</em>{` scenenode has its own metadata storage, accessed via `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/reference/scenegraph/#SceneNode-sharedPluginData\"\n      }}><inlineCode parentName=\"a\">{`SceneNode.sharedPluginData`}</inlineCode></a>{`. To store general metadata that is not specific to one scenenode, use `}<inlineCode parentName=\"p\">{`sharedPluginData`}</inlineCode>{` on the `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/reference/scenegraph/#module_scenegraph-root\"\n      }}>{`document's scenegraph root`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// This example shows how to save & retrieve rich JSON data in shared metadata storage.\n// See below for simpler examples of using individual APIs.\nconst PLUGIN_ID = \"<your manifest's plugin ID here>\";\n\nlet richObject = {\n    list: [2, 4, 6],\n    name: \"Hello world\"\n};\nnode.sharedPluginData.setItem(PLUGIN_ID, \"richData\", JSON.stringify(richObject));\n\n// Later on...\n// (This could be in a different plugin, if it passes the original plugin's ID here)\nlet jsonString = node.sharedPluginData.getItem(PLUGIN_ID, \"richData\");\nif (jsonString) {  // may be undefined\n    let richObjectCopy = JSON.parse(jsonString);\n    console.log(richObjectCopy.list.length);  // 3\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#PerPluginStorage\"\n        }}>{`PerPluginStorage`}</a>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#getAll\"\n            }}>{`.getAll()`}</a>{` ⇒ `}<inlineCode parentName=\"li\">{`!Object&lt; string, !Object&lt;string, string&gt; &gt;`}</inlineCode></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#getForPluginId\"\n            }}>{`.getForPluginId(pluginId)`}</a>{` ⇒ `}<inlineCode parentName=\"li\">{`!Object&lt;string, string&gt;`}</inlineCode></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#keys\"\n            }}>{`.keys(pluginId)`}</a>{` ⇒ `}<inlineCode parentName=\"li\">{`!Array&lt;string&gt;`}</inlineCode></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#getItem\"\n            }}>{`.getItem(pluginId, key)`}</a>{` ⇒ `}<inlineCode parentName=\"li\">{`?string`}</inlineCode></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#setItem\"\n            }}>{`.setItem(pluginId, key, value)`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#removeItem\"\n            }}>{`.removeItem(pluginId, key)`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#toString\"\n            }}>{`.toString()`}</a>{` ⇒ `}<inlineCode parentName=\"li\">{`string`}</inlineCode></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#toJSON\"\n            }}>{`.toJSON()`}</a>{` ⇒ `}<inlineCode parentName=\"li\">{`!Object`}</inlineCode></li>\n        </ul>\n      </li>\n    </ul>\n    <a name=\"getAll\"></a>\n## perPluginStorage.getAll() ⇒ `!Object&lt; string, !Object&lt;string, string&gt; &gt;`\n    <p>{`Returns a map where key is plugin ID and value is a nested map containing all the shared metadata for that plugin ID (i.e. the result of calling `}<inlineCode parentName=\"p\">{`getForPluginId()`}</inlineCode>{` with that ID).`}</p>\n    <p>{`This map is a clone of the stored metadata, so modifying it has no effect.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let allSharedMetadata = node.sharedPluginData.getAll();\nconsole.log(\"Plugin A's 'foo' value:\",\n            allSharedMetadata[\"A\"] && allSharedMetadata[\"A\"].foo);\nconsole.log(\"All of plugin B's shared metadata on this node:\",\n            allSharedMetadata[\"B\"]);\nconsole.log(\"List of plugins storing shared metadata on this node:\",\n            Object.keys(allSharedMetadata));\n`}</code></pre>\n    <hr></hr>\n    <a name=\"getForPluginId\"></a>\n## perPluginStorage.getForPluginId(pluginId) ⇒ `!Object&lt;string, string&gt;`\n    <p>{`Returns a map of key-value string pairs containing all shared metadata stored on this node by the given plugin. May be an empty object (zero keys), but is never null.`}</p>\n    <p>{`This map is a clone of the stored metadata, so modifying it has no effect.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pluginId`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const MY_PLUGIN_ID = \"<your manifest's plugin ID here>\";\nlet mySharedMetadata = node.sharedPluginData.getForPluginId(MY_PLUGIN_ID);\nconsole.log(\"My shared 'foo' & 'bar' values:\",\n            mySharedMetadata.foo, mySharedMetadata.bar);\n\nconsole.log(\"Plugin B's shared 'foo' value:\",\n            node.sharedPluginData.getForPluginId(\"B\").foo);\n`}</code></pre>\n    <hr></hr>\n    <a name=\"keys\"></a>\n## perPluginStorage.keys(pluginId) ⇒ `!Array&lt;string&gt;`\n    <p>{`Returns a list of all keys stored on this node by the given plugin. May be empty (length zero), but is never null.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pluginId`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`console.log(\"All properties stored by plugin A on this node:\",\n            node.sharedPluginData.keys(\"A\"));\n`}</code></pre>\n    <hr></hr>\n    <a name=\"getItem\"></a>\n## perPluginStorage.getItem(pluginId, key) ⇒ `?string`\n    <p>{`Returns the value stored under the given key on this node by the given plugin, or undefined if the plugin hasn't stored anything under the given key.`}</p>\n    <p>{`Because metadata is stored separately per plugin, two plugins can store two different values under the same key.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pluginId`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`key`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// These are two different values, stored independently per plugin\nconsole.log(\"Plugin A's 'foo' value:\", node.sharedPluginData.getItem(\"A\", \"foo\"));\nconsole.log(\"Plugin B's 'foo' value:\", node.sharedPluginData.getItem(\"B\", \"foo\"));\n`}</code></pre>\n    <hr></hr>\n    <a name=\"setItem\"></a>\n## perPluginStorage.setItem(pluginId, key, value)\n    <p>{`Set a metadata key which can be read by any other plugin.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pluginId`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><em parentName=\"td\">{`Must`}</em>{` be equal to your plugin's ID.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`key`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`value`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`If undefined, behaves as if you'd called `}<inlineCode parentName=\"td\">{`removeItem()`}</inlineCode>{` instead.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const MY_PLUGIN_ID = \"<your manifest's plugin ID here>\";\nnode.sharedPluginData.setItem(MY_PLUGIN_ID, \"foo\", \"42\");\n\nnode.sharedPluginData.setItem(\"other_plugin_id\", \"foo\", \"42\");\n// ^ ERROR: other plugin's metadata is read-only\n\nconsole.log(node.sharedPluginData.getItem(MY_PLUGIN_ID, \"foo\"));  // \"42\"\n`}</code></pre>\n    <hr></hr>\n    <a name=\"removeItem\"></a>\n## perPluginStorage.removeItem(pluginId, key)\n    <p>{`Clears a shared metadata key stored by your plugin.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pluginId`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><em parentName=\"td\">{`Must`}</em>{` be equal to your plugin's ID.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`key`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{` `}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const MY_PLUGIN_ID = \"<your manifest's plugin ID here>\";\nnode.sharedPluginData.setItem(MY_PLUGIN_ID, \"foo\", \"42\");\nconsole.log(node.sharedPluginData.getItem(MY_PLUGIN_ID, \"foo\"));  // \"42\"\n\nnode.sharedPluginData.removeItem(MY_PLUGIN_ID, \"foo\");\nconsole.log(node.sharedPluginData.getItem(MY_PLUGIN_ID, \"foo\"));  // undefined\n`}</code></pre>\n    <hr></hr>\n    <a name=\"toString\"></a>\n## perPluginStorage.toString() ⇒ `string`\n    <p>{`Provided for convenience: you can `}<inlineCode parentName=\"p\">{`console.log(node.sharedPluginData)`}</inlineCode>{` to see the value of `}<inlineCode parentName=\"p\">{`getAll()`}</inlineCode>{`.`}</p>\n    <hr></hr>\n    <a name=\"toJSON\"></a>\n## perPluginStorage.toJSON() ⇒ `!Object`\n    <p>{`Provided for convenience: you can include a PerPluginStorage object inside data you are going to convert to JSON, even though it is not a plain JavaScript object. Returns the same value as `}<inlineCode parentName=\"p\">{`getAll()`}</inlineCode>{`.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let myData = {\n    foo: 42,\n    bar: \"Some other data\",\n    metadata: node.sharedPluginData\n};\nlet jsonString = JSON.stringify(myData);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}