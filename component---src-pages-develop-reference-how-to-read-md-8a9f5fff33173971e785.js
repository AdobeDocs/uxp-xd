(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{"+dsR":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return i})),n.d(t,"default",(function(){return c}));var a=n("wx14"),d=n("zLVn"),r=(n("q1tI"),n("7ljp")),m=n("ndZU"),i=(n("qKvR"),{}),l={_frontmatter:i},b=m.a;function c(e){var t=e.components,n=Object(d.a)(e,["components"]);return Object(r.mdx)(b,Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.mdx)("h1",{id:"how-to-read-the-reference-documentation"},"How to read the reference documentation"),Object(r.mdx)("p",null,"Please take a moment to familiarize yourself with the types of symbols you'll see throughout the technical documentation."),Object(r.mdx)("h2",{id:"type-annotations"},"Type Annotations"),Object(r.mdx)("p",null,"This shorthand is used to indicate the types of arguments, return values, and object properties."),Object(r.mdx)("table",null,Object(r.mdx)("thead",{parentName:"table"},Object(r.mdx)("tr",{parentName:"thead"},Object(r.mdx)("th",Object(a.a)({parentName:"tr"},{align:null}),"Annotation"),Object(r.mdx)("th",Object(a.a)({parentName:"tr"},{align:null}),"Meaning"))),Object(r.mdx)("tbody",{parentName:"table"},Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.mdx)("inlineCode",{parentName:"td"},"[day]")),Object(r.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),"The parameter is optional. If it is not supplied, it will be ",Object(r.mdx)("inlineCode",{parentName:"td"},"undefined"),".")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.mdx)("inlineCode",{parentName:"td"},'[day="Monday"]')),Object(r.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),"The parameter is optional, but will be supplied a default value if not provided.")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.mdx)("inlineCode",{parentName:"td"},"?Array")),Object(r.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),"Type can be an Array OR ",Object(r.mdx)("inlineCode",{parentName:"td"},"null"),".")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.mdx)("inlineCode",{parentName:"td"},"!Array")),Object(r.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),"Type must be an Array; ",Object(r.mdx)("em",{parentName:"td"},"cannot")," be ",Object(r.mdx)("inlineCode",{parentName:"td"},"null"),". Primitive types (",Object(r.mdx)("inlineCode",{parentName:"td"},"string"),", ",Object(r.mdx)("inlineCode",{parentName:"td"},"number"),", ",Object(r.mdx)("inlineCode",{parentName:"td"},"boolean"),") imply ",Object(r.mdx)("inlineCode",{parentName:"td"},"!")," unless explicitly denoted otherwise with ",Object(r.mdx)("inlineCode",{parentName:"td"},"?"),".")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),"`string"),Object(r.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),"number`")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.mdx)("inlineCode",{parentName:"td"},"{foo:number, bar:string}")),Object(r.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),"Type is an object with two properties: ",Object(r.mdx)("inlineCode",{parentName:"td"},"foo"),", which is type ",Object(r.mdx)("inlineCode",{parentName:"td"},"number"),"; and ",Object(r.mdx)("inlineCode",{parentName:"td"},"bar"),", which is type ",Object(r.mdx)("inlineCode",{parentName:"td"},"string"),".")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.mdx)("inlineCode",{parentName:"td"},"string[]")),Object(r.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),"Type is an array of strings.")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.mdx)("inlineCode",{parentName:"td"},"Array<string>")),Object(r.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),"Type is an array of strings.")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.mdx)("inlineCode",{parentName:"td"},"Promise<string>")),Object(r.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),"Type is a Promise that is asynchronously fulfilled with a string.")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.mdx)("inlineCode",{parentName:"td"},"*")),Object(r.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),"Can be any type. ",Object(r.mdx)("strong",{parentName:"td"},"NOTE:")," In this early stage, ",Object(r.mdx)("inlineCode",{parentName:"td"},"*")," is sometimes used as a placeholder for incomplete documentation.")))))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-develop-reference-how-to-read-md-8a9f5fff33173971e785.js.map