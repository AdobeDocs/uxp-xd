(window.webpackJsonp=window.webpackJsonp||[]).push([[182],{UOJj:function(e,t,n){e.exports=n.p+"static/export-rendition-pick-file-3a2546acc11cbbba17f822289240a2c3.png"},y5bw:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return r})),n.d(t,"default",(function(){return p}));var a=n("wx14"),i=n("zLVn"),o=(n("q1tI"),n("7ljp")),l=n("ndZU"),r=(n("qKvR"),{}),d={_frontmatter:r},c=l.a;function p(e){var t=e.components,l=Object(i.a)(e,["components"]);return Object(o.mdx)(c,Object(a.a)({},d,l,{components:t,mdxType:"MDXLayout"}),Object(o.mdx)("h1",{id:"how-to-export-a-rendition"},"How to export a rendition"),Object(o.mdx)("p",null,"This sample describes how an XD plugin can invoke the default folder picker and generate a rendition of the selected artboard for export."),Object(o.mdx)("h2",{id:"prerequisites"},"Prerequisites"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},"Basic knowledge of HTML, CSS, and JavaScript."),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/tutorials/quick-start/"}),"Quick Start Tutorial")),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/tutorials/debugging/"}),"Debugging Tutorial"))),Object(o.mdx)("h2",{id:"development-steps"},"Development Steps"),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("strong",{parentName:"p"},"Info"),"\nComplete code for this plugin can be found ",Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/AdobeXD/Plugin-Samples/tree/master/how-to-export-a-rendition"}),"on GitHub"),".")),Object(o.mdx)("h3",{id:"1-prepare-your-plugin-scaffold"},"1. Prepare your plugin scaffold"),Object(o.mdx)("p",null,"First, edit the manifest file for the plugin you created in our ",Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"/uxp-xd/tutorials/quick-start"}),"Quick Start Tutorial"),"."),Object(o.mdx)("p",null,"Replace the ",Object(o.mdx)("inlineCode",{parentName:"p"},"uiEntryPoints")," field of the manifest with the following:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'"uiEntryPoints": [\n    {\n        "type": "menu",\n        "label": "Export Rendition",\n        "commandId": "exportRendition"\n    }\n]\n')),Object(o.mdx)("p",null,"If you're curious about what each entry means, ",Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"/uxp-xd/reference/structure/manifest/"}),"see the manifest documentation"),", where you can also learn about all manifest requirements for a plugin to be published in the XD Plugin Manager."),Object(o.mdx)("p",null,"Then, update your ",Object(o.mdx)("inlineCode",{parentName:"p"},"main.js")," file, mapping the manifest's ",Object(o.mdx)("inlineCode",{parentName:"p"},"commandId")," to a handler function."),Object(o.mdx)("p",null,"Replace the content of your ",Object(o.mdx)("inlineCode",{parentName:"p"},"main.js")," file with the following code:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"async function exportRendition(selection) {\n    if (selection.items.length > 0) {\n        // The body of this function is added later\n    }\n}\n\nmodule.exports = {\n    commands: {\n        exportRendition\n    }\n};\n")),Object(o.mdx)("p",null,"A couple of notes about the handler function shell above:"),Object(o.mdx)("ol",null,Object(o.mdx)("li",{parentName:"ol"},"This function will run ",Object(o.mdx)("em",{parentName:"li"},"asynchronously"),", as indicated by the ",Object(o.mdx)("inlineCode",{parentName:"li"},"async")," keyword at the beginning of the line. To learn more about what this means, see ",Object(o.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/reference/javascript/sync-async/"}),"our document on sync and async support"),"."),Object(o.mdx)("li",{parentName:"ol"},"Since this plugin will require user to select an object, we use an ",Object(o.mdx)("inlineCode",{parentName:"li"},"if")," statement to check if there is an XD object selected.")),Object(o.mdx)("p",null,"The remaining steps in this tutorial describe additional edits to the ",Object(o.mdx)("inlineCode",{parentName:"p"},"main.js")," file."),Object(o.mdx)("h3",{id:"2-require-in-xd-api-dependencies"},"2. Require in XD API dependencies"),Object(o.mdx)("p",null,"For this tutorial, we just need access to one XD module and one UXP class."),Object(o.mdx)("p",null,"Add the following lines to the top of your ",Object(o.mdx)("inlineCode",{parentName:"p"},"main.js")," file:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// Add this to the top of your main.js file\nconst application = require("application");\nconst fs = require("uxp").storage.localFileSystem;\n')),Object(o.mdx)("p",null,"Now the ",Object(o.mdx)("inlineCode",{parentName:"p"},"application")," module and ",Object(o.mdx)("inlineCode",{parentName:"p"},"localFileSystem")," class are required in and ready to be used. These modules are required to invoke the folder picker and export renditions."),Object(o.mdx)("h3",{id:"3-invoke-the-folder-picker"},"3. Invoke the folder picker"),Object(o.mdx)("p",null,"Here, we'll use ",Object(o.mdx)("inlineCode",{parentName:"p"},"uxp.storage.localFileSystem")," (our ",Object(o.mdx)("inlineCode",{parentName:"p"},"fs")," constant) to invoke the folder picker:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const folder = await fs.getFolder();\nconst file = await folder.createFile("rendition.png");\n')),Object(o.mdx)("p",null,"This will invoke the default folder picker for user to choose the save directory and create a file named ",Object(o.mdx)("inlineCode",{parentName:"p"},"rendition.png"),"."),Object(o.mdx)("h3",{id:"4-define-your-rendition-settings"},"4. Define your rendition settings"),Object(o.mdx)("p",null,"Next, we'll define the settings for our desired renditions."),Object(o.mdx)("p",null,"Note the data structure in the code below: an array of objects (in this case, one object)."),Object(o.mdx)("p",null,"Each of the numbered comments are explained below the code:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let renditionSettings = [{\n    node: selection.items[0],               // [1]\n    outputFile: file,                       // [2]\n    type: application.RenditionType.PNG,    // [3]\n    scale: 2                                // [4]\n}];\n")),Object(o.mdx)("ol",null,Object(o.mdx)("li",{parentName:"ol"},Object(o.mdx)("inlineCode",{parentName:"li"},"selection.items[0]")," refers to the first user-selected item in the document"),Object(o.mdx)("li",{parentName:"ol"},"Set the ",Object(o.mdx)("inlineCode",{parentName:"li"},"outputFile")," property to the ",Object(o.mdx)("inlineCode",{parentName:"li"},"file")," constant we created in step #3"),Object(o.mdx)("li",{parentName:"ol"},"Set the ",Object(o.mdx)("inlineCode",{parentName:"li"},"type")," property to ",Object(o.mdx)("inlineCode",{parentName:"li"},"application.RenditionType.PNG")),Object(o.mdx)("li",{parentName:"ol"},"Set the desired scale of the exported rendition")),Object(o.mdx)("p",null,"We'll use this data structure containing our settings in the next step."),Object(o.mdx)("h3",{id:"5-create-renditions"},"5. Create renditions"),Object(o.mdx)("p",null,"This is where we attempt to create the renditions:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"application.createRenditions(renditionSettings)    // [1]\n    .then(results => {                             // [2]\n        console.log(`PNG rendition has been saved at ${results[0].outputFile.nativePath}`);\n    })\n    .catch(error => {                              // [3]\n        console.log(error);\n    });\n")),Object(o.mdx)("ol",null,Object(o.mdx)("li",{parentName:"ol"},"The ",Object(o.mdx)("inlineCode",{parentName:"li"},"application#createRenditions")," method accepts as an argument the ",Object(o.mdx)("inlineCode",{parentName:"li"},"renditionSettings")," data structure that we created in step #4."),Object(o.mdx)("li",{parentName:"ol"},Object(o.mdx)("inlineCode",{parentName:"li"},"createRenditions")," returns a Promise. We log success to the developer console."),Object(o.mdx)("li",{parentName:"ol"},"Any errors will land in ",Object(o.mdx)("inlineCode",{parentName:"li"},".catch"),", which we also log to the developer console.")),Object(o.mdx)("h3",{id:"6-run-the-plugin"},"6. Run the plugin"),Object(o.mdx)("p",null,"After saving all of your changes, reload the plugin in XD. Make sure to select an artboard and run the plugin command."),Object(o.mdx)("p",null,"You should see a folder picker like this one:"),Object(o.mdx)("p",null,Object(o.mdx)("img",{alt:"System folder picker screen",src:n("UOJj")})),Object(o.mdx)("p",null,"The rendition will be saved at the specified location."),Object(o.mdx)("p",null,"Open the developer console to see your success or error message from the previous step."),Object(o.mdx)("h2",{id:"next-steps"},"Next Steps"),Object(o.mdx)("p",null,"Want to expand on what you learned here? Have a look at these references to see options for customizing this sample plugin:"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/reference/uxp/storage-index/"}),"File I/O")),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/reference/application/#applicationcreaterenditionsrenditions"}),"Export Renditions"))),Object(o.mdx)("p",null,"Ready to explore further? Take a look at our other resources:"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/tutorials/"}),"Tutorials")),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/AdobeXD/plugin-samples"}),"Sample code repos"))))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-develop-tutorials-how-to-export-a-rendition-index-md-2b1345c7b3e9fdb9a46a.js.map