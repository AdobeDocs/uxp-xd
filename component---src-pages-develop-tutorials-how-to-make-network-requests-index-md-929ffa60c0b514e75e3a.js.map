{"version":3,"sources":["webpack://uxp-xd/./src/pages/develop/tutorials/how-to-make-network-requests/index.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-develop-tutorials-how-to-make-network-requests-index-md-929ffa60c0b514e75e3a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"how-to-make-network-requests\"\n    }}>{`How to make network requests`}</h1>\n    <p>{`This sample app will show you how to load an image in an XD object (Rectangle or Artboard) by making network requests using `}<inlineCode parentName=\"p\">{`XHR`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`fetch`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Basic knowledge of HTML, CSS, and JavaScript`}</li>\n      <li parentName=\"ul\">{`Basic knowledge of `}<inlineCode parentName=\"li\">{`XMLHttpRequest`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`fetch`}</inlineCode></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/tutorials/quick-start/\"\n        }}>{`Quick Start Tutorial`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/tutorials/debugging/\"\n        }}>{`Debugging Tutorial`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"development-steps\"\n    }}>{`Development Steps`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Info`}</strong>{`\nComplete code for this plugin can be found `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/AdobeXD/Plugin-Samples/tree/master/how-to-make-network-requests\"\n        }}>{`on GitHub`}</a>{`.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"1-create-plugin-scaffold\"\n    }}>{`1. Create plugin scaffold`}</h3>\n    <p>{`First, edit the manifest file for the plugin you created in our `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/tutorials/quick-start\"\n      }}>{`Quick Start Tutorial`}</a>{`.`}</p>\n    <p>{`Replace the `}<inlineCode parentName=\"p\">{`uiEntryPoints`}</inlineCode>{` field of the manifest with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"uiEntryPoints\": [\n    {\n        \"type\": \"menu\",\n        \"label\": \"How to make network requests\",\n        \"commandId\": \"applyImage\"\n    }\n]\n`}</code></pre>\n    <p>{`If you're curious about what each entry means, `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/plugin-structure/manifest/\"\n      }}>{`see the manifest documentation`}</a>{`, where you can also learn about all manifest requirements for a plugin to be published in the XD Plugin Manager.`}</p>\n    <p>{`Then, update your `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file, mapping the manifest's `}<inlineCode parentName=\"p\">{`commandId`}</inlineCode>{` to a handler function.`}</p>\n    <p>{`Replace the content of your `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file with the following code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function applyImage(selection) {\n  // The body of this function is added later\n}\n\nmodule.exports = {\n  commands: {\n    applyImage,\n  },\n};\n`}</code></pre>\n    <p>{`The remaining steps in this tutorial describe additional edits to the `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file.`}</p>\n    <h3 {...{\n      \"id\": \"2-require-in-xd-api-dependencies\"\n    }}>{`2. Require in XD API dependencies`}</h3>\n    <p>{`For this tutorial, we just need access to one XD scenegraph class.`}</p>\n    <p>{`Add the following lines to the top of your `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Add this to the top of your main.js file\nconst { ImageFill } = require(\"scenegraph\");\n`}</code></pre>\n    <p>{`Now the `}<inlineCode parentName=\"p\">{`ImageFill`}</inlineCode>{` class is imported and ready to be used.`}</p>\n    <h3 {...{\n      \"id\": \"3-write-a-helper-function-to-make-xhr-requests\"\n    }}>{`3. Write a helper function to make XHR requests`}</h3>\n    <p>{`Our XHR helper `}<inlineCode parentName=\"p\">{`xhrBinary`}</inlineCode>{` will make an HTTP GET request to any URL it is passed, and a return a Promise with an `}<inlineCode parentName=\"p\">{`arraybuffer`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function xhrBinary(url) {\n  // [1]\n  return new Promise((resolve, reject) => {\n    // [2]\n    const req = new XMLHttpRequest(); // [3]\n    req.onload = () => {\n      if (req.status === 200) {\n        try {\n          const arr = new Uint8Array(req.response); // [4]\n          resolve(arr); // [5]\n        } catch (err) {\n          reject(\\`Couldnt parse response. \\${err.message}, \\${req.response}\\`);\n        }\n      } else {\n        reject(\\`Request had an error: \\${req.status}\\`);\n      }\n    };\n    req.onerror = reject;\n    req.onabort = reject;\n    req.open(\"GET\", url, true);\n    req.responseType = \"arraybuffer\"; // [6]\n    req.send();\n  });\n}\n`}</code></pre>\n    <ol>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`xhrBinary`}</inlineCode>{` function takes a url as a parameter`}</li>\n      <li parentName=\"ol\">{`The function returns a Promise`}</li>\n      <li parentName=\"ol\">{`The function uses `}<inlineCode parentName=\"li\">{`XMLHttpRequest`}</inlineCode>{` to make network requests`}</li>\n      <li parentName=\"ol\">{`Once the correct response comes back, the function uses `}<inlineCode parentName=\"li\">{`Unit8Array`}</inlineCode>{` method to convert the response to an `}<inlineCode parentName=\"li\">{`arraybuffer`}</inlineCode></li>\n      <li parentName=\"ol\">{`After the conversion, the promise is resolved`}</li>\n      <li parentName=\"ol\">{`Make sure the set the `}<inlineCode parentName=\"li\">{`responseType`}</inlineCode>{` as `}<inlineCode parentName=\"li\">{`arraybuffer`}</inlineCode></li>\n    </ol>\n    <h3 {...{\n      \"id\": \"4-write-a-helper-to-apply-imagefill\"\n    }}>{`4. Write a helper to apply `}<inlineCode parentName=\"h3\">{`ImageFill`}</inlineCode></h3>\n    <p>{`This helper function will create an `}<inlineCode parentName=\"p\">{`ImageFill`}</inlineCode>{` instance that can be applied to a user-selected XD scengraph object:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function applyImagefill(selection, file) {\n  // [1]\n  const imageFill = new ImageFill(file); // [2]\n  selection.items[0].fill = imageFill; // [3]\n}\n`}</code></pre>\n    <ol>\n      <li parentName=\"ol\">{`The function accepts the `}<inlineCode parentName=\"li\">{`selection`}</inlineCode>{` and a `}<inlineCode parentName=\"li\">{`file`}</inlineCode>{` as parameters`}</li>\n      <li parentName=\"ol\">{`Use the `}<inlineCode parentName=\"li\">{`ImageFill`}</inlineCode>{` class to create the fill`}</li>\n      <li parentName=\"ol\">{`Apply the image to the user-selected XD object`}</li>\n    </ol>\n    <p>{`We'll use this function in the next step.`}</p>\n    <h3 {...{\n      \"id\": \"5-write-a-helper-function-to-download-the-image\"\n    }}>{`5. Write a helper function to download the image`}</h3>\n    <p>{`Ok, you've just made three helper functions. Now we're going to tie them all together!`}</p>\n    <p>{`Note the use of the `}<inlineCode parentName=\"p\">{`async`}</inlineCode>{` keyword at the beginning of the function.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function downloadImage(selection, jsonResponse) {\n  // [1]\n  try {\n    const photoUrl = jsonResponse.message; // [2]\n    const photoObj = await xhrBinary(photoUrl); // [3]\n    const tempFolder = await fs.getTemporaryFolder(); // [4]\n    const tempFile = await tempFolder.createFile(\"tmp\", { overwrite: true }); // [5]\n    await tempFile.write(photoObj, { format: uxp.formats.binary }); // [6]\n    applyImagefill(selection, tempFile); // [7]\n  } catch (err) {\n    console.log(\"error\");\n    console.log(err.message);\n  }\n}\n`}</code></pre>\n    <ol>\n      <li parentName=\"ol\">{`This helper function accepts the `}<inlineCode parentName=\"li\">{`selection`}</inlineCode>{` and a JSON response object as parameters`}</li>\n      <li parentName=\"ol\">{`Gets the URL from the JSON response`}</li>\n      <li parentName=\"ol\">{`Uses our async `}<inlineCode parentName=\"li\">{`xhrBinary`}</inlineCode>{` function to get an `}<inlineCode parentName=\"li\">{`arraybuffer`}</inlineCode></li>\n      <li parentName=\"ol\">{`Uses the `}<inlineCode parentName=\"li\">{`fs`}</inlineCode>{` module and its `}<inlineCode parentName=\"li\">{`getTemporaryFolder`}</inlineCode>{` method to create a temp folder`}</li>\n      <li parentName=\"ol\">{`Uses the `}<inlineCode parentName=\"li\">{`createFile`}</inlineCode>{` method to create a temp file`}</li>\n      <li parentName=\"ol\">{`Uses the `}<inlineCode parentName=\"li\">{`write`}</inlineCode>{` method to write the binary file to store`}</li>\n      <li parentName=\"ol\">{`Uses `}<inlineCode parentName=\"li\">{`applyImagefill`}</inlineCode>{` to place the image into a user-selected XD object`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"6-write-the-main-handler-function\"\n    }}>{`6. Write the main handler function`}</h3>\n    <p>{`This is the function that will be called with the user runs our plugin command.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function applyImage(selection) {\n  if (selection.items.length) {\n    // [1]\n    const url = \"https://dog.ceo/api/breeds/image/random\"; // [2]\n    return fetch(url) // [3]\n      .then(function (response) {\n        return response.json(); // [4]\n      })\n      .then(function (jsonResponse) {\n        return downloadImage(selection, jsonResponse); // [5]\n      });\n  } else {\n    console.log(\"Please select a shape to apply the downloaded image.\");\n  }\n}\n`}</code></pre>\n    <ol>\n      <li parentName=\"ol\">{`Checks if user has selected at least one object`}</li>\n      <li parentName=\"ol\">{`This is an example public URL to an image`}</li>\n      <li parentName=\"ol\">{`Pass the URL to `}<inlineCode parentName=\"li\">{`fetch`}</inlineCode></li>\n      <li parentName=\"ol\">{`The first `}<inlineCode parentName=\"li\">{`.then`}</inlineCode>{` block returns the response JSON object`}</li>\n      <li parentName=\"ol\">{`The second `}<inlineCode parentName=\"li\">{`.then`}</inlineCode>{` block passes the `}<inlineCode parentName=\"li\">{`selection`}</inlineCode>{` and our JSON reponse to our `}<inlineCode parentName=\"li\">{`downloadImage`}</inlineCode>{` function, ultimately placing it in the document`}</li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}