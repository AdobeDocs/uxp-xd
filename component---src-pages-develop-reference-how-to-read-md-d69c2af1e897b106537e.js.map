{"version":3,"sources":["webpack://uxp-xd/./src/pages/develop/reference/how-to-read.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mQAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,2CADR,4CAGA,gJACA,eACE,GAAM,oBADR,qBAGA,uHACA,uBACE,kBAAOC,WAAW,UAChB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MADX,eAGA,eAAIA,WAAW,KACb,MAAS,MADX,cAKJ,kBAAOA,WAAW,UAChB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,OACR,uBAAYA,WAAW,MAAvB,WACH,eAAIA,WAAW,KACb,MAAS,MADX,iEAEoE,uBAAYA,WAAW,MAAvB,aAFpE,OAIF,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,OACR,uBAAYA,WAAW,MAAvB,oBACH,eAAIA,WAAW,KACb,MAAS,MADX,sFAIF,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,OACR,uBAAYA,WAAW,MAAvB,YACH,eAAIA,WAAW,KACb,MAAS,MADX,4BAE+B,uBAAYA,WAAW,MAAvB,QAF/B,OAIF,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,OACR,uBAAYA,WAAW,MAAvB,YACH,eAAIA,WAAW,KACb,MAAS,MADX,2BAE8B,eAAIA,WAAW,MAAf,UAF9B,QAEyE,uBAAYA,WAAW,MAAvB,QAFzE,uBAEiJ,uBAAYA,WAAW,MAAvB,UAFjJ,MAE0M,uBAAYA,WAAW,MAAvB,UAF1M,MAEmQ,uBAAYA,WAAW,MAAvB,WAFnQ,YAEmU,uBAAYA,WAAW,MAAvB,KAFnU,8CAE+Z,uBAAYA,WAAW,MAAvB,KAF/Z,OAIF,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MADX,YAGA,eAAIA,WAAW,KACb,MAAS,MADX,aAIF,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,OACR,uBAAYA,WAAW,MAAvB,8BACH,eAAIA,WAAW,KACb,MAAS,MADX,2CAE8C,uBAAYA,WAAW,MAAvB,OAF9C,oBAEkH,uBAAYA,WAAW,MAAvB,UAFlH,UAE+K,uBAAYA,WAAW,MAAvB,OAF/K,oBAEmP,uBAAYA,WAAW,MAAvB,UAFnP,OAIF,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,OACR,uBAAYA,WAAW,MAAvB,cACH,eAAIA,WAAW,KACb,MAAS,MADX,kCAIF,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,OACR,uBAAYA,WAAW,MAAvB,mBACH,eAAIA,WAAW,KACb,MAAS,MADX,kCAIF,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,OACR,uBAAYA,WAAW,MAAvB,qBACH,eAAIA,WAAW,KACb,MAAS,MADX,uEAIF,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,OACR,uBAAYA,WAAW,MAAvB,OACH,eAAIA,WAAW,KACb,MAAS,MADX,qBAEwB,mBAAQA,WAAW,MAAnB,SAFxB,0BAE4F,uBAAYA,WAAW,MAAvB,KAF5F,yEAUVJ,EAAWK,gBAAiB","file":"component---src-pages-develop-reference-how-to-read-md-d69c2af1e897b106537e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"how-to-read-the-reference-documentation\"\n    }}>{`How to read the reference documentation`}</h1>\n    <p>{`Please take a moment to familiarize yourself with the types of symbols you'll see throughout the technical documentation.`}</p>\n    <h2 {...{\n      \"id\": \"type-annotations\"\n    }}>{`Type Annotations`}</h2>\n    <p>{`This shorthand is used to indicate the types of arguments, return values, and object properties.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Annotation`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Meaning`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`[day]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The parameter is optional. If it is not supplied, it will be `}<inlineCode parentName=\"td\">{`undefined`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`[day=\"Monday\"]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The parameter is optional, but will be supplied a default value if not provided.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`?Array`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type can be an Array OR `}<inlineCode parentName=\"td\">{`null`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`!Array`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type must be an Array; `}<em parentName=\"td\">{`cannot`}</em>{` be `}<inlineCode parentName=\"td\">{`null`}</inlineCode>{`. Primitive types (`}<inlineCode parentName=\"td\">{`string`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`number`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`boolean`}</inlineCode>{`) imply `}<inlineCode parentName=\"td\">{`!`}</inlineCode>{` unless explicitly denoted otherwise with `}<inlineCode parentName=\"td\">{`?`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\\`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number\\``}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`{foo:number, bar:string}`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type is an object with two properties: `}<inlineCode parentName=\"td\">{`foo`}</inlineCode>{`, which is type `}<inlineCode parentName=\"td\">{`number`}</inlineCode>{`; and `}<inlineCode parentName=\"td\">{`bar`}</inlineCode>{`, which is type `}<inlineCode parentName=\"td\">{`string`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string[]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type is an array of strings.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Array<string>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type is an array of strings.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Promise<string>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type is a Promise that is asynchronously fulfilled with a string.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`*`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Can be any type. `}<strong parentName=\"td\">{`NOTE:`}</strong>{` In this early stage, `}<inlineCode parentName=\"td\">{`*`}</inlineCode>{` is sometimes used as a placeholder for incomplete documentation.`}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}