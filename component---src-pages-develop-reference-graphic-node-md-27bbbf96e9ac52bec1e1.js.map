{"version":3,"file":"component---src-pages-develop-reference-graphic-node-md-27bbbf96e9ac52bec1e1.js","mappings":"kQAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGC,GAAK,YAER,OAAO,SAACJ,GAAS,UAAKD,EAAiBK,EAAK,CAAED,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,eAAa,gBAErB,mBAAG,mBAAQC,WAAW,KAAG,QAAkB,sBAC7C,mBAAQA,WAAW,KAAG,WAAqB,MAAM,cAAGA,WAAW,IACzD,KAAQ,uCAAqC,eAEjD,wRAGA,eACE,GAAM,QAAM,SAEd,wBAAS,mBAAQA,WAAW,KAAG,QAAkB,MAAM,cAAGA,WAAW,IACjE,KAAQ,mCAAiC,SAC3B,OAAO,cAAGA,WAAW,IACnC,KAAQ,4CAA0C,kBAC3B,OAAO,cAAGA,WAAW,IAC5C,KAAQ,4CAA0C,kBAC3B,OAAO,cAAGA,WAAW,IAC5C,KAAQ,6CAA2C,mBAC3B,OAAO,cAAGA,WAAW,IAC7C,KAAQ,uCAAqC,eAEjD,mBAAG,mBAAQA,WAAW,KAAG,WAAqB,WAC9C,mBAAG,mBAAQA,WAAW,KAAG,WAAqB,MAAM,uBAAYA,WAAW,KAAG,UAC9E,uFAAwE,eAAIA,WAAW,KAAG,MAAY,KAAK,uBAAYA,WAAW,KAAG,eAA6B,iFAElK,uEAAwD,eAAIA,WAAW,KAAG,QAAc,kGAExF,mBAAG,mBAAQA,WAAW,KAAG,aACzB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eAAa,wCAG9B,kFAAmE,uBAAYA,WAAW,KAAG,QAAsB,gFACjH,cAAGA,WAAW,IACZ,KAAQ,iFAA+E,mCAC/C,MAC5C,mBAAG,mBAAQA,WAAW,KAAG,QAAkB,2BAA2B,cAAGA,WAAW,IAChF,KAAQ,gBAAc,iBAE1B,eACE,GAAM,eAAa,gBAErB,wBAAS,mBAAQA,WAAW,KAAG,eAAyB,MAAM,uBAAYA,WAAW,KAAG,aACxF,mBAAG,mBAAQA,WAAW,KAAG,WAAqB,MAAM,uBAAYA,WAAW,KAAG,UAC9E,oCAAqB,uBAAYA,WAAW,KAAG,QAAsB,uFACrE,mBAAG,mBAAQA,WAAW,KAAG,QAAkB,2BAA2B,cAAGA,WAAW,IAChF,KAAQ,gBAAc,iBAE1B,eACE,GAAM,UAAQ,WAEhB,wBAAS,mBAAQA,WAAW,KAAG,UAAoB,MAAM,cAAGA,WAAW,IACnE,KAAQ,mCAAiC,WAE7C,mBAAG,mBAAQA,WAAW,KAAG,WAAqB,MAAM,uBAAYA,WAAW,KAAG,YAA0B,QAAQ,uBAAYA,WAAW,KAAG,UAC1I,+FAAgF,eAAIA,WAAW,KAAG,MAAY,KAAK,uBAAYA,WAAW,KAAG,iBAA+B,+OAI5K,uCAAwB,cAAGA,WAAW,IAClC,KAAQ,gBAAc,eACF,SAAS,cAAGA,WAAW,IAC3C,KAAQ,mBAAiB,kBACF,iRAG3B,mBAAG,mBAAQA,WAAW,KAAG,aACzB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eAAa,0CAG9B,oFAAqE,uBAAYA,WAAW,KAAG,UAAwB,iFACrH,cAAGA,WAAW,IACZ,KAAQ,iFAA+E,mCAC/C,MAC5C,mBAAG,mBAAQA,WAAW,KAAG,QAAkB,2BAA2B,cAAGA,WAAW,IAChF,KAAQ,gBAAc,iBAE1B,eACE,GAAM,iBAAe,kBAEvB,wBAAS,mBAAQA,WAAW,KAAG,iBAA2B,MAAM,uBAAYA,WAAW,KAAG,aAC1F,mBAAG,mBAAQA,WAAW,KAAG,WAAqB,MAAM,uBAAYA,WAAW,KAAG,UAC9E,oCAAqB,uBAAYA,WAAW,KAAG,UAAwB,uFACvE,mBAAG,mBAAQA,WAAW,KAAG,QAAkB,2BAA2B,cAAGA,WAAW,IAChF,KAAQ,gBAAc,iBAE1B,eACE,GAAM,eAAa,gBAErB,wBAAS,mBAAQA,WAAW,KAAG,eAAyB,MAAM,uBAAYA,WAAW,KAAG,UAAwB,UAChH,mBAAG,mBAAQA,WAAW,KAAG,WAAqB,MAAM,uBAAYA,WAAW,KAAG,SAC9E,yDACA,mBAAG,mBAAQA,WAAW,KAAG,QAAkB,2BAA2B,cAAGA,WAAW,IAChF,KAAQ,gBAAc,iBAE1B,eACE,GAAM,kBAAgB,mBAExB,wBAAS,mBAAQA,WAAW,KAAG,kBAA4B,MAAM,uBAAYA,WAAW,KAAG,YAC3F,mBAAG,mBAAQA,WAAW,KAAG,WAAqB,MAAM,uBAAYA,WAAW,KAAG,iBAA+B,sBAAsB,uBAAYA,WAAW,KAAG,gBAA8B,sCAC3L,gNACA,mBAAG,mBAAQA,WAAW,KAAG,QAAkB,2BAA2B,cAAGA,WAAW,IAChF,KAAQ,gBAAc,iBAE1B,eACE,GAAM,iBAAe,kBAEvB,wBAAS,mBAAQA,WAAW,KAAG,iBAA2B,MAAM,uBAAYA,WAAW,KAAG,YAC1F,mBAAG,mBAAQA,WAAW,KAAG,WAAqB,MAAM,uBAAYA,WAAW,KAAG,qBAC9E,6KACA,mBAAG,mBAAQA,WAAW,KAAG,QAAkB,2BAA2B,cAAGA,WAAW,IAChF,KAAQ,gBAAc,iBAE1B,eACE,GAAM,eAAa,gBAErB,wBAAS,mBAAQA,WAAW,KAAG,eAAyB,MAAM,uBAAYA,WAAW,KAAG,YACxF,mBAAG,mBAAQA,WAAW,KAAG,WAAqB,MAAM,uBAAYA,WAAW,KAAG,uBAC9E,2IACA,mBAAG,mBAAQA,WAAW,KAAG,QAAkB,2BAA2B,cAAGA,WAAW,IAChF,KAAQ,gBAAc,iBAE1B,eACE,GAAM,oBAAkB,qBAE1B,wBAAS,mBAAQA,WAAW,KAAG,oBAA8B,MAAM,uBAAYA,WAAW,KAAG,UAAwB,UACrH,mBAAG,mBAAQA,WAAW,KAAG,WAAqB,MAAM,uBAAYA,WAAW,KAAG,OAC9E,8EAA+D,cAAGA,WAAW,IACzE,KAAQ,gBAAc,eACF,0BACxB,mBAAG,mBAAQA,WAAW,KAAG,QAAkB,2BAA2B,cAAGA,WAAW,IAChF,KAAQ,gBAAc,iBAE1B,eACE,GAAM,mBAAiB,oBAEzB,wBAAS,mBAAQA,WAAW,KAAG,mBAA6B,MAAM,uBAAYA,WAAW,KAAG,mBAC5F,mBAAG,mBAAQA,WAAW,KAAG,WAAqB,MAAM,uBAAYA,WAAW,KAAG,QAC9E,mWAEwF,uBAAYA,WAAW,KAAG,OAAqB,kCACtI,uBAAYA,WAAW,KAAG,UAAwB,MACnD,6EAA8D,cAAGA,WAAW,IACxE,KAAQ,kBAAgB,iBACF,cAC1B,mBAAG,mBAAQA,WAAW,KAAG,QAAkB,2BAA2B,cAAGA,WAAW,IAChF,KAAQ,gBAAc,iBAE1B,eACE,GAAM,oBAAkB,qBAE1B,wBAAS,mBAAQA,WAAW,KAAG,oBAA8B,MAAM,uBAAYA,WAAW,KAAG,YAC7F,mBAAG,mBAAQA,WAAW,KAAG,WAAqB,MAAM,uBAAYA,WAAW,KAAG,OAC9E,qCAAsB,uBAAYA,WAAW,KAAG,mBAAiC,oGACjF,mBAAG,mBAAQA,WAAW,KAAG,QAAkB,2BAA2B,cAAGA,WAAW,IAChF,KAAQ,gBAAc,iBAE1B,eACE,GAAM,UAAQ,WAEhB,wBAAS,mBAAQA,WAAW,KAAG,UAAoB,OAAO,cAAGA,WAAW,IACpE,KAAQ,oCAAkC,YAE9C,mBAAG,mBAAQA,WAAW,KAAG,WAAqB,MAAM,uBAAYA,WAAW,KAAG,UAC9E,+GAAgG,eAAIA,WAAW,KAAG,MAAY,KAAK,uBAAYA,WAAW,KAAG,kBAAgC,mBAC7L,oFAAqE,uBAAYA,WAAW,KAAG,UAAwB,kFACrH,cAAGA,WAAW,IACZ,KAAQ,iFAA+E,mCAC/C,MAC5C,mBAAG,mBAAQA,WAAW,KAAG,QAAkB,2BAA2B,cAAGA,WAAW,IAChF,KAAQ,gBAAc,iBAE1B,eACE,GAAM,QAAM,SAEd,wBAAS,mBAAQA,WAAW,KAAG,QAAkB,OAAO,cAAGA,WAAW,IAClE,KAAQ,kCAAgC,UAE5C,mBAAG,mBAAQA,WAAW,KAAG,WAAqB,MAAM,uBAAYA,WAAW,KAAG,UAC9E,yMACwC,eAAIA,WAAW,KAAG,MAAY,KAAK,uBAAYA,WAAW,KAAG,gBAA8B,mBACnI,kFAAmE,uBAAYA,WAAW,KAAG,QAAsB,gFACjH,cAAGA,WAAW,IACZ,KAAQ,iFAA+E,mCAC/C,MAC5C,mBAAG,mBAAQA,WAAW,KAAG,QAAkB,2BAA2B,cAAGA,WAAW,IAChF,KAAQ,gBAAc,iBAE1B,eACE,GAAM,YAAU,aAElB,wBAAS,mBAAQA,WAAW,KAAG,YAAsB,MAAM,uBAAYA,WAAW,KAAG,YACrF,4EAA6D,uBAAYA,WAAW,KAAG,UAAwB,uCAAuC,cAAGA,WAAW,IAChK,KAAQ,mBAAiB,kBACF,SAC7B,uBAAYA,WAAW,KAAG,6BAA2C,mFACnE,mBAAG,mBAAQA,WAAW,KAAG,QAAkB,2BAA2B,cAAGA,WAAW,IAChF,KAAQ,gBAAc,eACF,MAC1B,mBAAQA,WAAW,KAAG,aAAuB,WAC3C,eACE,GAAM,wBAAsB,yBAE9B,wBAAS,mBAAQA,WAAW,KAAG,wBAAkC,MAAM,uBAAYA,WAAW,KAAG,aACjG,yKAA0J,uBAAYA,WAAW,KAAG,iCAA+C,MACnO,mBAAG,mBAAQA,WAAW,KAAG,QAAkB,2BAA2B,cAAGA,WAAW,IAChF,KAAQ,gBAAc,eACF,MAC1B,mBAAQA,WAAW,KAAG,aAAuB,UAG/C,CAEAJ,EAAWK,gBAAiB,C","sources":["webpack://uxp-xd/./src/pages/develop/reference/GraphicNode.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"graphicnode\"\n    }}>{`GraphicNode`}</h1>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: abstract class\n`}<strong parentName=\"p\">{`Extends`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/SceneNode\"\n      }}>{`SceneNode`}</a></p>\n    <p>{`Base class for nodes that have a stroke and/or fill. This includes leaf nodes such as Rectangle, as well as BooleanGroup\nwhich is a container node. If you create a shape node, it will not be visible unless you explicitly give it either a stroke\nor a fill.`}</p>\n    <h2 {...{\n      \"id\": \"fill\"\n    }}>{`fill`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`fill`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/Color\"\n      }}>{`Color`}</a>{` | `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/LinearGradient\"\n      }}>{`LinearGradient`}</a>{` | `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/RadialGradient\"\n      }}>{`RadialGradient`}</a>{` | `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/AngularGradient\"\n      }}>{`AngularGradient`}</a>{` | `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/ImageFill\"\n      }}>{`ImageFill`}</a></p>\n    <p><strong parentName=\"p\">{`Updated`}</strong>{` XD 42`}</p>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`null`}</inlineCode></p>\n    <p>{`The fill applied to this shape, if any. If this property is null `}<em parentName=\"p\">{`or`}</em>{` `}<inlineCode parentName=\"p\">{`fillEnabled`}</inlineCode>{` is false, no fill is drawn.\nFreshly created nodes have no fill by default.`}</p>\n    <p>{`For Line nodes, fill is ignored. For Text nodes, `}<em parentName=\"p\">{`only`}</em>{` solid Color fill values are allowed. For Artboard nodes, image fill values\nare not allowed.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`ellipse.fill = new Color(\"red\");\n`}</code></pre>\n    <p>{`To modify an existing fill, always be sure to re-invoke the `}<inlineCode parentName=\"p\">{`fill`}</inlineCode>{` setter rather than just changing the fill object's properties inline.\nSee `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/properties-with-object-values/\"\n      }}>{`\"Properties with object values\"`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}>{`GraphicNode`}</a></p>\n    <h2 {...{\n      \"id\": \"fillenabled\"\n    }}>{`fillEnabled`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`fillEnabled`}</strong>{`: `}<inlineCode parentName=\"p\">{`boolean`}</inlineCode></p>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`true`}</inlineCode></p>\n    <p>{`If false, the `}<inlineCode parentName=\"p\">{`fill`}</inlineCode>{` is not rendered. The user can toggle this via a checkbox in the Properties panel.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}>{`GraphicNode`}</a></p>\n    <h2 {...{\n      \"id\": \"stroke\"\n    }}>{`stroke`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`stroke`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/Color\"\n      }}>{`Color`}</a></p>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`Color(0)`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`null`}</inlineCode></p>\n    <p>{`The stroke color applied to this shape, if any. If this property is null `}<em parentName=\"p\">{`or`}</em>{` `}<inlineCode parentName=\"p\">{`strokeEnabled`}</inlineCode>{` is false, no stroke is drawn.\nFreshly created rectangles, polygons, and ellipses have a transparent stroke (RGBA value of 0) by default.\nFor new lines and paths, the default stroke is null.\nArtboard objects ignore stroke settings.`}</p>\n    <p>{`Depending on the `}<a parentName=\"p\" {...{\n        \"href\": \"#strokewidth\"\n      }}>{`strokeWidth`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#strokeposition\"\n      }}>{`strokePosition`}</a>{`, the path outline\nof a node may need to be positioned on fractional pixels in order for the stroke itself to be crisply aligned to the pixel grid.\nFor example, if a horizontal line uses a 1px center stroke, the line's y should end in .5 to keep the stroke on-pixel.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`ellipse.stroke = new Color(\"red\");\n`}</code></pre>\n    <p>{`To modify an existing stroke, always be sure to re-invoke the `}<inlineCode parentName=\"p\">{`stroke`}</inlineCode>{` setter rather than just changing the Color object's properties inline.\nSee `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/properties-with-object-values/\"\n      }}>{`\"Properties with object values\"`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}>{`GraphicNode`}</a></p>\n    <h2 {...{\n      \"id\": \"strokeenabled\"\n    }}>{`strokeEnabled`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`strokeEnabled`}</strong>{`: `}<inlineCode parentName=\"p\">{`boolean`}</inlineCode></p>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`true`}</inlineCode></p>\n    <p>{`If false, the `}<inlineCode parentName=\"p\">{`stroke`}</inlineCode>{` is not rendered. The user can toggle this via a checkbox in the Properties panel.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}>{`GraphicNode`}</a></p>\n    <h2 {...{\n      \"id\": \"strokewidth\"\n    }}>{`strokeWidth`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`strokeWidth`}</strong>{`: `}<inlineCode parentName=\"p\">{`number`}</inlineCode>{` >= 0`}</p>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`1.0`}</inlineCode></p>\n    <p>{`Thickness in pixels of the stroke.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}>{`GraphicNode`}</a></p>\n    <h2 {...{\n      \"id\": \"strokeposition\"\n    }}>{`strokePosition`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`strokePosition`}</strong>{`: `}<inlineCode parentName=\"p\">{`string`}</inlineCode></p>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`CENTER_STROKE`}</inlineCode>{` for most shapes, `}<inlineCode parentName=\"p\">{`INNER_STROKE`}</inlineCode>{` for Rectangle, Ellipse & Polygon`}</p>\n    <p>{`Position of the stroke relative to the shape's path outline: GraphicNode.INNER_STROKE, OUTER_STROKE, or CENTER_STROKE. Ignored by Text and Line, which always render using CENTER_STROKE.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}>{`GraphicNode`}</a></p>\n    <h2 {...{\n      \"id\": \"strokeendcaps\"\n    }}>{`strokeEndCaps`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`strokeEndCaps`}</strong>{`: `}<inlineCode parentName=\"p\">{`string`}</inlineCode></p>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`STROKE_CAP_NONE`}</inlineCode></p>\n    <p>{`For Lines and non-closed Paths, how the dangling ends of the stroke are rendered: GraphicNode.STROKE_CAP_NONE, STROKE_CAP_SQUARE, or STROKE_CAP_ROUND.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}>{`GraphicNode`}</a></p>\n    <h2 {...{\n      \"id\": \"strokejoins\"\n    }}>{`strokeJoins`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`strokeJoins`}</strong>{`: `}<inlineCode parentName=\"p\">{`string`}</inlineCode></p>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`STROKE_JOIN_MITER`}</inlineCode></p>\n    <p>{`How sharp corners in the shape are rendered: GraphicNode.STROKE_JOIN_BEVEL, STROKE_JOIN_ROUND, or STROKE_JOIN_MITER.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}>{`GraphicNode`}</a></p>\n    <h2 {...{\n      \"id\": \"strokemiterlimit\"\n    }}>{`strokeMiterLimit`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`strokeMiterLimit`}</strong>{`: `}<inlineCode parentName=\"p\">{`number`}</inlineCode>{` >= 0`}</p>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`4`}</inlineCode></p>\n    <p>{`Expressed as a multiple of stroke width. Only used when `}<a parentName=\"p\" {...{\n        \"href\": \"#strokejoins\"\n      }}>{`strokeJoins`}</a>{` = STROKE_JOIN_MITER.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}>{`GraphicNode`}</a></p>\n    <h2 {...{\n      \"id\": \"strokedasharray\"\n    }}>{`strokeDashArray`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`strokeDashArray`}</strong>{`: `}<inlineCode parentName=\"p\">{`Array<number>`}</inlineCode></p>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`[]`}</inlineCode></p>\n    <p>{`Empty array indicates a solid stroke. If non-empty, values represent the lengths of rendered and blank segments of the\nstroke's dash pattern, repeated along the length of the stroke. The first value is the length of the first solid segment.\nIf the array is odd length, the items are copied to double the array length. For example, `}<inlineCode parentName=\"p\">{`[3]`}</inlineCode>{` produces the same effect\nas `}<inlineCode parentName=\"p\">{`[3, 3]`}</inlineCode>{`.`}</p>\n    <p>{`The appearance of each segment's start/end follows the `}<a parentName=\"p\" {...{\n        \"href\": \"#strokeendcaps\"\n      }}>{`strokeEndCaps`}</a>{` setting.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}>{`GraphicNode`}</a></p>\n    <h2 {...{\n      \"id\": \"strokedashoffset\"\n    }}>{`strokeDashOffset`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`strokeDashOffset`}</strong>{`: `}<inlineCode parentName=\"p\">{`number`}</inlineCode></p>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`0`}</inlineCode></p>\n    <p>{`Ignored unless `}<inlineCode parentName=\"p\">{`strokeDashArray`}</inlineCode>{` is non-empty. Shifts the \"phase\" of the repeating dash pattern along the length of the stroke.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}>{`GraphicNode`}</a></p>\n    <h2 {...{\n      \"id\": \"shadow\"\n    }}>{`shadow`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`shadow`}</strong>{`: ?`}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/Shadow\"\n      }}>{`Shadow`}</a></p>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`null`}</inlineCode></p>\n    <p>{`The node's drop shadow, if any. If there is no shadow applied, this property may be null `}<em parentName=\"p\">{`or`}</em>{` `}<inlineCode parentName=\"p\">{`shadow.visible`}</inlineCode>{` may be false.`}</p>\n    <p>{`To modify an existing shadow, always be sure to re-invoke the `}<inlineCode parentName=\"p\">{`shadow`}</inlineCode>{` setter rather than just changing the Shadow object's properties inline.\nSee `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/properties-with-object-values/\"\n      }}>{`\"Properties with object values\"`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}>{`GraphicNode`}</a></p>\n    <h2 {...{\n      \"id\": \"blur\"\n    }}>{`blur`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`blur`}</strong>{`: ?`}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/Blur\"\n      }}>{`Blur`}</a></p>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`null`}</inlineCode></p>\n    <p>{`The node's object blur or background blur settings, if applicable (a node may not have both types of blur at once). If there is no blur\neffect applied, this property may be null `}<em parentName=\"p\">{`or`}</em>{` `}<inlineCode parentName=\"p\">{`blur.visible`}</inlineCode>{` may be false.`}</p>\n    <p>{`To modify an existing blur, always be sure to re-invoke the `}<inlineCode parentName=\"p\">{`blur`}</inlineCode>{` setter rather than just changing the Blur object's properties inline.\nSee `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/properties-with-object-values/\"\n      }}>{`\"Properties with object values\"`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}>{`GraphicNode`}</a></p>\n    <h2 {...{\n      \"id\": \"pathdata\"\n    }}>{`pathData`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`pathData`}</strong>{`: `}<inlineCode parentName=\"p\">{`string`}</inlineCode></p>\n    <p>{`Returns a representation of the node's outline in SVG `}<inlineCode parentName=\"p\">{`<path>`}</inlineCode>{` syntax. Note that only nodes with `}<a parentName=\"p\" {...{\n        \"href\": \"#strokeposition\"\n      }}>{`strokePosition`}</a>{` ==\n`}<inlineCode parentName=\"p\">{`GraphicNode.CENTER_STROKE`}</inlineCode>{` can be faithfully rendered in actual SVG using the exact pathData shown here.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}>{`GraphicNode`}</a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h2 {...{\n      \"id\": \"haslinkedgraphicfill\"\n    }}>{`hasLinkedGraphicFill`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`hasLinkedGraphicFill`}</strong>{`: `}<inlineCode parentName=\"p\">{`boolean`}</inlineCode></p>\n    <p>{`True if the node has an image fill that comes from a link to an external resource, such as Creative Cloud Libraries. Equivalent to the expression: `}<inlineCode parentName=\"p\">{`node.fill && node.fill.linked`}</inlineCode>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#graphicnode\"\n      }}>{`GraphicNode`}</a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}