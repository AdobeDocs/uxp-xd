(window.webpackJsonp=window.webpackJsonp||[]).push([[186],{"7Lsx":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return r})),n.d(t,"default",(function(){return s}));var a=n("wx14"),i=n("zLVn"),l=(n("q1tI"),n("7ljp")),o=n("ndZU"),r=(n("qKvR"),{}),d={_frontmatter:r},c=o.a;function s(e){var t=e.components,o=Object(i.a)(e,["components"]);return Object(l.mdx)(c,Object(a.a)({},d,o,{components:t,mdxType:"MDXLayout"}),Object(l.mdx)("h1",{id:"how-to-read-a-file"},"How to read a file"),Object(l.mdx)("p",null,"This tutorial will show you how an XD plugin can read in a file from the file system. As one of example of what you can do with a file, we'll extract text from the file and add that text to the scenegraph."),Object(l.mdx)("h2",{id:"prerequisites"},"Prerequisites"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},"Basic knowledge of HTML, CSS, and JavaScript."),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/tutorials/quick-start/"}),"Quick Start Tutorial")),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/tutorials/debugging/"}),"Debugging Tutorial"))),Object(l.mdx)("h2",{id:"development-steps"},"Development Steps"),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},Object(l.mdx)("strong",{parentName:"p"},"Info"),"\nComplete code for this plugin can be found ",Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/AdobeXD/Plugin-Samples/tree/master/how-to-read-a-file"}),"on GitHub"),".")),Object(l.mdx)("h3",{id:"1-prepare-your-plugin-scaffold"},"1. Prepare your plugin scaffold"),Object(l.mdx)("p",null,"First, edit the manifest file for the plugin you created in our ",Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"/uxp-xd/tutorials/quick-start"}),"Quick Start Tutorial"),"."),Object(l.mdx)("p",null,"Replace the ",Object(l.mdx)("inlineCode",{parentName:"p"},"uiEntryPoints")," field of the manifest with the following:"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'"uiEntryPoints": [\n    {\n        "type": "menu",\n        "label": "Insert Text From File",\n        "commandId": "insertTextFromFileCommand"\n    }\n]\n')),Object(l.mdx)("p",null,"If you're curious about what each entry means, ",Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"/uxp-xd/reference/structure/manifest/"}),"see the manifest documentation"),", where you can also learn about all manifest requirements for a plugin to be published in the XD Plugin Manager. "),Object(l.mdx)("p",null,"Then, update your ",Object(l.mdx)("inlineCode",{parentName:"p"},"main.js")," file, mapping the manifest's ",Object(l.mdx)("inlineCode",{parentName:"p"},"commandId")," to a handler function."),Object(l.mdx)("p",null,"Replace the content of your ",Object(l.mdx)("inlineCode",{parentName:"p"},"main.js")," file with the following code (note the presence of the ",Object(l.mdx)("inlineCode",{parentName:"p"},"async")," keyword, which we'll look at in a later step):"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'async function insertTextFromFileHandler(selection) {\n    // The body of this function is added later\n}\n\nmodule.exports = {\n    commands: {\n        "insertTextFromFileCommand": insertTextFromFileHandler\n    }\n};\n')),Object(l.mdx)("p",null,"The remaining steps in this tutorial describe additional edits to the ",Object(l.mdx)("inlineCode",{parentName:"p"},"main.js")," file."),Object(l.mdx)("h3",{id:"2-require-in-xd-api-dependencies"},"2. Require in XD API dependencies"),Object(l.mdx)("p",null,"For this tutorial, we need access to two XD scenegraph dependencies and one UXP dependency."),Object(l.mdx)("p",null,"Add the following lines to the top of your ",Object(l.mdx)("inlineCode",{parentName:"p"},"main.js")," file:"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// Add this to the top of your main.js file\nconst { Text, Color } = require("scenegraph");\nconst fs = require("uxp").storage.localFileSystem;\n')),Object(l.mdx)("p",null,"Now the ",Object(l.mdx)("inlineCode",{parentName:"p"},"Text")," and ",Object(l.mdx)("inlineCode",{parentName:"p"},"Color")," classes are required in and ready to be used, as well as UXP's local file system provider."),Object(l.mdx)("h3",{id:"3-create-a-handler-function"},"3. Create a handler function"),Object(l.mdx)("p",null,"Our plugin will allow the user to pick a file from the system file picker, read that file's contents, and add the contents to a text object on the scenegraph."),Object(l.mdx)("p",null,"Each of the numbered comments are explained below the code:"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'async function insertTextFromFileHandler(selection) {               // [1]\n    const aFile = await fs.getFileForOpening({ types: ["txt"] });   // [2]\n    if (!aFile) return;                                             // [3]\n\n    const contents = await aFile.read();                            // [4]\n\n    const text = new Text();                                        // [5]\n    text.text = contents;\n    text.styleRanges = [{\n        length: contents.length,\n        fill: new Color("#0000ff"),\n        fontSize: 12\n    }];\n\n    selection.insertionParent.addChild(text);                       // [6]\n    text.moveInParentCoordinates(10, 30);\n}\n')),Object(l.mdx)("ol",null,Object(l.mdx)("li",{parentName:"ol"},"This example uses XD's asynchronous Filo I/O APIs, so the handler function must be declared as an async method. To learn more about async support in XD plugin APIs, see ",Object(l.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/reference/javascript/sync-async/"}),"our document on sync and async support"),"."),Object(l.mdx)("li",{parentName:"ol"},"A file picker dialog is displayed, and the function waits for the user to select a text file. The selected file is assigned to ",Object(l.mdx)("inlineCode",{parentName:"li"},"aFile"),". The ",Object(l.mdx)("inlineCode",{parentName:"li"},"#getFileForOpening")," method is asynchronous, so the ",Object(l.mdx)("inlineCode",{parentName:"li"},"await")," keyword is used."),Object(l.mdx)("li",{parentName:"ol"},"If ",Object(l.mdx)("inlineCode",{parentName:"li"},"aFile")," is undefined (because the user did not select a file), then plugin exits."),Object(l.mdx)("li",{parentName:"ol"},"The contents of the file is read in, and returned as a string. See below for more detail. The ",Object(l.mdx)("inlineCode",{parentName:"li"},"#read")," method is asynchronous, so the ",Object(l.mdx)("inlineCode",{parentName:"li"},"await")," keyword is used."),Object(l.mdx)("li",{parentName:"ol"},"The contents of the string is added to a ",Object(l.mdx)("inlineCode",{parentName:"li"},"Text")," object. For details on ",Object(l.mdx)("inlineCode",{parentName:"li"},"Text"),' properties, see the "',Object(l.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/tutorials/how-to-style-text"}),"How to style text"),'" tutorial.'),Object(l.mdx)("li",{parentName:"ol"},"The ",Object(l.mdx)("inlineCode",{parentName:"li"},"text")," object is added to and positioned on the selected artboard.")),Object(l.mdx)("h3",{id:"4-run-the-plugin"},"4. Run the plugin"),Object(l.mdx)("p",null,"After saving all of your changes, reload the plugin in XD and run it. First you'll see a file picker:"),Object(l.mdx)("p",null,Object(l.mdx)("img",{alt:"System file picker",src:n("aKqp")})),Object(l.mdx)("p",null,"If you select a file containing text, the text should be added to the currently-selected artboard:"),Object(l.mdx)("p",null,Object(l.mdx)("img",{alt:"blue text added to the artboard",src:n("fVtl")})),Object(l.mdx)("h2",{id:"next-steps"},"Next Steps"),Object(l.mdx)("p",null,"Want to expand on what you learned here? Have a look at these references to see options for customizing this sample plugin:"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/reference/uxp/storage-index/"}),"File I/O")),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/reference/scenegraph/#text"}),"Text"))),Object(l.mdx)("p",null,"Ready to explore further? Take a look at our other resources:"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(a.a)({parentName:"li"},{href:"/uxp-xd/tutorials/"}),"Tutorials")),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/AdobeXD/plugin-samples"}),"Sample code repos"))))}s.isMDXComponent=!0},aKqp:function(e,t,n){e.exports=n.p+"static/filepicker-26e6e122afec101732dad4513ebc442c.png"},fVtl:function(e,t,n){e.exports=n.p+"static/displayed-results-c0fdacb45719284625c351b7f1bb3576.png"}}]);
//# sourceMappingURL=component---src-pages-develop-tutorials-how-to-read-a-file-index-md-d65919a1233238cb38ad.js.map