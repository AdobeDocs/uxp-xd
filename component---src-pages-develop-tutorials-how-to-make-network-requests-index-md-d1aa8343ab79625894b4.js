"use strict";(self.webpackChunkuxp_xd=self.webpackChunkuxp_xd||[]).push([[1457],{37716:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return m},default:function(){return p}});var a=t(87462),l=t(63366),o=(t(15007),t(64983)),i=t(91515),r=["components"],m={},s={_frontmatter:m},d=i.Z;function p(e){var n=e.components,t=(0,l.Z)(e,r);return(0,o.mdx)(d,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"how-to-make-network-requests"},"How to make network requests"),(0,o.mdx)("p",null,"This sample app will show you how to load an image in an XD object (Rectangle or Artboard) by making network requests using ",(0,o.mdx)("inlineCode",{parentName:"p"},"XHR")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},"fetch"),"."),(0,o.mdx)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Basic knowledge of HTML, CSS, and JavaScript"),(0,o.mdx)("li",{parentName:"ul"},"Basic knowledge of ",(0,o.mdx)("inlineCode",{parentName:"li"},"XMLHttpRequest")," and ",(0,o.mdx)("inlineCode",{parentName:"li"},"fetch")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"/uxp-xd/develop/tutorials/quick-start/"},"Quick Start Tutorial")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"/uxp-xd/develop/tutorials/debugging/"},"Debugging Tutorial"))),(0,o.mdx)("h2",{id:"development-steps"},"Development Steps"),(0,o.mdx)("blockquote",null,(0,o.mdx)("p",{parentName:"blockquote"},(0,o.mdx)("strong",{parentName:"p"},"Info"),"\nComplete code for this plugin can be found ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/AdobeXD/Plugin-Samples/tree/master/how-to-make-network-requests"},"on GitHub"),".")),(0,o.mdx)("h3",{id:"1-create-plugin-scaffold"},"1. Create plugin scaffold"),(0,o.mdx)("p",null,"First, edit the manifest file for the plugin you created in our ",(0,o.mdx)("a",{parentName:"p",href:"/uxp-xd/develop/tutorials/quick-start"},"Quick Start Tutorial"),"."),(0,o.mdx)("p",null,"Replace the ",(0,o.mdx)("inlineCode",{parentName:"p"},"uiEntryPoints")," field of the manifest with the following:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-json"},'"uiEntryPoints": [\n    {\n        "type": "menu",\n        "label": "How to make network requests",\n        "commandId": "applyImage"\n    }\n]\n')),(0,o.mdx)("p",null,"If you're curious about what each entry means, ",(0,o.mdx)("a",{parentName:"p",href:"/uxp-xd/develop/plugin-development/plugin-structure/manifest/"},"see the manifest documentation"),", where you can also learn about all manifest requirements for a plugin to be published in the XD Plugin Manager."),(0,o.mdx)("p",null,"Then, update your ",(0,o.mdx)("inlineCode",{parentName:"p"},"main.js")," file, mapping the manifest's ",(0,o.mdx)("inlineCode",{parentName:"p"},"commandId")," to a handler function."),(0,o.mdx)("p",null,"Replace the content of your ",(0,o.mdx)("inlineCode",{parentName:"p"},"main.js")," file with the following code:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"function applyImage(selection) {\n  // The body of this function is added later\n}\n\nmodule.exports = {\n  commands: {\n    applyImage,\n  },\n};\n")),(0,o.mdx)("p",null,"The remaining steps in this tutorial describe additional edits to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"main.js")," file."),(0,o.mdx)("h3",{id:"2-require-in-xd-api-dependencies"},"2. Require in XD API dependencies"),(0,o.mdx)("p",null,"For this tutorial, we just need access to one XD scenegraph class."),(0,o.mdx)("p",null,"Add the following lines to the top of your ",(0,o.mdx)("inlineCode",{parentName:"p"},"main.js")," file:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},'// Add this to the top of your main.js file\nconst { ImageFill } = require("scenegraph");\n')),(0,o.mdx)("p",null,"Now the ",(0,o.mdx)("inlineCode",{parentName:"p"},"ImageFill")," class is imported and ready to be used."),(0,o.mdx)("h3",{id:"3-write-a-helper-function-to-make-xhr-requests"},"3. Write a helper function to make XHR requests"),(0,o.mdx)("p",null,"Our XHR helper ",(0,o.mdx)("inlineCode",{parentName:"p"},"xhrBinary")," will make an HTTP GET request to any URL it is passed, and a return a Promise with an ",(0,o.mdx)("inlineCode",{parentName:"p"},"arraybuffer"),"."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},'function xhrBinary(url) {\n  // [1]\n  return new Promise((resolve, reject) => {\n    // [2]\n    const req = new XMLHttpRequest(); // [3]\n    req.onload = () => {\n      if (req.status === 200) {\n        try {\n          const arr = new Uint8Array(req.response); // [4]\n          resolve(arr); // [5]\n        } catch (err) {\n          reject(`Couldnt parse response. ${err.message}, ${req.response}`);\n        }\n      } else {\n        reject(`Request had an error: ${req.status}`);\n      }\n    };\n    req.onerror = reject;\n    req.onabort = reject;\n    req.open("GET", url, true);\n    req.responseType = "arraybuffer"; // [6]\n    req.send();\n  });\n}\n')),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("inlineCode",{parentName:"li"},"xhrBinary")," function takes a url as a parameter"),(0,o.mdx)("li",{parentName:"ol"},"The function returns a Promise"),(0,o.mdx)("li",{parentName:"ol"},"The function uses ",(0,o.mdx)("inlineCode",{parentName:"li"},"XMLHttpRequest")," to make network requests"),(0,o.mdx)("li",{parentName:"ol"},"Once the correct response comes back, the function uses ",(0,o.mdx)("inlineCode",{parentName:"li"},"Unit8Array")," method to convert the response to an ",(0,o.mdx)("inlineCode",{parentName:"li"},"arraybuffer")),(0,o.mdx)("li",{parentName:"ol"},"After the conversion, the promise is resolved"),(0,o.mdx)("li",{parentName:"ol"},"Make sure the set the ",(0,o.mdx)("inlineCode",{parentName:"li"},"responseType")," as ",(0,o.mdx)("inlineCode",{parentName:"li"},"arraybuffer"))),(0,o.mdx)("h3",{id:"4-write-a-helper-to-apply-imagefill"},"4. Write a helper to apply ",(0,o.mdx)("inlineCode",{parentName:"h3"},"ImageFill")),(0,o.mdx)("p",null,"This helper function will create an ",(0,o.mdx)("inlineCode",{parentName:"p"},"ImageFill")," instance that can be applied to a user-selected XD scengraph object:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"function applyImagefill(selection, file) {\n  // [1]\n  const imageFill = new ImageFill(file); // [2]\n  selection.items[0].fill = imageFill; // [3]\n}\n")),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"The function accepts the ",(0,o.mdx)("inlineCode",{parentName:"li"},"selection")," and a ",(0,o.mdx)("inlineCode",{parentName:"li"},"file")," as parameters"),(0,o.mdx)("li",{parentName:"ol"},"Use the ",(0,o.mdx)("inlineCode",{parentName:"li"},"ImageFill")," class to create the fill"),(0,o.mdx)("li",{parentName:"ol"},"Apply the image to the user-selected XD object")),(0,o.mdx)("p",null,"We'll use this function in the next step."),(0,o.mdx)("h3",{id:"5-write-a-helper-function-to-download-the-image"},"5. Write a helper function to download the image"),(0,o.mdx)("p",null,"Ok, you've just made three helper functions. Now we're going to tie them all together!"),(0,o.mdx)("p",null,"Note the use of the ",(0,o.mdx)("inlineCode",{parentName:"p"},"async")," keyword at the beginning of the function."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},'async function downloadImage(selection, jsonResponse) {\n  // [1]\n  try {\n    const photoUrl = jsonResponse.message; // [2]\n    const photoObj = await xhrBinary(photoUrl); // [3]\n    const tempFolder = await fs.getTemporaryFolder(); // [4]\n    const tempFile = await tempFolder.createFile("tmp", { overwrite: true }); // [5]\n    await tempFile.write(photoObj, { format: uxp.formats.binary }); // [6]\n    applyImagefill(selection, tempFile); // [7]\n  } catch (err) {\n    console.log("error");\n    console.log(err.message);\n  }\n}\n')),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"This helper function accepts the ",(0,o.mdx)("inlineCode",{parentName:"li"},"selection")," and a JSON response object as parameters"),(0,o.mdx)("li",{parentName:"ol"},"Gets the URL from the JSON response"),(0,o.mdx)("li",{parentName:"ol"},"Uses our async ",(0,o.mdx)("inlineCode",{parentName:"li"},"xhrBinary")," function to get an ",(0,o.mdx)("inlineCode",{parentName:"li"},"arraybuffer")),(0,o.mdx)("li",{parentName:"ol"},"Uses the ",(0,o.mdx)("inlineCode",{parentName:"li"},"fs")," module and its ",(0,o.mdx)("inlineCode",{parentName:"li"},"getTemporaryFolder")," method to create a temp folder"),(0,o.mdx)("li",{parentName:"ol"},"Uses the ",(0,o.mdx)("inlineCode",{parentName:"li"},"createFile")," method to create a temp file"),(0,o.mdx)("li",{parentName:"ol"},"Uses the ",(0,o.mdx)("inlineCode",{parentName:"li"},"write")," method to write the binary file to store"),(0,o.mdx)("li",{parentName:"ol"},"Uses ",(0,o.mdx)("inlineCode",{parentName:"li"},"applyImagefill")," to place the image into a user-selected XD object")),(0,o.mdx)("h3",{id:"6-write-the-main-handler-function"},"6. Write the main handler function"),(0,o.mdx)("p",null,"This is the function that will be called with the user runs our plugin command."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},'function applyImage(selection) {\n  if (selection.items.length) {\n    // [1]\n    const url = "https://dog.ceo/api/breeds/image/random"; // [2]\n    return fetch(url) // [3]\n      .then(function (response) {\n        return response.json(); // [4]\n      })\n      .then(function (jsonResponse) {\n        return downloadImage(selection, jsonResponse); // [5]\n      });\n  } else {\n    console.log("Please select a shape to apply the downloaded image.");\n  }\n}\n')),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"Checks if user has selected at least one object"),(0,o.mdx)("li",{parentName:"ol"},"This is an example public URL to an image"),(0,o.mdx)("li",{parentName:"ol"},"Pass the URL to ",(0,o.mdx)("inlineCode",{parentName:"li"},"fetch")),(0,o.mdx)("li",{parentName:"ol"},"The first ",(0,o.mdx)("inlineCode",{parentName:"li"},".then")," block returns the response JSON object"),(0,o.mdx)("li",{parentName:"ol"},"The second ",(0,o.mdx)("inlineCode",{parentName:"li"},".then")," block passes the ",(0,o.mdx)("inlineCode",{parentName:"li"},"selection")," and our JSON reponse to our ",(0,o.mdx)("inlineCode",{parentName:"li"},"downloadImage")," function, ultimately placing it in the document")))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-develop-tutorials-how-to-make-network-requests-index-md-d1aa8343ab79625894b4.js.map