{"version":3,"file":"component---src-pages-develop-reference-artboard-md-a5dfb6ba8ad6a3ea6cf9.js","mappings":"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","sources":["webpack://uxp-xd/./src/pages/develop/reference/Artboard.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"artboard\"\n    }}>{`Artboard`}</h1>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: class\n`}<strong parentName=\"p\">{`Extends`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/GraphicNode\"\n      }}>{`GraphicNode`}</a></p>\n    <p>{`Artboard container node. All Artboards must be children of the root node (they cannot be nested), and they must be placed `}<em parentName=\"p\">{`below`}</em>{` all\npasteboard content in the z order.`}</p>\n    <p>{`Artboards can have a background fill, but the stroke, shadow, and blur settings are all ignored. Artboards cannot be locked or hidden,\nor have opacity < 100%.`}</p>\n    <p>{`Generally, all nodes that overlap an Artboard are children of that artboard, and nodes that don't overlap any Artboard are children\nof the root (pasteboard). XD ensures this automatically: if a node is modified in any way that changes whether it overlaps an\nArtboard, its parent will automatically be changed accordingly after the edit operation finishes.`}</p>\n    <h2 {...{\n      \"id\": \"width\"\n    }}>{`width`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`width`}</strong>{`: `}<inlineCode parentName=\"p\">{`number`}</inlineCode>{` > 0`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#Artboard\"\n      }}>{`Artboard`}</a></p>\n    <h2 {...{\n      \"id\": \"height\"\n    }}>{`height`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`height`}</strong>{`: `}<inlineCode parentName=\"p\">{`number`}</inlineCode>{` > 0`}</p>\n    <p>{`For scrollable Artboards, this is the total height encompassing all content - not just the viewport size (i.e. screen height).`}</p>\n    <p><strong parentName=\"p\">{`See`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"#viewportheight\"\n      }}>{`viewportHeight`}</a></p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#Artboard\"\n      }}>{`Artboard`}</a></p>\n    <h2 {...{\n      \"id\": \"viewportheight\"\n    }}>{`viewportHeight`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`viewportHeight`}</strong>{`: `}<inlineCode parentName=\"p\">{`?number`}</inlineCode></p>\n    <p>{`If Artboard is scrollable, this is the height of the viewport (e.g. mobile device screen size). Null if Artboard isn't scrollable.`}</p>\n    <p><strong parentName=\"p\">{`See`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"#height\"\n      }}>{`height`}</a></p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#Artboard\"\n      }}>{`Artboard`}</a></p>\n    <h2 {...{\n      \"id\": \"incominginteractions\"\n    }}>{`incomingInteractions`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`incomingInteractions`}</strong>{`: `}<inlineCode parentName=\"p\">{`Array<{ triggerNode: `}</inlineCode><a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/SceneNode\"\n      }}>{`SceneNode`}</a><inlineCode parentName=\"p\">{`, interactions: Array<`}</inlineCode><a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/interactions/#typedef-interaction\"\n      }}>{`Interaction`}</a><inlineCode parentName=\"p\">{`> }>`}</inlineCode></p>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 19`}</p>\n    <p>{`Get all interactions whose destination is this artboard (either navigating the entire view, i.e. a `}<inlineCode parentName=\"p\">{`\"goToArtboard\"`}</inlineCode>{` action, or\nshowing this artboard as an overlay, i.e. an `}<inlineCode parentName=\"p\">{`\"overlay\"`}</inlineCode>{` action). Each element in the array is an `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/interactions/#typedef-interaction\"\n      }}>{`Interaction object`}</a>{`\nwhich describes a gesture/event plus the action it produces.`}</p>\n    <p>{`May include interactions that are impossible to trigger because the trigger node (or one of its ancestors) has `}<inlineCode parentName=\"p\">{`visible`}</inlineCode>{` = false.`}</p>\n    <p>{`Note: currently, this API excludes any applicable keyboard/gamepad interactions.`}</p>\n    <p><strong parentName=\"p\">{`See`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/SceneNode/#triggeredinteractions\"\n      }}>{`SceneNode.triggeredInteractions`}</a></p>\n    <p><strong parentName=\"p\">{`See`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/interactions/#allinteractions\"\n      }}>{`interactions.allInteractions`}</a></p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#Artboard\"\n      }}>{`Artboard`}</a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h2 {...{\n      \"id\": \"ishomeartboard\"\n    }}>{`isHomeArtboard`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`isHomeArtboard`}</strong>{`: `}<inlineCode parentName=\"p\">{`boolean`}</inlineCode></p>\n    <p><strong parentName=\"p\">{`Deprecated`}</strong>{`: XD 33 - Please use `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/interactions/#flows\"\n      }}>{`flows`}</a>{` which supports multple flows.`}</p>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 19`}</p>\n    <p>{`True if this is the starting Artboard seen when the interactive prototype is launched.`}</p>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 32`}</p>\n    <p>{`In case there are multiple interactive prototype experiences (flows), implying multiple home artboards, this API returns true only for the top-left artboard among all of those home artboards.`}</p>\n    <p><strong parentName=\"p\">{`See`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/interactions/#homeartboard\"\n      }}>{`interactions.homeArtboard`}</a></p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#Artboard\"\n      }}>{`Artboard`}</a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}