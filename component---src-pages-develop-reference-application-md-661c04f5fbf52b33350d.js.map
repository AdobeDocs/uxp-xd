{"version":3,"sources":["webpack://uxp-xd/./src/pages/develop/reference/application.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-develop-reference-application-md-661c04f5fbf52b33350d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"application\"\n    }}>{`application`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`application`}</inlineCode>{` module exposes APIs for exporting content, initiating edits from panel UI, and getting version / locale info.`}</p>\n    <h3 {...{\n      \"id\": \"applicationeditdocumentoptions-editfunction--editfunction\"\n    }}><em parentName=\"h3\">{`application.editDocument(options, editFunction) | (editFunction)`}</em></h3>\n    <p>{`Call `}<inlineCode parentName=\"p\">{`editDocument()`}</inlineCode>{` from a `}<strong parentName=\"p\">{`plugin panel UI`}</strong>{` event listener to initiate an `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/lifecycle/#edit-operations\"\n      }}>{`edit operation`}</a>{` batch in order to modify the XD document. This API is irrelevant for plugin menu item commands, which are wrapped in an edit batch automatically.`}</p>\n    <p>{`XD calls the `}<inlineCode parentName=\"p\">{`editFunction()`}</inlineCode>{` synchronously (before `}<inlineCode parentName=\"p\">{`editDocument()`}</inlineCode>{` returns). This function is treated the same as a `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/plugin-structure/handlers/#command\"\n      }}>{`menu command handler`}</a>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`It is passed two arguments, the selection and the root node of the scenegraph`}</li>\n      <li parentName=\"ul\">{`It can return a Promise to extend the duration of the edit asynchronously`}</li>\n    </ul>\n    <p>{`You can `}<em parentName=\"p\">{`only`}</em>{` call `}<inlineCode parentName=\"p\">{`editDocument()`}</inlineCode>{` in response to a user action, such as a button `}<inlineCode parentName=\"p\">{`\"click\"`}</inlineCode>{` event or a text input's `}<inlineCode parentName=\"p\">{`\"input\"`}</inlineCode>{` event. This generally means you must call it while a UI event handler is on the call stack.`}</p>\n    <p>{`For UI events that often occur in rapid-fire clusters, such as dragging a slider or pressing keys in a text field, XD tries to smartly merge consecutive edits into a single atomic Undo step. See the `}<inlineCode parentName=\"p\">{`mergeId`}</inlineCode>{` option below to customize this behavior.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: static method of `}<a parentName=\"p\" {...{\n        \"href\": \"#module_application\"\n      }}><inlineCode parentName=\"a\">{`application`}</inlineCode></a></p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`options`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`EditSettings=`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Optional settings object (see below). This argument can be omitted.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`editFunction`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`!function(!Selection, !RootNode):?Promise`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Function which will perform your plugin's edits to the scenegraph.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Typedef EditSettings`}</strong></p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`editLabel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`?string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Used as the Undo label in the `}<strong parentName=\"td\">{`Edit`}</strong>{` menu. If unspecified, XD uses the `}<inlineCode parentName=\"td\">{`uxp-edit-label`}</inlineCode>{` attribute on the DOM node which the user interacted with, and if that does not exist then the plugin's name will be used.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`mergeId`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`?string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`If two consecutive edits to the same selection have the same `}<inlineCode parentName=\"td\">{`mergeId`}</inlineCode>{`, they are flattened together into one Undo step. If unspecified, for \"high frequency\" UI events (see above), XD treats the originating DOM node as a unique identifier for merging; for other UI events, merging is disabled.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let Color = require(\"scenegraph\").Color;\nlet application = require(\"application\");\n\nlet panelButton = document.querySelector(\"panel #myButton\");\n\n// When button is clicked, set selected item's fill to solid red\npanelButton.addEventListener(\"click\", (event) => {\n  application.editDocument((selection) => {\n    selection.items[0].fill = new Color(\"red\");\n  });\n});\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Info`}</strong>{`\nFor comparison, plugin `}<a parentName=\"p\" {...{\n          \"href\": \"/uxp-xd/develop/plugin-development/plugin-structure/handlers/#command\"\n        }}>{`menu command handlers`}</a>{` are effectively run as if they were passed to `}<inlineCode parentName=\"p\">{`editDocument()`}</inlineCode>{` with `}<inlineCode parentName=\"p\">{`editLabel`}</inlineCode>{` set to the menu item's label and `}<inlineCode parentName=\"p\">{`mergeId`}</inlineCode>{` set to null.`}</p>\n    </blockquote>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"applicationcreaterenditionsrenditions\"\n    }}><em parentName=\"h3\">{`application.createRenditions(renditions)`}</em></h3>\n    <p>{`Generate renditions of nodes in the document in a batch. Overwrites any existing files without warning.`}</p>\n    <p>{`A single `}<inlineCode parentName=\"p\">{`createRenditions()`}</inlineCode>{` call can generate any number of renditions, including multiple renditions of the same node (with\ndifferent output settings) or renditions of multiple different nodes. Only one `}<inlineCode parentName=\"p\">{`createRenditions()`}</inlineCode>{` call can be executing at any\ngiven time, so wait for the Promise it returns before calling it again.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: static method of `}<a parentName=\"p\" {...{\n        \"href\": \"#module_application\"\n      }}><inlineCode parentName=\"a\">{`application`}</inlineCode></a><br parentName=\"p\"></br>{`\n`}<strong parentName=\"p\">{`Returns`}</strong>{`: `}<inlineCode parentName=\"p\">{`Promise<Array<RenditionResult>, string>`}</inlineCode>{` - Promise which is fulfilled with an array of RenditionResults (pointing to\nthe same `}<inlineCode parentName=\"p\">{`outputFile`}</inlineCode>{`s that were originally passed in, or rejected with an error string if one or more renditions failed for\nany reason.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`renditions`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Array<RenditionSettings>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`List of renditions to generate`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Typedef RenditionSettings`}</strong></p>\n    <p><em parentName=\"p\">{`All rendition settings fields are required`}</em>{` (for a given rendition type) unless otherwise specified.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`node`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`!SceneNode`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Root of scenegraph subtree to render. This may be `}<em parentName=\"td\">{`any`}</em>{` node in the scenegraph, regardless of the current edit context.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`outputFile`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`!uxp.storage.File`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`File to save the rendition to (overwritten without warning if it already exists)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`type`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`File type: RenditionType.PNG, JPG, PDF, or SVG`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`scale`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><em parentName=\"td\">{`(PNG & JPG renditions)`}</em>{` DPI multipler in the range `}{`[0.1, 100]`}{`, e.g. 2.0 for @2x DPI.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`quality`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><em parentName=\"td\">{`(JPG renditions)`}</em>{` Compression quality in the range `}{`[1, 100]`}{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`background`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`?Color`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><em parentName=\"td\">{`(PNG & JPEG renditions)`}</em>{` Alpha component ignored for JPG. Optional: defaults to transparent for PNG, solid white for JPG.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`minify`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><em parentName=\"td\">{`(SVG renditions)`}</em>{` If true, SVG code is minified.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`embedImages`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><em parentName=\"td\">{`(SVG renditions)`}</em>{` If true, bitmap images are stored as base64 data inside the SVG file. If false, bitmap images are saved as separate files linked from the SVG code.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Typedef RenditionResult`}</strong></p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`outputFile`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`!uxp.storage.File`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`File the rendition was written to (equal to `}<inlineCode parentName=\"td\">{`outputFile`}</inlineCode>{` in RenditionSettings)`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Generate PNG rendition of the selected node\nlet application = require(\"application\");\nlet fs = require(\"uxp\").storage.localFileSystem;\n\nlet file = await fs.getFileForSaving();\nlet shape = selection.items[0];\nlet renditions = [\n  {\n    node: shape,\n    outputFile: file,\n    type: application.RenditionType.PNG,\n    scale: 2,\n  },\n];\napplication.createRenditions(renditions).then(function (results) {\n  // ...do something with outputFiles on disk...\n});\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"applicationversion--string\"\n    }}><em parentName=\"h3\">{`application.version : `}<inlineCode parentName=\"em\">{`string`}</inlineCode></em></h3>\n    <p>{`Adobe XD version number in the form \"major.minor.patch.build\"`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: static property of `}<a parentName=\"p\" {...{\n        \"href\": \"#module_application\"\n      }}><inlineCode parentName=\"a\">{`application`}</inlineCode></a><br parentName=\"p\"></br>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`console.log(\"Version:\", application.version); // e.g. \"13.0.21.3\"\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"applicationapplanguage--string\"\n    }}><em parentName=\"h3\">{`application.appLanguage : `}<inlineCode parentName=\"em\">{`string`}</inlineCode></em></h3>\n    <p>{`Current language the application UI is using. This may not equal the user's OS locale setting: it is the closest\nlocale `}<em parentName=\"p\">{`supported by XD`}</em>{` - use this when you want your plugin's UI to be consistent with XD's UI. Specifies\nlanguage only, with no region info (e.g. \"fr\", not \"fr_FR\").`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: static property of `}<a parentName=\"p\" {...{\n        \"href\": \"#module_application\"\n      }}><inlineCode parentName=\"a\">{`application`}</inlineCode></a><br parentName=\"p\"></br>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`console.log(\"XD locale:\", application.appLanguage); // e.g. \"en\"\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"applicationsystemlocale--string\"\n    }}><em parentName=\"h3\">{`application.systemLocale : `}<inlineCode parentName=\"em\">{`string`}</inlineCode></em></h3>\n    <p>{`User's OS-wide locale setting. May not match the XD UI, since XD does not support all world languages. Includes both\nlanguage `}<em parentName=\"p\">{`and`}</em>{` region (e.g. \"fr_CA\" or \"en_US\").`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: static property of `}<a parentName=\"p\" {...{\n        \"href\": \"#module_application\"\n      }}><inlineCode parentName=\"a\">{`application`}</inlineCode></a><br parentName=\"p\"></br>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`console.log(\"OS locale:\", application.systemLocale); // e.g. \"en_US\"\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"applicationactivedocument--documentinfo\"\n    }}><em parentName=\"h3\">{`application.activeDocument : `}<inlineCode parentName=\"em\">{`!DocumentInfo`}</inlineCode></em></h3>\n    <p>{`Information about the document which this instance of the plugin is attached to.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Tip`}</strong>{` > `}<em parentName=\"p\">{`This does `}<strong parentName=\"em\">{`not`}</strong>{` indicate the frontmost \"active\" document window in the XD application.`}</em>{`\nIn XD, each document window `}<a parentName=\"p\" {...{\n          \"href\": \"/uxp-xd/develop/plugin-development/xd-concepts/lifecycle/#plugin-loading\"\n        }}>{`loads a separate copy of your plugin`}</a>{`. When a given instance of your plugin calls this API, you will always receive information about the document that this instance of the plugin is attached to, even if it's not the active window.`}</p>\n    </blockquote>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: static property of `}<a parentName=\"p\" {...{\n        \"href\": \"#module_application\"\n      }}><inlineCode parentName=\"a\">{`application`}</inlineCode></a><br parentName=\"p\"></br>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <p><strong parentName=\"p\">{`Typedef DocumentInfo`}</strong></p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`name`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Document name as displayed in the titlebar. For untitled documents, this will be a localized string such as \"Untitled-1.\"`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`guid`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><em parentName=\"td\">{`Semi`}</em>{`-unique document identifier. Duplicating an .xd file on disk will result in two files with the same GUID. Duplicating a document via \"Save As\" will change its GUID; thus two `}<em parentName=\"td\">{`cloud`}</em>{` documents will never have the same GUID. The GUID of an Untitled document doesn't change when it is saved for the first time. `}<br /><br />{`This returns the same value as `}<inlineCode parentName=\"td\">{`scenegraph.root.guid`}</inlineCode>{`.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let application = require(\"application\");\nlet documentInfo = application.activeDocument;\nconsole.log(\"Document title: \" + documentInfo.name);\nconsole.log(\"Document ID: \" + documentInfo.guid);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}