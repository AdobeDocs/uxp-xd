{"version":3,"file":"component---src-pages-develop-reference-group-md-9d742fc5775dfa13f937.js","mappings":"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","sources":["webpack://uxp-xd/./src/pages/develop/reference/Group.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"group\"\n    }}>{`Group`}</h1>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: class\n`}<strong parentName=\"p\">{`Extends`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/SceneNode\"\n      }}>{`SceneNode`}</a></p>\n    <p>{`Group nodes represent two types of simple containers in XD:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Plain Groups, created by the `}<em parentName=\"li\">{`Object > Group`}</em>{` command`}</li>\n      <li parentName=\"ul\">{`Masked Groups, created by the `}<em parentName=\"li\">{`Object > Mask With Shape`}</em>{` command\nYou can determine whether a group is masked by checking the `}<inlineCode parentName=\"li\">{`mask`}</inlineCode>{` property.`}</li>\n    </ul>\n    <p>{`Groups and other containers cannot be created directly using scenenode constructors, since you can't add a populated Group to the\nscenegraph (you can't add subtrees all at once) nor can you add an empty Group and then add children to it (can't add nodes outside\nthe scope of the current `}<em parentName=\"p\">{`edit context`}</em>{`). Instead, to create Groups and other nested structures, use `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/commands/\"\n      }}>{`commands`}</a>{`.`}</p>\n    <p>{`Plain Groups (as well as some other node types, like SymbolInstances) can have dynamic layout features enabled such as padding and\nstack layouts. These are sometimes referred to as Content-Aware Groups or Stack containers, but ultimately these appear in the API as\nplain Group nodes. They do not carry the same edit-context restrictions as Masked Groups or other special node types.`}</p>\n    <p>{`In a Mask Group, the mask shape is included in the group's `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{` list, at the top of the z order. It is not visible - only its\npath outline is used, for clipping the group.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let commands = require(\"commands\");\n\n// Newly created shape nodes\nlet shape1 = ...,\n    shape2 = ...;\n\n// Add both nodes to the current edit context first\nselection.insertionParent.addChild(shape1);\nselection.insertionParent.addChild(shape2);\n\n// Select both shapes, then run the Group command\nselection.items = [shape1, shape2];\ncommands.group();\nlet group = selection.items[0];  // selection has been set to the new Group node afterward\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"addchild\"\n    }}>{`addChild()`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`addChild`}</strong>{`(`}<inlineCode parentName=\"p\">{`node`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`index`}</inlineCode>{`)`}</p>\n    <p>{`Adds a child node to this container node. You can only add leaf nodes this way; to create structured subtrees of content,\nuse `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/commands/\"\n      }}>{`commands`}</a>{`.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`node`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`SceneNode`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Child to add`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`index`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`?number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Optional: index to insert child at. Child is appended to end of children list (top of z order) otherwise.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance method of `}<a parentName=\"p\" {...{\n        \"href\": \"#group\"\n      }}>{`Group`}</a>{` and other container nodes`}</p>\n    <h2 {...{\n      \"id\": \"addchildafter\"\n    }}>{`addChildAfter()`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`addChildAfter`}</strong>{`(`}<inlineCode parentName=\"p\">{`node`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`relativeTo`}</inlineCode>{`)`}</p>\n    <p>{`Inserts a child node after the given reference node.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`node`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`SceneNode`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Child to add`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`relativeTo`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`SceneNode`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`New child is added immediately after this existing child`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance method of `}<a parentName=\"p\" {...{\n        \"href\": \"#group\"\n      }}>{`Group`}</a>{` and other container nodes`}</p>\n    <h2 {...{\n      \"id\": \"addchildbefore\"\n    }}>{`addChildBefore()`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`addChildBefore`}</strong>{`(`}<inlineCode parentName=\"p\">{`node`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`relativeTo`}</inlineCode>{`)`}</p>\n    <p>{`Inserts a child node before the given reference node.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`node`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`SceneNode`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Child to add`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`relativeTo`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`SceneNode`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`New child is added immediately before this existing child`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance method of `}<a parentName=\"p\" {...{\n        \"href\": \"#group\"\n      }}>{`Group`}</a>{` and other container nodes`}</p>\n    <h2 {...{\n      \"id\": \"removeallchildren\"\n    }}>{`removeAllChildren()`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`removeAllChildren`}</strong>{`()`}</p>\n    <p>{`Removes all children from this node. Equivalent to calling removeFromParent() on each child in turn, but faster.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance method of `}<a parentName=\"p\" {...{\n        \"href\": \"#group\"\n      }}>{`Group`}</a>{` and other container nodes`}</p>\n    <h2 {...{\n      \"id\": \"dynamiclayout\"\n    }}>{`dynamicLayout`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`dynamicLayout`}</strong>{`: `}<inlineCode parentName=\"p\">{`?boolean`}</inlineCode></p>\n    <p><strong parentName=\"p\">{`Since:`}</strong>{` XD 29`}</p>\n    <p>{`If true, Responsive Resize is enabled, and this node's children will use an intelligent layout algorithm whenever this node is resized.`}</p>\n    <p>{`Returns undefined on node types that do not support Responsive Resize (such as RepeatGrid; see `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/SceneNode/#horizontalconstraints\"\n      }}>{`horizontalConstraints`}</a>{` docs for a\ncomplete list). Attempting to set this property on such node types results in an error.`}</p>\n    <p><strong parentName=\"p\">{`See`}</strong>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/reference/SceneNode/#horizontalconstraints\"\n        }}>{`horizontalConstraints`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/develop/reference/SceneNode/#verticalconstraints\"\n        }}>{`verticalConstraints`}</a></li>\n    </ul>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#group\"\n      }}>{`Group`}</a></p>\n    <h2 {...{\n      \"id\": \"mask\"\n    }}>{`mask`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`mask`}</strong>{`: ?`}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/SceneNode\"\n      }}>{`SceneNode`}</a></p>\n    <p>{`The mask shape applied to this group, if any. This object is also present in the group's `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{` list. Though it has no direct visual appearance of its own, the mask affects the entire group's appearance by clipping all its other content.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`localBounds`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`globalBounds`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`globalDrawBounds`}</inlineCode>{` of a Masked Group are based on the bounds of the mask shape alone, regardless of whether the content is larger than the mask or even if the content doesn't fill the mask area completely.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let group = ...;\nconsole.log(\"Type of group is: \" + (group.mask ? \"Masked Group\" : \"Plain Group\"));\n`}</code></pre>\n    <p>{`To create a Masked Group, use `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/commands/#createmaskgroup\"\n      }}>{`commands.createMaskGroup`}</a>{` instead of `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/commands/#group\"\n      }}>{`commands.group`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#group\"\n      }}>{`Group`}</a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}