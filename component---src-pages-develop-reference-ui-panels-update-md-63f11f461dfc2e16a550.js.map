{"version":3,"file":"component---src-pages-develop-reference-ui-panels-update-md-63f11f461dfc2e16a550.js","mappings":"kQAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGC,GAAK,YAER,OAAO,SAACJ,GAAS,UAAKD,EAAiBK,EAAK,CAAED,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,yBAAuB,4BAE/B,0BAAW,uBAAYC,WAAW,KAAG,YAA0B,oBAAoB,eAAIA,WAAW,KAAG,YAAkB,yBAAyB,cAAGA,WAAW,IAC1J,KAAQ,uEAAqE,iBACvD,eAAe,uBAAYA,WAAW,KAAG,YAA0B,yDAC7F,oBACE,eAAIA,WAAW,MAAI,wCACnB,eAAIA,WAAW,MAAI,yIACnB,eAAIA,WAAW,MAAI,0DAErB,0BAAW,uBAAYA,WAAW,KAAG,UAAwB,uBAAuB,cAAGA,WAAW,IAC9F,KAAQ,uFACP,uBAAYA,WAAW,KAAG,aAA2B,SAAS,uBAAYA,WAAW,KAAG,QAAsB,cAAkB,MACrI,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eAAa,sOAS9B,2GAA4F,uBAAYA,WAAW,KAAG,kBAAgC,qDACtJ,mCAAoB,uBAAYA,WAAW,KAAG,UAAwB,wKAG1E,CAEAJ,EAAWK,gBAAiB,C","sources":["webpack://uxp-xd/./src/pages/develop/reference/ui/panels/update.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"panel-update-callback\"\n    }}>{`Panel update() callback`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`update()`}</inlineCode>{` function is an `}<em parentName=\"p\">{`optional`}</em>{` lifecycle method in `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/plugin-structure/handlers/#panel\"\n      }}>{`panel objects`}</a>{`. XD calls `}<inlineCode parentName=\"p\">{`update()`}</inlineCode>{` whenever your panel UI content should be refreshed:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`When the user changes the selection`}</li>\n      <li parentName=\"ul\">{`When the user modifies a node within the current selection. This can include actions such as move, resize, changing fill color, etc.`}</li>\n      <li parentName=\"ul\">{`When your panel is reopened after having been closed`}</li>\n    </ul>\n    <p>{`The `}<inlineCode parentName=\"p\">{`update`}</inlineCode>{` function receives `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/plugin-development/plugin-structure/handlers/#contextual-arguments\"\n      }}><inlineCode parentName=\"a\">{`selection`}</inlineCode>{` and `}<inlineCode parentName=\"a\">{`root`}</inlineCode>{` arguments`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function update(selection, root) {\n  const { Text } = require(\"scenegraph\");\n\n  if (!(selection.items[0] instanceof Text)) {\n    panelContainer.innerHTML = \\`<p>Please select a text object in the document.</p>\\`;\n  }\n}\n`}</code></pre>\n    <p>{`Note that the example code above assumes you created a reference to the panel markup `}<inlineCode parentName=\"p\">{`panelContainer`}</inlineCode>{` at the global level when the panel was created.`}</p>\n    <p>{`Whenever the `}<inlineCode parentName=\"p\">{`update`}</inlineCode>{` function is called, it is important to get in and out as quickly as possible since it's triggered for essentially every user action in XD while your panel is open.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}