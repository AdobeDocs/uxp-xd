{"version":3,"file":"component---src-pages-develop-reference-image-fill-md-fbb49fe54d15c86d34a9.js","mappings":"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","sources":["webpack://uxp-xd/./src/pages/develop/reference/ImageFill.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"imagefill\"\n    }}>{`ImageFill`}</h1>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: class`}</p>\n    <p>{`ImageFill represents a bitmap (raster) image that can be used as the `}<inlineCode parentName=\"p\">{`fill`}</inlineCode>{` property of any shape node (but not Artboards).\nThe supported image encodings are: PNG, JPEG, and GIF.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// User picks an image file\nconst storage = require(\"uxp\").storage;\nconst fs = storage.localFileSystem;\nlet imageFile = await fs.getFileForOpening({ types: storage.fileTypes.images });\n\n// Create ImageFill for this image\nconst ImageFill = require(\"scenegraph\").ImageFill;\nlet fill = new ImageFill(imageFile);\n\n// Set fill of first selected item\nselection.items[0].fill = fill;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"new-imagefill\"\n    }}>{`new ImageFill()`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`new ImageFill`}</strong>{`(`}<inlineCode parentName=\"p\">{`fileOrDataURI`}</inlineCode>{`): `}<a parentName=\"p\" {...{\n        \"href\": \"#ImageFill\"\n      }}>{`ImageFill`}</a></p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`fileOrDataURI`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`uxp.storage.File`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`File object pointing to an image file; or a string containing a `}<inlineCode parentName=\"td\">{`data:`}</inlineCode>{` URI with a base-64 encoded image.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"clone\"\n    }}>{`clone()`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`clone`}</strong>{`(): `}<a parentName=\"p\" {...{\n        \"href\": \"#ImageFill\"\n      }}>{`ImageFill`}</a></p>\n    <p>{`Returns a new copy of this ImageFill.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance method of `}<a parentName=\"p\" {...{\n        \"href\": \"#ImageFill\"\n      }}>{`ImageFill`}</a></p>\n    <h2 {...{\n      \"id\": \"assetid\"\n    }}>{`assetId`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`assetId`}</strong>{`: `}<inlineCode parentName=\"p\">{`string`}</inlineCode></p>\n    <p><strong parentName=\"p\">{`Since`}</strong>{`: XD 29`}</p>\n    <p>{`A unique identifier for the image asset used by this ImageFill. May be shared by other ImageFills, including those with different cropping, size,\nrotation, or mirroring. If identical images are imported into XD from separate sources, they may have different `}<inlineCode parentName=\"p\">{`assetId`}</inlineCode>{`s however.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#ImageFill\"\n      }}>{`ImageFill`}</a></p>\n    <h2 {...{\n      \"id\": \"scalebehavior\"\n    }}>{`scaleBehavior`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`scaleBehavior`}</strong>{`: `}<inlineCode parentName=\"p\">{`string`}</inlineCode></p>\n    <p><strong parentName=\"p\">{`Default`}</strong>{`: `}<inlineCode parentName=\"p\">{`SCALE_COVER`}</inlineCode></p>\n    <p>{`How the image is scaled when the aspect ratio of the shape does not match the aspect ratio of the image:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`ImageFill.SCALE_COVER - The image's aspect ratio is preserved and it is scaled to completely cover the area of the shape. This means on one axis the\nimage's edges line up exactly with the edges of the shape, and on the other axis the image extends beyond the shape's bounds and is cropped. (Similar\nto `}<inlineCode parentName=\"li\">{`object-fit: cover`}</inlineCode>{` in CSS).`}</li>\n      <li parentName=\"ul\">{`ImageFill.SCALE_STRETCH - The image is stretched (distorting its aspect ratio) so its edges line up exactly with the edges of the shape. (Similar to\n`}<inlineCode parentName=\"li\">{`object-fit: fill`}</inlineCode>{` in CSS).`}</li>\n    </ul>\n    <p>{`Image size and scaling are also affected by `}<em parentName=\"p\">{`cropping settings`}</em>{`, but these are not yet exposed to plugins.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#ImageFill\"\n      }}>{`ImageFill`}</a></p>\n    <h2 {...{\n      \"id\": \"naturalwidth\"\n    }}>{`naturalWidth`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`naturalWidth`}</strong>{`: `}<inlineCode parentName=\"p\">{`number`}</inlineCode></p>\n    <p>{`Pixel dimensions of the underlying bitmap image data.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#ImageFill\"\n      }}>{`ImageFill`}</a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h2 {...{\n      \"id\": \"naturalheight\"\n    }}>{`naturalHeight`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`naturalHeight`}</strong>{`: `}<inlineCode parentName=\"p\">{`number`}</inlineCode></p>\n    <p>{`Pixel dimensions of the underlying bitmap image data.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#ImageFill\"\n      }}>{`ImageFill`}</a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h2 {...{\n      \"id\": \"mimetype\"\n    }}>{`mimeType`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`mimeType`}</strong>{`: `}<inlineCode parentName=\"p\">{`string`}</inlineCode></p>\n    <p>{`Format the image data was originally encoded in, such as `}<inlineCode parentName=\"p\">{`image/gif`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`image/jpeg`}</inlineCode>{`.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#ImageFill\"\n      }}>{`ImageFill`}</a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n    <h2 {...{\n      \"id\": \"islinkedcontent\"\n    }}>{`isLinkedContent`}</h2>\n    <p>{`▸ `}<strong parentName=\"p\">{`isLinkedContent`}</strong>{`: `}<inlineCode parentName=\"p\">{`boolean`}</inlineCode></p>\n    <p>{`True if the image comes from a link to an external resource, such as Creative Cloud Libraries.`}</p>\n    <p><strong parentName=\"p\">{`Kind`}</strong>{`: instance property of `}<a parentName=\"p\" {...{\n        \"href\": \"#ImageFill\"\n      }}>{`ImageFill`}</a>{`\n`}<strong parentName=\"p\">{`Read only`}</strong>{`: true`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}