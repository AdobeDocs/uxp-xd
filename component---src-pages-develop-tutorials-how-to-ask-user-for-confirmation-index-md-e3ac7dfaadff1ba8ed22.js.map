{"version":3,"sources":["webpack:///./src/pages/develop/tutorials/how-to-ask-user-for-confirmation/index.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yPAQaA,G,UAAe,IACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,cAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,mBAAQ,CACN,GAAM,oCADR,oCAGA,uPACA,mBAAQ,CACN,GAAM,mBADR,mBAGA,wBACE,oBAAIC,WAAW,MAAK,+BAAGA,WAAW,MAAS,CACvC,KAAQ,8CADQ,oBAItB,mBAAQ,CACN,GAAM,iBADR,iBAGA,wBACE,oBAAIA,WAAW,MAAf,iDACA,oBAAIA,WAAW,MAAK,+BAAGA,WAAW,MAAS,CACvC,KAAQ,mCADQ,yBAGpB,oBAAIA,WAAW,MAAK,+BAAGA,WAAW,MAAS,CACvC,KAAQ,iCADQ,wBAItB,mBAAQ,CACN,GAAM,qBADR,qBAGA,gCACE,mBAAGA,WAAW,cAAa,wBAAQA,WAAW,KAAnB,QAA3B,gDACuC,+BAAGA,WAAW,KAAQ,CACzD,KAAQ,+EAD2B,aADvC,MAKF,mBAAQ,CACN,GAAM,oCADR,sCAGA,0FAAuE,+BAAGA,WAAW,KAAQ,CACzF,KAAQ,mCAD2D,wBAAvE,KAGA,sCAAmB,4BAAYA,WAAW,KAAvB,iBAAnB,8CACA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,yIAUL,yEAAsD,+BAAGA,WAAW,KAAQ,CACxE,KAAQ,0CAD0C,kCAAtD,qHAGA,mBAAQ,CACN,GAAM,oCADR,uCAGA,+NAA2M,+BAAGA,WAAW,KAAQ,CAC7N,KAAQ,8CAD+L,6CAA3M,KAGA,uEACA,wBACE,oBAAIA,WAAW,MAAf,sEACA,oBAAIA,WAAW,MAAf,wDACA,oBAAIA,WAAW,MAAf,YAAiC,4BAAYA,WAAW,MAAvB,OAAjC,mCAEF,mBAAQ,CACN,GAAM,0CADR,kBAEsB,4BAAYA,WAAW,MAAvB,WAFtB,cAEyF,4BAAYA,WAAW,MAAvB,YACzF,oDAAiC,4BAAYA,WAAW,KAAvB,WAAjC,KACA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uDAIL,6CAA0B,4BAAYA,WAAW,KAAvB,WAA1B,gEACA,mBAAQ,CACN,GAAM,mDADR,oDAGA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6EAML,8DAA2C,4BAAYA,WAAW,KAAvB,WAA3C,8CAA6I,4BAAYA,WAAW,KAAvB,WAA7I,2BACA,wBACE,oBAAIA,WAAW,MAAf,sBACA,oBAAIA,WAAW,MAAf,iEACA,oBAAIA,WAAW,MAAf,6GAEF,kEACA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iMAQL,gWACA,mBAAQ,CACN,GAAM,uCADR,wCAGA,4JAAyI,4BAAYA,WAAW,KAAvB,SAAzI,oBAA+M,4BAAYA,WAAW,KAAvB,YAA/M,gCAAoS,4BAAYA,WAAW,KAAvB,WAApS,MACA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,yIAWL,uDAAoC,4BAAYA,WAAW,KAAvB,SAApC,kDAAwI,4BAAYA,WAAW,KAAvB,WAAxI,QAAoM,4BAAYA,WAAW,KAAvB,KAApM,+BAAiR,4BAAYA,WAAW,KAAvB,KAAjR,4BACA,mBAAQ,CACN,GAAM,6BADR,8BAGA,oEAAiD,4BAAYA,WAAW,KAAvB,WAAjD,sDACA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oEAQL,0EAAuD,4BAAYA,WAAW,KAAvB,aAAvD,iCAKJJ,EAAWK,gBAAiB","file":"component---src-pages-develop-tutorials-how-to-ask-user-for-confirmation-index-md-e3ac7dfaadff1ba8ed22.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"asking-the-user-for-confirmation\"\n    }}>{`Asking the user for confirmation`}</h1>\n    <p>{`There are many times when a plugin will need to ask the user whether or not it should proceed with a given course of action. This tutorial will show you an easy way to get user confirmation before proceeding with a task.`}</p>\n    <h2 {...{\n      \"id\": \"technology-used\"\n    }}>{`Technology Used`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/AdobeXD/plugin-toolkit\"\n        }}>{`Plugin Toolkit`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Basic knowledge of HTML, CSS, and JavaScript.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/tutorials/quick-start/\"\n        }}>{`Quick Start Tutorial`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/tutorials/debugging/\"\n        }}>{`Debugging Tutorial`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"development-steps\"\n    }}>{`Development Steps`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Info`}</strong>{`\nComplete code for this plugin can be found `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/AdobeXD/Plugin-Samples/tree/master/ui-dialog-variations\"\n        }}>{`on GitHub`}</a>{`.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"1-prepare-your-manifestjson-file\"\n    }}>{`1. Prepare your manifest.json file`}</h3>\n    <p>{`First, edit the manifest file for the plugin you created in our `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/tutorials/quick-start/\"\n      }}>{`Quick Start Tutorial`}</a>{`.`}</p>\n    <p>{`Replace the `}<inlineCode parentName=\"p\">{`uiEntryPoints`}</inlineCode>{` field of the manifest with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"uiEntryPoints\": [\n    {\n        \"type\": \"menu\",\n        \"label\": \"Confirmation\",\n        \"commandId\": \"showConfirm\"\n    }\n]\n`}</code></pre>\n    <p>{`If you're curious about what each entry means, `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/reference/structure/manifest/\"\n      }}>{`see the manifest documentation`}</a>{`, where you can also learn about all manifest requirements for a plugin to be published in the XD Plugin Manager.`}</p>\n    <h3 {...{\n      \"id\": \"2-add-the-plugin-helpers-library\"\n    }}>{`2. Add the \"plugin helpers\" library`}</h3>\n    <p>{`Creating dialogs can take a lot of boilerplate code, but we've created a small library that makes it simple to display simple dialogs in the form of a \"helper\" library. This library is located at `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeXD/plugin-toolkit\"\n      }}>{`https://github.com/AdobeXD/plugin-toolkit`}</a>{`.`}</p>\n    <p>{`To add the library to your project, you can:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Click the \"Clone or Download\" button on the right side of the page`}</li>\n      <li parentName=\"ul\">{`Uncompress the zip file after the download completes`}</li>\n      <li parentName=\"ul\">{`Copy the `}<inlineCode parentName=\"li\">{`lib`}</inlineCode>{` folder to your plugin project`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"3-require-the-dialogs-module-in-mainjs\"\n    }}>{`3. Require the `}<inlineCode parentName=\"h3\">{`dialogs`}</inlineCode>{` module in `}<inlineCode parentName=\"h3\">{`main.js`}</inlineCode></h3>\n    <p>{`Add the following to your `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { confirm } = require(\"./lib/dialogs.js\");\n`}</code></pre>\n    <p>{`This will import a `}<inlineCode parentName=\"p\">{`confirm`}</inlineCode>{` function that we can call to display a confirmation dialog.`}</p>\n    <h3 {...{\n      \"id\": \"4-create-a-function-to-display-the-confirmation\"\n    }}>{`4. Create a function to display the confirmation`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function showConfirm() {\n  /* we'll display a dialog here */\n}\n`}</code></pre>\n    <p>{`Next, inside this function, we call `}<inlineCode parentName=\"p\">{`confirm`}</inlineCode>{` to actually show the confirmation dialog. `}<inlineCode parentName=\"p\">{`confirm`}</inlineCode>{` takes three arguments:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The dialog's title`}</li>\n      <li parentName=\"ol\">{`The text you want to display to the user in the dialog's body`}</li>\n      <li parentName=\"ol\">{`The two buttons from which you want the user to choose (A confirmation dialog can only have two buttons)`}</li>\n    </ol>\n    <p>{`Let's see what that looks like in code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const feedback = await confirm(\n  \"Enable Smart Filters?\", //[1]\n  \"Smart filters are nondestructive and will preserve your original images.\", //[2]\n  [\"Cancel\", \"Enable\"] /*[3]*/\n);\n`}</code></pre>\n    <p>{`Note that the third argument is an array of strings. These identify the names of the two buttons that will display in the confirmation dialog. These are given in the order they would appear on a macOS machine, which means that the \"cancel\" or negative button is listed first, and the \"ok\" or acceptance button is listed last.`}</p>\n    <h3 {...{\n      \"id\": \"5-react-to-which-button-was-pressed\"\n    }}>{`5. React to which button was pressed`}</h3>\n    <p>{`When the dialog is closed, some useful information about which button was pressed will be provided. You can access this using the `}<inlineCode parentName=\"p\">{`which`}</inlineCode>{` property on the `}<inlineCode parentName=\"p\">{`feedback`}</inlineCode>{` variable (return value from `}<inlineCode parentName=\"p\">{`confirm`}</inlineCode>{`).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`switch (feedback.which) {\n  case 0:\n    /* User canceled */\n    break;\n  case 1:\n    /* User clicked Enable */\n    break;\n}\n`}</code></pre>\n    <p>{`As you can see, the value of `}<inlineCode parentName=\"p\">{`which`}</inlineCode>{` maps to the buttons as specified when calling `}<inlineCode parentName=\"p\">{`confirm`}</inlineCode>{`. So `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{` is the \"Cancel\" button and `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{` is the \"Enable\" button.`}</p>\n    <h3 {...{\n      \"id\": \"6-create-the-menu-handler\"\n    }}>{`6. Create the menu handler`}</h3>\n    <p>{`We need to export a menu handler from the `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file so that XD knows what to do with our plugin:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`module.exports = {\n  commands: {\n    showConfirm,\n  },\n};\n`}</code></pre>\n    <p>{`Make sure to your commands match the manifest's `}<inlineCode parentName=\"p\">{`commandId`}</inlineCode>{`s written in the first step.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}