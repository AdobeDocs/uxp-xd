{"version":3,"sources":["webpack:///./src/pages/develop/tutorials/how-to-show-an-alert/assets/OurAlert.png","webpack:///./src/pages/develop/tutorials/how-to-show-an-alert/index.md","webpack:///./src/pages/develop/tutorials/how-to-show-an-alert/assets/ErrorAlert.png"],"names":["module","exports","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","alt","src","require","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-develop-tutorials-how-to-show-an-alert-index-md-3a2e95b5733aaf118be3.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/OurAlert-dee11bf2e29b669a670776933882c2a7.png\";","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"how-to-show-an-alert\"\n    }}>{`How to show an alert`}</h1>\n    <p>{`There will be times when you need to show a simple message to your user. This tutorial will show you an easy way to display an informational message like the following:`}</p>\n    <p><img alt=\"A typical alert message\" src={require(\"./assets/OurAlert.png\")} /></p>\n    <p>{`Other times you'll need to display an `}<em parentName=\"p\">{`error`}</em>{` alert, which looks like this:`}</p>\n    <p><img alt=\"An error alert\" src={require(\"./assets/ErrorAlert.png\")} /></p>\n    <h2 {...{\n      \"id\": \"technology-used\"\n    }}>{`Technology Used`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/AdobeXD/plugin-toolkit\"\n        }}>{`Plugin Toolkit`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Basic knowledge of HTML, CSS, and JavaScript.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/tutorials/quick-start/\"\n        }}>{`Quick Start Tutorial`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/tutorials/debugging/\"\n        }}>{`Debugging Tutorial`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"development-steps\"\n    }}>{`Development Steps`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Info`}</strong>{`\nComplete code for this plugin can be found `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/AdobeXD/plugin-samples/tree/master/how-to-display-an-alert\"\n        }}>{`on GitHub`}</a>{`.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"1-prepare-your-manifestjson-file\"\n    }}>{`1. Prepare your manifest.json file`}</h3>\n    <p>{`First, edit the manifest file for the plugin you created in our `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/tutorials/quick-start\"\n      }}>{`Quick Start Tutorial`}</a>{`.`}</p>\n    <p>{`Replace the `}<inlineCode parentName=\"p\">{`uiEntryPoints`}</inlineCode>{` field of the manifest with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"uiEntryPoints\": [\n    {\n      \"type\": \"menu\",\n      \"label\": \"How to show an alert\",\n      \"commandId\": \"showAlert\"\n    },\n    {\n      \"type\": \"menu\",\n      \"label\": \"How to show an error\",\n      \"commandId\": \"showError\"\n    }\n  ]\n`}</code></pre>\n    <p>{`If you're curious about what each entry means, `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/reference/structure/manifest/\"\n      }}>{`see the manifest documentation`}</a>{`, where you can also learn about all manifest requirements for a plugin to be published in the XD Plugin Manager.`}</p>\n    <h3 {...{\n      \"id\": \"2-add-the-plugin-helpers-library\"\n    }}>{`2. Add the \"plugin helpers\" library`}</h3>\n    <p>{`Creating dialogs can take a lot of boilerplate code, but we've created a small library that makes it simple to display simple dialogs in the form of a \"helper\" library. This library is located at `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeXD/plugin-toolkit\"\n      }}>{`https://github.com/AdobeXD/plugin-toolkit`}</a>{`.`}</p>\n    <p>{`To add the library to your project, you can:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Click the \"Clone or Download\" button on the right side of the page`}</li>\n      <li parentName=\"ul\">{`Uncompress the zip file after the download completes`}</li>\n      <li parentName=\"ul\">{`Copy the `}<inlineCode parentName=\"li\">{`lib`}</inlineCode>{` folder to your plugin project`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"3-require-the-dialogs-module-in-mainjs\"\n    }}>{`3. Require the `}<inlineCode parentName=\"h3\">{`dialogs`}</inlineCode>{` module in `}<inlineCode parentName=\"h3\">{`main.js`}</inlineCode></h3>\n    <p>{`Add the following to your `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { alert, error } = require(\"./lib/dialogs.js\");\n`}</code></pre>\n    <p>{`This will import a `}<inlineCode parentName=\"p\">{`alert`}</inlineCode>{` function that we can call to display an alert. The `}<inlineCode parentName=\"p\">{`error`}</inlineCode>{` function can be used to display the error variation.`}</p>\n    <h3 {...{\n      \"id\": \"4-create-a-function-to-display-the-alert\"\n    }}>{`4. Create a function to display the alert`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function showAlert() {\n    /* we'll display a dialog here */\n}\n`}</code></pre>\n    <p>{`Next, inside this function, we call `}<inlineCode parentName=\"p\">{`alert`}</inlineCode>{` to render the message. This function takes several parameters:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The dialog's title`}</li>\n      <li parentName=\"ol\">{`The text you want to display to the user in the dialog's body -- you can pass as many lines of text as you want (but be careful: dialogs won't scroll automatically!)`}</li>\n    </ol>\n    <p>{`Let's see what that looks like in code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`await alert(\"Connect to the Internet\", //[1]\n    \"In order to function correctly, this plugin requires access to the Internet. Please connect to a network that has Internet access.\"); //[2]\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"5-create-a-function-to-display-an-error-alert\"\n    }}>{`5. Create a function to display an error alert`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function showError() {\n    /* we'll display a dialog here */\n}\n`}</code></pre>\n    <p>{`Inside this function, we call `}<inlineCode parentName=\"p\">{`error`}</inlineCode>{` to render the message. Just like `}<inlineCode parentName=\"p\">{`alert`}</inlineCode>{`, this function takes several parameters:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The dialog's title`}</li>\n      <li parentName=\"ol\">{`The text you want to display to the user in the dialog's body -- you can pass as many lines of text as you want (but be careful: dialogs won't scroll automatically!)`}</li>\n    </ol>\n    <p>{`Let's see what that looks like in code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`await error(\"Synchronization Failed\", //[1]\n    \"Failed to synchronize all your changes with our server. Some changes may have been lost.\",\n    \"Steps you can take:\",\n    \"* Save your document\",\n    \"* Check your network connection\",\n    \"* Try again in a few minutes\"); //[2]\n`}</code></pre>\n    <p>{`Note that the we passed several lines of text to `}<inlineCode parentName=\"p\">{`error`}</inlineCode>{`, including some markdown-like list items. The `}<inlineCode parentName=\"p\">{`dialogs`}</inlineCode>{` module understands a very limited subset of markdown; for more see the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeXD/plugin-toolkit\"\n      }}>{`Plugin Toolkit`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"6-create-the-menu-handler\"\n    }}>{`6. Create the menu handler`}</h3>\n    <p>{`We need to export a menu handler from the `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file so that XD knows what to do with our plugin:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`module.exports = {\n    commands: {\n        showAlert,\n        showError\n    }\n}\n`}</code></pre>\n    <p>{`Make sure to your commands match the manifest's `}<inlineCode parentName=\"p\">{`commandId`}</inlineCode>{`s written in the first step.`}</p>\n    <h2 {...{\n      \"id\": \"guidelines\"\n    }}>{`Guidelines`}</h2>\n    <p>{`It's important to know `}<em parentName=\"p\">{`when`}</em>{` to show an alert because they do obstruct the user's ability to interact with XD. As such, you should follow these guidelines:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Don't`}</strong>{` display \"success\" alerts when it's obvious that the plugin has been successful.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Do`}</strong>{` display a \"success\" alert if your plugin's operation is completed, but the user would have no way of knowing.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Do`}</strong>{` use human-readable language.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Don't`}</strong>{` use technical jargon unless it's language the user is already familiar with.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"next-steps\"\n    }}>{`Next Steps`}</h2>\n    <p>{`Other than `}<inlineCode parentName=\"p\">{`alert`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`error`}</inlineCode>{`, there are other useful dialog helpers that you might be interested in.`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/tutorials/how-to-ask-user-for-confirmation/\"\n        }}>{`How to ask for confirmation`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-xd/design/user-interface/\"\n        }}>{`User Interface design`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/AdobeXD/plugin-samples\"\n        }}>{`Other samples`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = __webpack_public_path__ + \"static/ErrorAlert-46afd640330b413025ba108e12e0c1bf.png\";"],"sourceRoot":""}