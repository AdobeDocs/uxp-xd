{"version":3,"file":"component---src-pages-develop-reference-ui-dialogs-showing-md-f710951b4163b7b9eb9e.js","mappings":"wQAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,0BAAwB,2BAEhCA,EAAAA,EAAAA,KAAA,yCAAmCA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAC7C,KAAQ,uFACPH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,gCAAiD,0EAA0EH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,WAAyB,uEAC7MH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,gIAM9BH,EAAAA,EAAAA,KAAA,mBACEA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,eAAaH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,UACjDH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,cAAY,uBAAwBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,QAAc,gGAEpFH,EAAAA,EAAAA,KAAA,0IAAoIA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,4CAAkD,gCAG5M,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://uxp-xd/./src/pages/develop/reference/ui/dialogs/showing.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-xd/uxp-xd/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"showing-a-modal-dialog\"\n    }}>{`Showing a Modal Dialog`}</h1>\n    <p>{`Dialogs are shown using the `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-xd/develop/reference/uxp/class/HTMLDialogElement/#htmldialogelement-showmodal\"\n      }}><inlineCode parentName=\"a\">{`HTMLDialogElement#showModal`}</inlineCode></a>{` method. This method will render the dialog. The method will return a `}<inlineCode parentName=\"p\">{`Promise`}</inlineCode>{`, which you can use to easily wait for the dialog to be dismissed.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`dialog.showModal().then((result) => {\n  // handle dialog result\n  // if canceled by ESC, will be \"reasonCanceled\"\n});\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Info`}</strong></p>\n      <p parentName=\"blockquote\">{`The dialog element `}<em parentName=\"p\">{`must`}</em>{` be present in the DOM before showing it. If it isn't, the method will throw an exception.`}</p>\n    </blockquote>\n    <p>{`It's important to note that you can only show one dialog at once. You should always close or dismiss a dialog first and then `}<em parentName=\"p\">{`wait for the dialog's promise to resolve`}</em>{` before showing another one.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}